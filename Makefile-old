# Son of Survex Makefile
# for Survex v0.72
# Copyright (C) Olly Betts 1993-1998
#
# 1996.02.12 based on Survex mk1 makefile
# 1996.02.15 added clean rule
# 1996.02.19 added osalloc.h and ostypes.h
# 1996.04.01 worked Wookey's Borland C version in
# 1996.04.02 adjusted to use GNU make style ifdef
# 1996.04.04 fixed extend.exe which was building as error.exe
# 1996.04.17 decided a $(RM) which can handle multiple objects is required
#            fixed-up make clean
# 1996.04.23 worked on Borland C flags
# 1996.04.27 added dosexezip
# 1996.05.08 fettled in changes from DOS
# 1996.05.09 added pr.rsp, since Borland C command lines were too long
# 1996.05.12 DJGPP v2 supports signals, so removed NO_SIGNAL
# 1997.01.12 added unix_djgpp (for Unix hosted DJGPP cross compiler)
#            Now use gcc -s in djgpp link stage to strip .exe-s
# 1997.01.16 added source_archive target
# 1997.01.23 fixed so dos_gcc and unix_djgpp don't try to build caverot
#            added unix_djgpp_zip target
# 1997.01.24 fixed up unix_djgpp_zip
#            noted down runes to build document archives
# 1997.01.30 added "-g" to CFLG for RISC OS debug version
#            added mouse support to djgpp grx and jlib versions of caverot
# 1997.01.31 fixed up libraries for unix_djgpp caverot
#            fixed source_archive to include containing directory
# 1997.02.02 mods for RISC OS
# 1997.02.07 fixed up .h dependency thinko and brought rules up to date
# 1997.02.15 UFLG = -MMD removed
# 1997.02.24 cvrotgfx added
# 1997.02.25 DJGPP + Allegro caverot done
# 1997.03.12 removed cvrotfns.h
# 1997.05.11 managed to work around OSLib problems in the code
# 1997.06.03 xcaverot now uses cvrotimg
# 1997.06.04 merged in changes from deviant makefile
#            added xrot.h to source archive list
# 1997.06.06 added xrot.h to other source archive list
# 1998.03.21 osalloc

# !HACK! NB dependencies need updating wrt cvrotgfx

# Think about:
# Borland C -- fastcall seems to give a much smaller .exe (oddly, not detectably faster though)
# Integrate these into a rule:
#  lynx -dump http://www.chaos.org.uk/survex/SVXDOCS.HTM > survex.doc
#  zip -l svxdoc.zip survex.doc   (-l converts to DOS CR/LF line endings)
#  gzip -p survex.doc > survex.doc.gz
# Want make depend... (UFLG = -MMD)

# This file requires GNU make (or a make with compatible ifdef/else/endif
# and ifndef/else/endif) for use as it stands.  If your make can't cope,
# you can use the supplied awk script to produce a makefile any make worthy
# of the name should cope with.

DOSEXEZIP=svx.zip

# Remove the # to build xcaverot when building for unix
X = xcaverot

## Extra flags for compiling for X Windows - may need adjusting.
## (the values given work for my Linux box)
# at start of command line
XFLG=-I/usr/include/X11 -L/usr/X11R6/lib
#XFLG = -I/usr/openwin/include
# at end of command line when linking
XLFLG = -lX11

## Define customising flags here (eg -DNO_MOUSE_SUPPORT, -DISO8859_1)
# at start of command line
UFLG = -DDEBUG_INVALID
# at end of command line when linking
ULFLG =
#ULFLG = C:Asylum.o.AsylumLib

############################################################################
# In an ideal world, you shouldn't need to change anything below here      #
# Let me know if you do - Olly                                             #
############################################################################

# There are a number of macros of the form NO_xxxx or HAVE_xxxx which allow
# for compilers or OS shortcomings.  Prefixes indicate:
#
#  * not really much use (eg not supported everywhere, or for debugging)
#  D option is ignored unless compiling for MS-DOS
#  - not currently used
#
# The current list is:
#
#    HAVE_DIFFTIME         - difftime() func, else just subtract times
#    HAVE_PERROR           - perror() available
#    HAVE_POPEN            - popen(), etc available
#    HAVE_SETJMP           - use setjmp
#    HAVE_SIGNAL           - compiler supports signals
#    HAVE_STRCASECMP       - strcasecmp() available
#    HAVE_STRERROR         - strerror() available
#    HAVE_STRFTIME         - strftime() available
#
#  * NO_CLIP               - turns off clipping in printps (debug)
#    NO_EXTENSIONS         - no filename extensions (output from survex)
#  *-NO_FGETPOS            - fgetpos()/fsetpos() not available
# D  NO_FLAT_DOS           - we've gotta fight DOS's idea of a memory map
#    NO_FUNC_PTRS          - don't use fn ptrs (only used by caverot)
#                            [use this if fn ptrs won't fit in a coord]
#    NO_MOUSE_SUPPORT      - no mouse library available (ignored for RISC OS)
#    NO_NICEHELLO          - turn off "Good afternoon" and big SURVEX
#    NO_PERCENTAGE         - permanently disable %age displays
# D -NO_STDPRN             - DOS compiler without stdprn
#    NO_TEX                - don't use TeX style accented chars in messages
#
# If you're porting, don't define any to start with, and define them as
# needed, using the compiler and linker errors for guidance.

# We expect .c and .h files to be in current directory
# OPTH and EPTH should be relative to there
# NB For dos_bc at least, OPTH and EPTH should be left unset

CC=cc
#CFLG=#        Flags for cc
O=.o#         Suffix for object files (may want .obj for MS-DOS)
#LFLG=#        Flags for end of cc when used to link
#OPTH=#        Prefix for object files
#E=#           Suffix or executables (eg .exe for MS-DOS)
#EPTH=#        Prefix for executables
OP=-o #       Borland C++ can't grok a space, most require it
REM=@true
STRIP=strip
PP=@true#     Postprocess command - used to be used for aout2exe with DJGPP v1
RM=rm -f
RSP=# Target(s) to make for any response files (or similar) needed
CLEAN=# extra things to delete for clean target (backup files, coredump files, etc)
#MACHDEP=# extra targets for "all" for this machine

# Generic UNIX + GCC version with non-ANSI libraries
ifdef gcc
CC=gcc
CFLG=-O2 -Wall
OP=-o ./# needed?
LFLG=-lm
CLEAN=core *~
endif

# Generic UNIX + GCC version with ANSI libraries
ifdef gcc_ansilib
CC=gcc
CFLG=-O2 -Wall -Ddifftime(A,B)=((B)-(A))
OP=-o ./# needed?
LFLG=-lm
CLEAN=core *~
endif

# Archimedes version (RISC OS + Norcroft ARM C)
ifdef arc
#LFLG=C:o.RISC_OSLib
LFLG=C:OSLib.o.OSLib
REM=@|
STRIP=@|
CROBJX=$(OPTH)armrot$(O)
CRLIB=
RM=rm -f# you'll need to find one...
ifdef debug
#also build printmd0 ?
CFLG=-IC: -throwback -fahp -fussy -UWORDS_BIGENDIAN -g
# need to add strcasecmp.o to objects list
PP=@|
UFLG=-DDEBUG_INVALID
else
CFLG=-IC: -throwback -ffahp -fussy -UWORDS_BIGENDIAN
# need to add strcasecmp.o to objects list
PP=squeeze
endif
endif

# Archimedes version (RISC OS + GCC)
ifdef arc_gcc
CC=gcc
CFLG=-IUnix: -Wall -UWORDS_BIGENDIAN
#LFLG=C:o.RISC_OSLib
LFLG=C:OSLib.o.OSLib
REM=@|
STRIP=@|
PP=squeeze
CROBJX=$(OPTH)armrot$(O)
CRLIB=
RM=rm -f# you'll need to find one...
endif

#if debug, don't strip and add -g to CFLG and LFLG

# DOS + Borland C++
# EPTH=..\ OPTH=obj
ifdef dos_bc
RSP=cflags.rsp svx.rsp cr.rsp crl.rsp pr.rsp
CC=bcc

# -1- => 8088/8086 instructions (should be default)
# -d => merge literal strings
# -f => emulate 8087 if need be (should be default)
# -wbbf -wbbf -weas -wpin -wamb -wamp -wasm -wdef -wnod -wstv -wuse -wcln -wsig -wucp
# -O1 -Ogmp v? l? 
# -X don't put auto-dependency info in objects
# think about :
# -w-ccc => turn off condition always true/false
# -p pascal calling convention ... need _cdecl in front of variable param...
# -pr fastcall calling convention

# debug flags:
# -N => add stack overflow checking to each procedure
# -v => debug info in .OBJs

CFLG=@cflags.rsp -d -Ogmpvl -X
OP=-o
SVXOBJ=@svx.rsp 
LFLG=
CROBJ=@cr.rsp
CROBJX=dosrot.obj
CRLIB=@crl.rsp
PROBJ=@pr.rsp
REM=rem
O=.obj
E=.exe
STRIP=rem
PP=rem
RM=del /q# need one which handles multiple objects (4DOS's does)
CLEAN=*.*~ *.bak
endif

# DOS + Microsoft C
ifdef dos_msc
echo /AL /F 1000 /DNO_MOUSE_SUPPORT /DMSC /UWORDS_BIGENDIAN > cflags.rsp
echo /link C:\MSVC\LIB\LLIBCE.LIB > lflags.rsp
$(MAKE) rsp
CC=cl
SVXOBJ=@svx.rsp
CFLG=@cflags.rsp
LFLG=@lflags.rsp
CROBJ=@cr.rsp
CROBJX=dosrot.obj
REM=@rem
O=.obj
E=.exe
STRIP=@rem
PP=@rem
RM=del /q# need one which handles multiple objects (4DOS's does)
CLEAN=*.*~ *.bak
endif

# This is common to dos_gcc and unix_djgpp
DJGPPCFLG=-O2 -Wall -UWORDS_BIGENDIAN

# DOS + DJGPP
ifdef dos_gcc
#CFLG=$(DJGPPCFLG) -I/djgpp/contrib/grx20/include
#CFLG=$(DJGPPCFLG) -I/djgpp/contrib/jlib/source -DJLIB
CFLG=$(DJGPPCFLG) -I/djgpp/contrib/allegro/source -DALLEGRO
CC=gcc
#djgppv2 can build .exes directly, but strip needs a coff file
#however, we can use -s in the link flags to strip the .exe
E=.exe
#E=.cof
LFLG=-s -lm
REM=@rem
#STRIP=strip
STRIP=@rem
#PP=coff2exe
PP=@rem
CROBJX=dosrot.o
#CRLIB=-lgrx20 -lpc
#CRLIB=-lj -lgrx20 -lpc
CRLIB=-lallegro -lpc
RM=del /q# need one which handles multiple objects (4DOS's does)
endif

# Unix hosted DJGPP cross compiler
ifdef unix_djgpp
CFLG=$(DJGPPCFLG)
CC=dos-gcc
E=.exe
LFLG=-s -lm
STRIP=@true
CROBJX=dosrot.o
CRLIB=-lj -lgrx20 -lpc
endif

# This one's for various testbed stuff & is only really useful to me - Olly
#ol :	all testerr doomday imgtest 3dtodxf
#	$(REM) Made $@

SVXOBJ1=$(OPTH)survex$(O) $(OPTH)error$(O) $(OPTH)listpos$(O)\
	$(OPTH)commands$(O) $(OPTH)commline$(O)
SVXOBJ2=$(OPTH)datain$(O) $(OPTH)defaults$(O) $(OPTH)network$(O)\
	$(OPTH)readval$(O) $(OPTH)matrix$(O)
SVXOBJ3=$(OPTH)img$(O) $(OPTH)osdepend$(O) $(OPTH)svxmacro$(O)\
	$(OPTH)netbits$(O) $(OPTH)useful$(O) $(OPTH)validate$(O)
PROBJ1 =$(OPTH)prindept$(O) $(OPTH)prio$(O) $(OPTH)error$(O)\
	$(OPTH)useful$(O) $(OPTH)img$(O) $(OPTH)osdepend$(O) $(OPTH)ini$(O)
PSOBJ  =$(OPTH)printps$(O)
DMOBJ  =$(OPTH)printdm$(O)
PCLOBJ =$(OPTH)printpcl$(O)
MD0OBJ =$(OPTH)printmd0$(O) $(OPTH)prbitmap$(O) $(OPTH)prindept$(O)\
	$(OPTH)error$(O) $(OPTH)useful$(O) $(OPTH)img$(O) $(OPTH)osdepend$(O)
HOBJ   =$(OPTH)prnthpgl$(O)
CROBJ1 =$(OPTH)caverot$(O) $(OPTH)cvrotimg$(O) $(OPTH)rotplot$(O)\
	$(OPTH)labels$(O) $(OPTH)cvrotgfx$(O)
CROBJ2 =$(OPTH)error$(O) $(OPTH)useful$(O) $(OPTH)img$(O) $(OPTH)osdepend$(O)
S2HOBJ =$(OPTH)svx2hto$(O) $(OPTH)hto$(O)
H2SOBJ =$(OPTH)hto2svx$(O) $(OPTH)hto$(O)
XOBJ   =$(OPTH)xcaverot$(O) $(OPTH)useful$(O) $(OPTH)error$(O)\
	$(OPTH)osdepend$(O) $(OPTH)img$(O) $(OPTH)cvrotimg$(O)
TESTOBJ=$(OPTH)testerr$(O) $(OPTH)error$(O) $(OPTH)useful$(O)\
	$(OPTH)osdepend$(O)

# dos_bc and dos_msc use response files for these object lists (set up above)
ifndef dos_bc
ifndef dos_msc
SVXOBJ =$(SVXOBJ1) $(SVXOBJ2) $(SVXOBJ3)
CROBJ  =$(CROBJ1) $(CROBJ2)
PROBJ  =$(PROBJ1)
endif
endif

# Note to myself - Stop putting brackets in the help message!

# for non-unix build caverot; for unix build xcaverot if set above
ifndef gcc
ifndef gcc_ansilib

X=caverot

# djgpp caverot needs more work
ifdef dos_gcc
X=caverot$(E)
endif
ifdef unix_djgpp
X=caverot$(E)
endif

endif
endif

# build caverot/xcaverot last...
all :	$(RSP) survex$(E) print htotrans diffpos$(E) extend$(E) $(X)
	$(REM) Made $@

#help :
#	@echo Try typing: make   followed by one of:
#	@echo  arc              Acorn Norcroft C + RISC OS
#	@echo  arc_gcc          RISC OS port of GCC - doesn't work yet
#	@echo  dos_bc           Borland C++ + MS-DOS - Borland make no good
#	@echo  dos_gcc          DOS + DJGPP - version 1.12 used
#	@echo  dos_msc          Microsoft C + MS-DOS
#	@echo  gcc              GCC + UNIX with non-ANSI libraries
#	@echo  gcc_ansilib      GCC + UNIX with ANSI libraries

print :	$(RSP) printps$(E) printdm$(E) printpcl$(E) prnthpgl$(E)
	$(REM) Made $@

survex$(E) : $(RSP) $(SVXOBJ1) $(SVXOBJ2) $(SVXOBJ3)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(SVXOBJ) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

printps$(E) : $(RSP) $(PSOBJ) $(PROBJ1)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(PSOBJ) $(PROBJ) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

printpcl$(E) : $(RSP) $(PCLOBJ) $(PROBJ1)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(PCLOBJ) $(PROBJ) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

printdm$(E) : $(RSP) $(DMOBJ) $(PROBJ1)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(DMOBJ) $(PROBJ) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

prnthpgl$(E) : $(RSP) $(HOBJ) $(PROBJ1)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(HOBJ) $(PROBJ) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

# print to archie mode 0 screen (for debugging without using reams of paper)
printmd0$(E) : $(RSP) $(MD0OBJ)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(MD0OBJ) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

xcaverot$(E) : $(RSP) $(XOBJ)
	$(CC) $(CFLG) $(UFLG) $(XFLG) $(OP)$@ $(XOBJ) $(XLFLG) $(LFLG) \
	$(ULFLG)
	$(STRIP) $@
	$(PP) $@

caverot$(E) : $(RSP) $(CROBJ1) $(CROBJ2) $(CROBJX)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(CROBJ) $(CROBJX) $(CRLIB) $(LFLG) \
	$(ULFLG)
	$(STRIP) $@
	$(PP) $@

# Bill Purvis' translators to and from HTO (Doug Dotson's xfer standard)
htotrans : $(RSP) $(EPTH)svx2hto$(E) $(EPTH)hto2svx$(E)
	$(REM) Made $@

$(EPTH)svx2hto$(E) : $(RSP) $(S2HOBJ)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(S2HOBJ) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

$(EPTH)hto2svx$(E) : $(RSP) $(H2SOBJ)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(H2SOBJ) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

diffpos$(E) : $(RSP) $(OPTH)diffpos$(O)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(OPTH)diffpos$(O) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

testerr$(E) : $(RSP) $(TESTOBJ)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(TESTOBJ) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

imgtest$(E) : $(RSP) $(OPTH)imgtest$(O) $(OPTH)imgalone$(O)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(OPTH)imgtest$(O) $(OPTH)imgalone$(O)\
	$(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

extend$(E) : $(RSP) $(OPTH)extend$(O) $(OPTH)error$(O) $(OPTH)useful$(O) $(OPTH)img$(O) $(OPTH)osdepend$(O)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(OPTH)extend$(O) $(OPTH)error$(O)\
	$(OPTH)useful$(O) $(OPTH)img$(O) $(OPTH)osdepend$(O) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

3dtodxf$(E) : $(RSP) $(OPTH)3dtodxf$(O) $(OPTH)imgalone$(O)
	$(CC) $(CFLG) $(UFLG) -DSTANDALONE $(OP)$@ $(OPTH)3dtodxf$(O) $(OPTH)imgalone$(O)\
	$(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

# special standalone version of img.c object file
imgalone$(O) : $(RSP) img.c
	$(CC) -c $(CFLG) $(UFLG) -DSTANDALONE $(OP)$(OPTH)imgalone$(O) img.c

doomday$(E) : $(RSP) $(OPTH)doomday$(O)
	$(CC) $(CFLG) $(UFLG) $(OP)$@ $(OPTH)doomday$(O) $(LFLG) $(ULFLG)
	$(STRIP) $@
	$(PP) $@

# All the response files depend on the Makefile, so that (a) they get rebuilt
# when the makefile is changed (not vital) and (b) they depend on something,
# so don't get built every time
svx.rsp : Makefile
	echo $(SVXOBJ1) > svx.rsp
	echo $(SVXOBJ2) >> svx.rsp
	echo $(SVXOBJ3) >> svx.rsp

cr.rsp : Makefile
	echo $(CROBJ1) > cr.rsp
	echo $(CROBJ2) >> cr.rsp

pr.rsp : Makefile
	echo $(PROBJ1) > pr.rsp

cflags.rsp : Makefile
	echo -ml -O1 -DFAR=far -DHuge=huge -DNO_FLATDOS -UWORDS_BIGENDIAN > cflags.rsp

crl.rsp : Makefile
	echo graphics.lib mouse.lib > crl.rsp

# Archimedes only -- ARM code for caverot
armrot$(O) : armrot.s
	objasm -ThrowBack -Stamp -quit -CloseExec -from s.armrot\
	-to o.armrot

# make a zipfile of all the sources and stuff for me to lug to work
arcsrczip :
	remove svx/zip
	zip svx/zip 3dtodxf.c caverot.c commands.c commline.c create.c cvrotimg.c datain.c
	zip svx/zip defaults.c diffpos.c doomday.c dosrot.c error.c examp.c extend.c
	zip svx/zip getopt.c hto.c hto2svx.c htoprt.c img.c ini.c initest.c labels.c
	zip svx/zip listpos.c lstobj.c matrix.c netbits.c network.c osdepend.c prbitmap.c
	zip svx/zip prindept.c printdm.c printmd0.c printpcl.c printps.c prio.c prnthpgl.c
	zip svx/zip readval.c rotplot.c survex.c svx2hto.c svxmacro.c useful.c validate.c
	zip svx/zip xcaverot.c
	zip svx/zip armrot.h caverot.h commands.h commline.h cvrotimg.h datain.h
	zip svx/zip debug.h defaults.h doomday.h dosrot.h error.h expire.h filelist.h getopt.h
	zip svx/zip hto.h img.h ini.h labels.h listpos.h matrix.h netbits.h network.h osalloc.h
	zip svx/zip osdepend.h ostypes.h out.h prbitmap.h prindept.h prio.h readval.h rotplot.h
	zip svx/zip survex.h tex.h useful.h validate.h version.h whichos.h xrot.h
	zip svx/zip Makefile messages pfont print/ini

SVXSRCDIR=survex
# assume GNU tar for now...
source_archive :
	$(RM) svxsrc.tar.gz
	mkdir -p tmp/$(SVXSRCDIR)
	rm -rf tmp/$(SVXSRCDIR)/*
	ln 3dtodxf.c caverot.c commands.c commline.c create.c cvrotimg.c\
	datain.c defaults.c diffpos.c dosrot.c error.c examp.c extend.c\
	getopt.c hto.c hto2svx.c htoprt.c img.c ini.c initest.c labels.c\
	listpos.c lstobj.c matrix.c netbits.c network.c osdepend.c prbitmap.c\
	prindept.c printdm.c printmd0.c printpcl.c printps.c prio.c prnthpgl.c\
	readval.c rotplot.c survex.c svx2hto.c svxmacro.c useful.c validate.c\
	xcaverot.c\
	armrot.h caverot.h commands.h commline.h cvrotimg.h\
	datain.h debug.h defaults.h doomday.h dosrot.h error.h expire.h\
	filelist.h getopt.h hto.h img.h ini.h labels.h listpos.h matrix.h\
	netbits.h network.h osalloc.h osdepend.h ostypes.h out.h prbitmap.h\
	prindept.h prio.h readval.h rotplot.h survex.h tex.h useful.h\
	validate.h version.h whichos.h xrot.h\
	Makefile messages.txt pfont print.ini\
	bcra3.svx bcra5.svx mk.awk\
	tmp/$(SVXSRCDIR)
	( cd tmp ; tar -zcf ../svxsrc.tar.gz $(SVXSRCDIR) ; cd .. )
	rm -rf tmp/$(SVXSRCDIR)/*

ifdef unix_djgpp
unix_djgpp_zip : all
	$(RM) svx.zip
	zip svx.zip\
	survex$(E) printps$(E) printpcl$(E) printdm$(E) prnthpgl$(E)\
	svx2hto$(E) hto2svx$(E) diffpos$(E) extend$(E) 3dtodxf$(E)\
	messages.txt pfont print.ini bcra3.svx bcra5.svx\
	cwsdpmi.exe emu387.dxe
	# emu387.dxe should actually be wmemu387.dxe renamed...
#	caverot$(E)
endif

dosexezip :
	remove $(DOSEXEZIP)
	zip $(DOSEXEZIP) *.exe
	zip $(DOSEXEZIP) messages.txt pfont print.ini
	zip $(DOSEXEZIP) *.bgi # for Borland
	zip $(DOSEXEZIP) emu387.dxe cwsdpmi.exe # for DJGPP

# Best if we assume $(RM) can only take one filename
# since vanilla DOS DEL is brain-dead that way and RISC OS remove is as bad
#	$(RM) $(OPTH)$(WILDOBJS)
# oh sod it, you'll have to find a halfway decent $(RM) -- it's not that hard
clean :
	$(RM) $(SVXOBJ1)
	$(RM) $(SVXOBJ2)
	$(RM) $(SVXOBJ3)
	$(RM) $(CROBJ1)
	$(RM) $(CROBJ2)
	$(RM) $(CROBJX)
	$(RM) $(RSP)
	$(RM) $(PROBJ1)
	$(RM) $(PSOBJ) $(DMOBJ) $(PCLOBJ) $(HOBJ)
	$(RM) $(MD0OBJ)
	$(RM) $(S2HOBJ) $(H2SOBJ)
	$(RM) $(XOBJ)
	$(RM) $(TESTOBJ)
	$(RM) imgtest$(O) imgalone$(O) extend$(O) diffpos$(O)
	$(RM) survex$(E)
	$(RM) printps$(E)
	$(RM) printpcl$(E)
	$(RM) printdm$(E)
	$(RM) prnthpgl$(E)
	$(RM) printmd0$(E)
	$(RM) xcaverot$(E)
	$(RM) caverot$(E)
	$(RM) svx2hto$(E)
	$(RM) hto2svx$(E)
	$(RM) diffpos$(E)
	$(RM) testerr$(E)
	$(RM) imgtest$(E)
	$(RM) extend$(E)
	$(RM) 3dtodxf$(E)
	$(RM) doomday$(E)
	$(RM) $(CLEAN)

# Rule for making *.o from *.c
.c$(O) :
	$(CC) -c $(CFLG) $(UFLG) $(OP)$(OPTH)$*$(O) $*.c

# dependencies

# NB dosrot.h and armrot.h
$(OPTH)caverot$(O): useful.h osalloc.h osdepend.h whichos.h ostypes.h error.h \
  version.h filelist.h caverot.h dosrot.h armrot.h \
  cvrotimg.h rotplot.h labels.h expire.h doomday.h
$(OPTH)commands$(O): survex.h useful.h osalloc.h osdepend.h whichos.h \
  ostypes.h error.h img.h netbits.h commands.h readval.h defaults.h datain.h \
  commline.h debug.h
$(OPTH)commline$(O): survex.h useful.h osalloc.h osdepend.h whichos.h \
  ostypes.h error.h img.h filelist.h datain.h commline.h
$(OPTH)cvrotimg$(O): useful.h osalloc.h osdepend.h whichos.h ostypes.h error.h \
  filelist.h img.h caverot.h dosrot.h armrot.h cvrotimg.h
$(OPTH)datain$(O): debug.h useful.h osalloc.h osdepend.h whichos.h ostypes.h \
  error.h survex.h img.h filelist.h netbits.h network.h readval.h datain.h \
  commands.h out.h
$(OPTH)defaults$(O): survex.h useful.h osalloc.h osdepend.h whichos.h \
  ostypes.h error.h img.h datain.h defaults.h
$(OPTH)doomday$(O): filelist.h whichos.h
$(OPTH)dosrot$(O): caverot.h whichos.h useful.h osalloc.h osdepend.h ostypes.h \
  error.h dosrot.h labels.h
$(OPTH)error$(O): whichos.h error.h useful.h osalloc.h osdepend.h ostypes.h \
  filelist.h debug.h version.h tex.h
$(OPTH)extend$(O): useful.h osalloc.h osdepend.h whichos.h ostypes.h error.h \
  filelist.h img.h
$(OPTH)img$(O): useful.h osalloc.h osdepend.h whichos.h ostypes.h error.h filelist.h \
  img.h
$(OPTH)labels$(O): error.h useful.h osalloc.h osdepend.h whichos.h ostypes.h \
  caverot.h dosrot.h armrot.h labels.h
$(OPTH)listpos$(O): survex.h useful.h osalloc.h osdepend.h whichos.h ostypes.h \
  error.h img.h filelist.h netbits.h listpos.h out.h
$(OPTH)matrix$(O): debug.h useful.h osalloc.h osdepend.h whichos.h ostypes.h \
  error.h survex.h img.h netbits.h matrix.h out.h
$(OPTH)netbits$(O): survex.h useful.h osalloc.h osdepend.h whichos.h ostypes.h \
  error.h img.h netbits.h
$(OPTH)network$(O): validate.h debug.h useful.h osalloc.h osdepend.h whichos.h \
  ostypes.h error.h survex.h img.h filelist.h netbits.h matrix.h network.h \
  readval.h out.h
$(OPTH)osdepend$(O): whichos.h useful.h osalloc.h osdepend.h ostypes.h error.h
$(OPTH)prbitmap$(O): useful.h error.h prbitmap.h
$(OPTH)prindept$(O): useful.h osalloc.h osdepend.h whichos.h ostypes.h error.h \
  version.h filelist.h img.h prindept.h debug.h expire.h doomday.h
$(OPTH)printdm$(O): useful.h osalloc.h osdepend.h whichos.h ostypes.h error.h \
  prio.h filelist.h debug.h prindept.h ini.h
$(OPTH)printmd0$(O): useful.h error.h prindept.h prbitmap.h
$(OPTH)printpcl$(O): printdm.c useful.h osalloc.h osdepend.h whichos.h \
  ostypes.h error.h prio.h filelist.h debug.h prindept.h ini.h
$(OPTH)printps$(O): useful.h osalloc.h osdepend.h whichos.h ostypes.h error.h \
  prio.h filelist.h debug.h prindept.h ini.h
$(OPTH)prio$(O): error.h useful.h osalloc.h osdepend.h whichos.h ostypes.h prio.h
$(OPTH)ini$(O): ini.h error.h useful.h osalloc.h osdepend.h whichos.h ostypes.h \
  debug.h
$(OPTH)prnthpgl$(O): printps.c useful.h osalloc.h osdepend.h whichos.h \
  ostypes.h error.h prio.h filelist.h debug.h prindept.h ini.h
$(OPTH)readval$(O): survex.h useful.h osalloc.h osdepend.h whichos.h ostypes.h \
  error.h img.h readval.h datain.h
$(OPTH)rotplot$(O): useful.h osalloc.h osdepend.h whichos.h ostypes.h error.h \
  caverot.h dosrot.h armrot.h rotplot.h
$(OPTH)survex$(O): debug.h useful.h osalloc.h osdepend.h whichos.h ostypes.h \
  error.h validate.h survex.h img.h version.h filelist.h netbits.h defaults.h \
  commline.h network.h listpos.h out.h expire.h doomday.h
$(OPTH)svxmacro$(O): survex.h useful.h osalloc.h osdepend.h whichos.h \
  ostypes.h error.h img.h
$(OPTH)testerr$(O): error.h
$(OPTH)useful$(O): useful.h osalloc.h osdepend.h whichos.h ostypes.h error.h
$(OPTH)validate$(O): survex.h useful.h osalloc.h osdepend.h whichos.h \
  ostypes.h error.h img.h netbits.h validate.h debug.h
$(OPTH)xcaverot$(O): useful.h img.h error.h

# Bill Purvis' Survex <-> HTO convertors
$(OPTH)hto$(O): hto.h
$(OPTH)hto2svx$(O): hto.h
$(OPTH)svx2hto$(O): hto.h

$(OPTH)imgtest$(O): img.h
$(OPTH)3dtodxf$(O): img.h
