<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V3.1//EN" [
<!ENTITY ollyemail "olly@survex.com">
<!ENTITY wookeyemail "wookey@survex.com">
<!ENTITY survexwebsite "http://www.survex.com/">
<!ENTITY djgppwebsite "http://www.delorie.com/djgpp/">
<!ENTITY unix "UNIX">
<!ENTITY msdos "DOS">
<!ENTITY riscos "RISC OS">
<!ENTITY survexsuite "<Application>Survex</Application>">
<!ENTITY cucc "<Acronym/CUCC/">
<!ENTITY dpmi "<Acronym/DPMI/">
<!ENTITY hto "<Acronym/HTO/">
]>
<!--
FIXME todo:
mark-up of Windows Windows NT etc?
section on "design philosophy"

level sump fudge:

*begin
*data cartesian from to dx dy dz
*sd dx dy 100 metres
*sd dz 0.001 metres
; upstream - downstream
nuiping.gowiththeflow.129 dachao.upstream.105 0 0 0 ; last number is drop in height across the sump
*end

``Quick start'' section - lead people through entering and processing
a sample survey.  Take examples from surveying books and real surveys.

3dtopos...

there's a new
utility - 3dtopos - which takes a .3d file and produces a .pos file

<Para>This file contains a list of all the station positions (ordered x,y,z
[East, North, Up]) with complete names.


the stations are sorted such that numbers occur in the correct order
(so ``2'' before ``10'').  3dtopos even sorts numbers with a prefix
and/or suffix, so you'd get:

040.sv8
040.sv8a
040.sv8b
040.sv8c
040.sv9
040.sv10
040.sv11
40_entrance_tag
40b_entrance_tag

The intention is to give the order you'd expect, so if you find examples
where this isn't the case, let me know.

</Sect3>

-->

<Article Status="draft" id=index>
 <ArtHeader>
  <Title>&survexsuite; 0.98 Documentation</Title>
  <AuthorGroup>
   <Author>
    <FirstName/Olly/
    <SurName/Betts/
    <AuthorBlurb><Para>
      Olly Betts wrote most of &survexsuite;.
    </Para></AuthorBlurb>
    <Affiliation>
     <Address><Email>&ollyemail;</Email></Address>
    </Affiliation>
   </Author>
   <Author>
    <SurName/Wookey/
    <AuthorBlurb><Para>
      Wookey is a small furry creature.
    </Para></AuthorBlurb>
    <Affiliation>
     <Address><Email>&wookeyemail;</Email></Address>
    </Affiliation>
   </Author>
  </AuthorGroup>
  <copyright>
   <year>1998-2001</year>
   <holder role="mailto:&ollyemail;">Olly Betts</holder>
  </copyright>
  <pubdate role="rcs">$Date: 2001-08-15 10:45:12 $</pubdate>
  <ReleaseInfo>$Id: svxdocs.sgml,v 1.39 2001-08-15 10:45:12 olly Exp $</ReleaseInfo>
  <Abstract>
   <Para>
    This is the manual for &survexsuite; - an open-source software package for
    cave surveyors.
   </Para>
  </Abstract>
 </ArtHeader>

<!--
This document also available for download in <a
href="http://www.survex.com/docs.html">various formats</a>.
-->

<Sect1><Title>Introduction</Title>

<Para>&survexsuite; is a multi-platform open-source cave surveying
package.  It currently runs on &unix;, Microsoft Windows 95/98/NT/2000/ME,
&msdos;, and Acorn &riscos; machines.  MS Windows 3.1 users can use the
&msdos; version, or may be able to run the MS Windows version with
Win32s installed (though we've not tried this).</Para>

<Para>Porting to other platforms should be fairly easy.  The graphics
code in caverot would be the most work - the rest only requires an ANSI C
compiler plus a few details about the format of filenames and the like.
If you are interested in support for any other machine contact us and we
will try to help.</Para>

<!-- with the windows installer, windows printer driver, and aven we
     do now have a GUI of sorts, so this next paragraph could be kinder
     on ourselves...
     FIXME
<Para>&survexsuite; has been designed to be a powerful and useful
survey-production tool. This focus on facilities and structure means that
less attention has so far been given to the user interface, so it does not
yet have nice menus, on-line help etc. - you will have to read the
instructions first! Version 2.0 will have windows and menus.</Para>
 -->

<Para>We are well aware that not everyone has access to super hardware
- often surveying projects are run on little or no budget and any
computers used are donated.  We aim to ensure that &survexsuite; is
feasible to use on low-spec machines, although you may not be able to
process vast cave systems, and some facilities may be
restricted. Please help us to achieve this by giving us some feedback
if you use &survexsuite; on a slow machine.</Para>

<Para>&survexsuite; is capable of processing extremely complex caves very
quickly and has a very effective, real-time cave viewer which allows
you to rotate, zoom, and drag the cave using mouse or keyboard. We
have tested it primarily on &cucc;'s Austria data, which has over
10,500 stations and 60km of underground survey data. This can all be
processed in a few seconds on a low-end <hardware>Pentium</hardware>
machine.</Para>

<Para>&survexsuite; is not yet finished.  Version 1.0 should be complete (in
some sense - development will continue), so you could regard
&survexsuite; 0.90 as roughly 90% there. But &survexsuite; is very usable in
its present state and is already used for several large projects, including
&cucc;'s Austria surveys, the Ogof Draenen survey, the Easegill resurvey
project, and the <Acronym/OFD/ survey.</Para>

<Para>We encourage feedback from users on important features or problems,
which will help to direct future development. Contact addresses are near the
bottom of this document.</Para>

<Para>Because &survexsuite; is still being actively developed, this document
has an unfortunate tendency to lag slightly behind the capabilities of the
software. The latest version is now available on the web at <ulink
url="&survexwebsite;">&survexwebsite;</ulink> - check there for latest info.
</Para>

<Sect2><Title>Other Documentation</Title>

<Para>
NEWS or NEWS.txt - this file contains a list of changes of interest to
&survexsuite; users, broken down by version number.  Consult this file
when upgrading to find out what has changed since the version you were
using previously.
</Para>

<Para>
BUGS or BUGS.txt - a list of known bugs.
</Para>

<Para>
TODO or TODO.txt - changes and enhancements that need doing.
</Para>

<Para>
ChangeLog or CHANGES.txt - this is a much more detailed list of changes,
aimed at developers rather than end users.
</Para>

<!-- FIXME: INSTALL no longer relevant and so no longer inclued on win32 thanks to installer -->
<Para>
INSTALL or INSTALL.txt - instructions for building and installing &survexsuite;.
</Para>

<!-- FIXME: any other text files? -->

</Sect2>

</Sect1>

<Sect1><Title>Getting Started</Title>
<?dbhtml filename="getstart.htm">

<Para>This section covers how to obtain the software, and how to unpack and
install it.</Para>

<Sect2><Title>Obtaining &survexsuite;</Title>

<Para>The latest version is available from the &survexsuite; website:
<ulink url="&survexwebsite;">&survexwebsite;</ulink>. If you do not
have internet access or would prefer to get a copy by post, we are
also happy to send out up-to-date copies on receipt of a formatted
floppy disk and a stamped, self-addressed envelope. See the end of this
document for addresses.</Para>

<Para>The details of installation depend greatly on what platform you
are using, so there is a separate section below for each platform.</Para>

<Sect3><Title>&unix;</Title>

<Para>
We supply a pre-compiled version for x86 Linux machines in RPM format
(suitable for Redhat, Mandrake, and some other distributions)
and dpkg format (suitable for Debian and Debian-derived distributions).
</Para>

<Para>For other &unix; versions you'll need to get the source code
and compile it on your system.  &survexsuite; uses GNU automake
and autoconf to streamline the compile process, so all you need to do
is unpack the sources, then simply type <command>./configure</command>
followed by <command>make</command> to build the programs and then
<command>make install</command> to install them.</Para>

<Para>
There's a GUI caverot replacement called aven, which needs wxWindows to
build, which in turn needs either Motif or Gtk+.  Alternatively
there's a more basic cave viewer called xcaverot which only needs the
standard X libraries.
</Para>

<!-- FIXME: recommend printps of Unix (or just Linux)??? -->

</Sect3>

<!-- FIXME: rather a long list now... -->
<Sect3><Title>Microsoft Windows 95/98/NT/2000/ME</Title>

<Para>
Unless you are using MS Windows 3.11 or earlier
we advise you use the native Win32
version which comes packaged with an installation wizard.  Just
run the downloaded package and let it lead you through the
installation process.
</Para>

<Para>
This version includes a GUI caverot replacement called aven, and a
Survex printer driver (printwin) which uses the Windows printer
system.
</Para>

<Para><!-- FIXME check up to date -->
The installer creates a Survex group in the start menu containing:
</Para>

<ItemizedList>

<ListItem><Para>Aven</Para></ListItem>

<ListItem><Para>Survex Help</Para></ListItem>

<ListItem><Para>Uninstall Survex</Para></ListItem>

</ItemizedList>

<Para>
Icons are installed for .svx and .3d files.  Double-clicking on a .svx
file process it to produce a .3d file.  Double-clicking the .3d file
views it in aven.  You can right click on the files to bring up a menu
of other possible actions.
</Para>

<!--
right click on svx:

open->notepad {default}
process->cavern

right click on 3d:

open->aven {default}
extend->extend
print->printwin
-->

<Para>
This version may also work under Windows 3.1 with
Win32s installed, but we've not tried this.  If you do let us know how
you get on.
</Para>
</Sect3>

<Sect3><Title>Windows 3.1 and &msdos; (Intel 80386 or newer CPU)</Title>

<Para>For Windows 3.1 we suggest using the &msdos; version (it may
also be possible to use the Win32 version if you have Win32s
installed).  This version is compiled with the free DJGPP C compiler
(<ulink url="&djgppwebsite;">&djgppwebsite;</ulink>) which uses &dpmi;
to access memory above &msdos;'s 640k. This means you will need a
&dpmi; server to use them. Windows has &dpmi; services built in, as do
QEMM and Novell DOS 7.  Otherwise you can use the free
<filename/cwsdpmi.exe/ we include - just make sure it's in the same
directory as the other executables and it will be used automatically
if it's needed.</Para>

</Sect3>

<Sect3><Title>&msdos; (Intel 80286 or earlier CPU)</Title>

<Para>We also supply a version suitable for use on pre-386 machines. You
might wonder why - the reason is that many surveying projects have little
or no budget and can acquire such machines for free. This version is
suitable for caves up to medium size - a few thousand stations - which
typically equates to a few kilometres of survey.  A very loopy cave may
need more memory.
</Para>

<Para>This version is compiled with <Application/Borland C++/.  As a
result, if you wish to stop one of them in the middle of running, use
<keycap/Ctrl-Break/. <keycap/Ctrl-C/ will also work in many situations
but <keycap/Ctrl-Break/ is more reliable.</Para>

</Sect3>

<Sect3><Title>&riscos;</Title>

<Para>
&survexsuite; for &riscos; comes in a zip archive.  Installation is
just a matter of opening the archive with !SparkPlug, !SparkFS or
similar and dragging the contents to where you want them installed.
This version should run on any RISC OS machine, though hasn't been tested
on RISC OS 2 recently.
</Para>

</Sect3>

</Sect2>

<Sect2><Title>Terminology</Title>

<Para>Throughout this document we use British terminology for
surveying. A 'Station' is a point in the cave that you survey from or
to. A 'Leg' is the line joining two stations. A 'Survey' is a group of
legs surveyed together on one trip.</Para>

<Para>Nodes: These are similar to stations. We talk about nodes to
describe the interconnectedness of the survey. A 1-node is a station
with only 1 leg joining it - i.e. The end of a passage or survey. A
2-node is a typical station along a passage with a survey leg coming
into it, and one going out.  A 3-node is a station with three legs
joining it, e.g. at a T-junction. And so on.</Para>

</Sect2>

</Sect1>

<Sect1><Title>Using &survexsuite;</Title>
<?dbhtml filename="using.htm">

<!--
<Para>A complete specification of the &survexsuite; program commands is in
the commands appendix. This will tell you exactly what &survexsuite; can and
cannot do, however it is not easy to get an overall view of how to use the
program from that so below are general comments on the basic concepts of
&survexsuite; and typical ways of using the program.</Para>
-->

<!-- FIXME: this is no longer true on RISC OS or Windows... -->
<Para>&survexsuite; is, currently, used almost completely from the
command line. There are three main sections:
</Para>

<ItemizedList>

<ListItem><Para>cavern: is the central data processing part of the
suite.  It turns survey data into coordinates (in <filename/.3d/
files), as well as generating other useful info in other files.
</Para></ListItem>

<ListItem><Para>caverot: cave viewer for visualising <filename/.3d/ files.
</Para></ListItem>

<ListItem><Para>printdm, printpcl, printps, prnthpgl, printwin: print processed
data to scale.  printwin is only available on Microsoft Windows and uses the Windows printer
driver systems - this is the recommended way to print on Windows.
</Para></ListItem>

</ItemizedList>

<Para>The best way to use the program suite is to use some sort of
shell to automatically run cavern if you click on a <filename/.svx/
file, and start caverot or an appropriate printXXX if you click on a
<filename/.3d/ file.  This reduces the typing significantly.  Under
Windows and RISC OS suitable file associations are set up for you
automatically when you install.
</Para>

<Para>Also supplied are a few useful utilities:</Para>

<ItemizedList>

<ListItem><Para> diffpos: compares the positions of stations in two
<filename/.3d/ files.
It will tell you about stations which are in one file but not the other, and
you can specify a tolerance by which each station's position is allowed
to vary.  For backward compatibility it will also read the
<filename>.pos</filename> files produced by earlier versions of cavern.
</Para></ListItem>

<ListItem><Para> extend: simplistic Extended Elevation processor. It
takes a <filename/.3d/ file and squashes it flat. It starts with the
highest deadend station in the survey (or the highest station if there
are no deadends) which is put on the left, then folds each leg out
individually to the right, breaking loops arbitrarily (usually at
junctions). This suffices for simple caves, and sections of cave. Some
more control will be added in due course.  </Para></ListItem>

<ListItem><Para> hto2svx and svx2hto: translate
<filename/.svx/ files to and from Doug
Dotson's &hto; format for survey data transfer.  Bill Purvis wrote these
using Doug Dotson's &hto; library routines. They are now somewhat out of
date and may not work too well. &hto; never really took off but we
include these in case they are of use to someone.  </Para></ListItem>

</ItemizedList>

</Sect1>

<!-- FIXME: Installation -->

<!-- FIXME: Configuration -->

<Sect1><Title>Environment variables</Title>
<?dbhtml filename="envvars.htm">

<!-- FIXME: bad style -->

<Sect2><Title>Language: SURVEXLANG</Title>

<Para>The language used for messages in &survexsuite; can be specified using
the <systemitem>SURVEXLANG</systemitem> environment variable. If this is not
set, then the <systemitem>LANG</systemitem> environment variable is checked.
The default language is International English.</Para>

<Para>The codes used are those specified in ISO639 - those currently
supported are:</Para>

<informaltable frame="all"><!--<title/Language Codes/-->
<tgroup cols="2">
<thead>
<row><entry/Code/<entry/Language/</row>
</thead>
<tbody>
<row><entry/en/<entry/International English/</row>
<row><entry/en-us/<entry/US English/</row>
<row><entry/it/<entry/Italian/</row>
<row><entry/fr/<entry/French/</row>
<row><entry/de/<entry/German/</row>
<row><entry/pt/<entry/Portuguese/</row>
<row><entry/es/<entry/Spanish/</row>
<row><entry/ca/<entry/Catalan/</row>
</tbody>
</tgroup>
</informaltable>

<Para>Here are examples of how to specify this environment variable:</Para>

<VariableList>
 <VarListEntry><Term>&msdos;</Term>
   <ListItem><Para>Put <SystemItem>SET SURVEXLANG=fr</SystemItem> in your
<filename>AUTOEXEC.BAT</filename> script to get French messages.</Para></ListItem>
 </VarListEntry>
 <!-- FIXME: windows? -->
 <VarListEntry><Term>&unix; - csh/tcsh</Term>
   <ListItem><Para><SystemItem>setenv SURVEXLANG fr</SystemItem></Para></ListItem>
 </VarListEntry>
 <VarListEntry><Term>&unix; - sh/bash</Term>
   <ListItem><Para><SystemItem>SURVEXLANG=fr ; export SURVEXLANG</SystemItem></Para></ListItem>
 </VarListEntry>
 <VarListEntry><Term>&riscos;</Term>
   <ListItem><Para>Edit the <SystemItem>Set SURVEXLANG ...</SystemItem>
line in <filename>!Survex.!Run</filename> and 
change the value to the code for the language you want.</Para></ListItem>
 </VarListEntry>
</VariableList>

</Sect2>
<!-- FIXME: more translations? OS messages and startup may still be in
English -->
<Sect2><Title>Support File Directory: SURVEXHOME</Title>

<Para>&survexsuite; needs various support files.  Under some
operating systems (notably &unix;) the path to the support files needs
to be built into the programs, but this causes a problem if the
support files need to be installed elsewhere for some reason and the
programs can't be rebuilt. To get around this problem, you can
define an environmental variable <SystemItem/SURVEXHOME/ to point to a
directory in which to look for support files.
</Para>

<Para>This mechanism is sometimes useful on other operating
systems.</Para>

<Para>E.g. for &msdos;, put <SystemItem>SET SURVEXHOME=C:\SURVEX</SystemItem> in
your AUTOEXEC.BAT file
</Para>

<Para>
The &riscos; version comes with a simple Wimp front-end.  Setting
SURVEXHOME yourself should never be required.
<!--
For &riscos; put <SystemItem>*Set SURVEXHOME
ADFS::4.$.&survexsuite;.!Survex</SystemItem> into your Boot <filename/!Run/
or <filename/!DeskTop/ (assuming <filename>ADFS::4.$.Survex.!Survex</filename>
contains the &survexsuite; executables).
If you ensure that !Survex is seen by the filer with a line like
<SystemItem>Filer_Boot ADFS::4.$.Survex.!Survex</SystemItem> then the above
should not be necessary.
-->
</Para>

<Para>Under unix, use "setenv SURVEXHOME /home/user/survex-0.96" (csh)
or "export SURVEXHOME; SURVEXHOME=/home/user/survex-0.96" (sh).  This
is essential when installing a prebuilt survex in other than the
default location; entirely likely when you're not installing it with
root privileges.  If you're building survex yourself, you be more
sensible to configure survex with "./configure
--prefix=/home/user/survex".
</Para>

</Sect2>

</Sect1>

<Sect1><Title>Survex Command Line Conventions</Title>
<?dbhtml filename="cmdline.htm">

<!-- FIXME: bad style -->

<Sect2><Title>Command Line Options</Title>

<Para>All &survexsuite; programs respond to the following command line options:
</Para>

<VariableList>

<VarListEntry><Term>--help</Term><listitem><Para>
display this help and exit
</Para></listitem></VarListEntry>

<VarListEntry><Term>--version</Term><listitem><Para>
output version information and exit
</Para></listitem></VarListEntry>

</VariableList>

<Para>Note that command line options are case sensitive, so "-B" and "-b"
are different (this didn't used to be the case before Survex 0.90).  Case
sensitivity doubles the number of available short options (and is also the
norm on &unix;).  &msdos; doesn't have a firm convention - some programs
treat options as case sensitive while others don't.
</Para>
</Sect2>

<Sect2><Title>Searching for data files</Title>

<Para>A file specified on the command line of any of the &survexsuite; suite
of programs will be looked for as specified.  If it is not found, then the
program will try adding the default extension (if appropriate) and try
again.  Under Unix, data files will also be searched for both as
specified and as an all-lower-case filename.
</Para>

</Sect2>

</Sect1>

<Sect1><Title>Cavern</Title>
<?dbhtml filename="cavern.htm">

<Para>Cavern is the data processing engine of the suite.
</Para>

<Para>Syntax for simple use: <command/cavern &lt;survey data file&gt;/
</Para>

<Para>Cavern reads in text files containing the survey data
(<filename/.svx/) and outputs four data files, with the following
extensions, further explained below: <filename/.3d/,
<filename/.err/ and <filename/.inf/</Para>

<Sect2><Title>Cavern Output</Title>

<Para>When you run cavern, three output files are created.  By default these
are output to the current directory, 
with the same base
filename as the first <filename/.svx/ file read (but a different
extension).
You can change the directory and/or base filename using the --output switch.
<!-- FIXME: link --> 
</Para>

<Para>E.g. if you process the data file <filename>entrance.svx</filename>
with the command <command>cavern entrance</command> then three files will be
created: <filename>entrance.3d</filename>,
<filename>entrance.err</filename>, and <filename>entrance.inf</filename>.
</Para>

<Para>Cavern also gives a range of statistics at the end of a run
these are the same as the info in the <filename/.inf/ file:</Para>

<itemizedlist>
<listitem><para>the highest and lowest points and the height difference
between them
</para></listitem>

<listitem><para>the total length of the survey (before and after adjustment)
</para></listitem>

<listitem><para>the number of legs and stations
</para></listitem>

<listitem><para>the East-West and North-South extents
</para></listitem>

<listitem><para>the number of each size of node in the network (where size
is number of connections to a station) i.e. a one node is the end of a
dead-end traverse, a two-node is a typical station with a leg going
out either side, a three-node is a T-junction etc
</para></listitem>

<listitem><para>how long the processing took and how much CPU time was used
</para></listitem>
</itemizedlist>

<Sect3><Title><filename/.3d/ - data describing the loop-closed centre line</Title>

<Para>This file contains details of the stations and legs, and any
flags associated with them.
</Para>

</Sect3>

<Sect3><Title><filename/.err/ - loop closure statistics (%age errors, etc)</Title>

<Para>This file contains statistics about each traverse in the survey
including the percentage error in each leg when it is part of a loop. You
should study this information to determine if any parts of the survey are of
lower quality or contain gross errors.</Para>

</Sect3>

<Sect3><Title><filename/.inf/ - information on the cave (depth, total length of survey legs, etc)
</Title>

<Para>This file contains the statistics printed at the end of each survey
run.</Para>

</Sect3>

</Sect2>

<Sect2><Title>Cavern Command line Syntax</Title>

<cmdsynopsis>
    <command>cavern</command>
    <arg rep="repeat">options</arg>
    <arg rep="repeat">survex data file</arg>
</cmdsynopsis>

<!-- FIXME: brackets implied around each file -->

<Para>If the operating system supports filenames with spaces, you can use
them but you'll need to enclose them in quotes like so: <command>cavern
"Spider Cave"</command></Para>

<!--
<Para>The command line is processed from left to right.
</Para>

<Sect3><Title>Brackets ( ... )</Title>

<Para>These allow the user to control the passing of settings from one
survey file to another. A '(' stores the current settings, which are then
restored by the corresponding ')'. This means that surrounding a filename by
brackets stops any settings (*SD values, *DATA styles, Calibration settings
etc.) changed from 'leaking' out. This also allows you to use your own
default settings file, like so:
</Para>

<Para>cavern Defaults ( SomeCave ) ( NewBit )
</Para>

<Para>A warning is given if you do not close as many brackets as you
open, or if you attempt to close brackets that you have not opened.
</Para>

-->

<Sect3><Title>Cavern Options</Title>

<Para>
Options have two forms: short (a dash followed by a single letter e.g.
<command/cavern -p/) and long (two dashes followed by one or more words e.g.
<command/cavern --percentage/).  The long form is generally easier to
remember, while the short form is quicker to type.  Options are often
available in both forms.
</Para>

<Sect4><Title><command/cavern --percentage//<command/cavern -p/ : Display percentage progress</Title>

<Para>You can get cavern to display the percentage progress through the
current file.  As of &survexsuite; 0.90 this is disabled by default, but you
can enable it if you want.  Because the value given is for the
<emphasis/current/ file, the values jump around for a multi-file survey
project. Also note that displaying this information slows down processing
a little.
<!-- FIXME: on a slow machine you'd probably rather it ran faster, and on a
fast machine you can't follow the change percentages.-->
</Para>

</Sect4>

</Sect3>

</Sect2>

</Sect1>

<!-- FIXME: gcc format error messages -->

<Sect1><Title>Caverot</Title>
<?dbhtml filename="caverot.htm">

<Para>Caverot reads the <filename/.3d/ image files and displays the
results on screen, letting you control the view to understand the
cave.  Aven is a GUI caverot replacement which works in a very similar
way with almost indentical mouse and key controls.</Para>

<Sect2><Title>Syntax</Title>

<Para>Basic syntax is:
</Para>

<!-- FIXME: change to use GNU getopt -->

<cmdsynopsis>
    <command>caverot</command>
    <arg rep="repeat">3d image file</arg>
</cmdsynopsis>

<Para>More exactly, when specifying colours for the files read in it is:
</Para>

<cmdsynopsis>
    <command>caverot</command>
    <arg>-c&lt;col1&gt;,&lt;col2&gt;,...,&lt;coln&gt;</arg>
    <arg>&lt;file1&gt;.3d &lt;file2&gt;.3d ... &lt;filen&gt;.3d</arg>
</cmdsynopsis>

<Para>The &msdos; version of caverot supports a wide range of graphics
cards. If the hardware allows it, two copies of the screen are used,
and one is drawn on while the other is displayed, to give smoother
animation.  However, with some video cards it is not possible, so you
get a flashing during movement since you can see the screen being
redrawn.  This may get fixed for some more video cards in a future
release.
</Para>

<Para>The &riscos; version will pick the highest resolution screen mode
that it can use two copies of the screen in, and that will work
on the monitor in use. It will also use three bank animation for
a more flicker-free display if there is enough RAM.
</Para>

<Para>CAVEROT reads in the data and then displays the control
keys/mouse buttons.  Hitting a key gives the default view. This is a
plan scaled to fit on the screen, with no labels or station
crosses. The view can be moved, rotated, zoomed, tilted, or set
spinning.  This should be fast enough to be almost instant with all
but big caves on slow hardware. Pressing <keycap/H/ at any point will
give you the help again.  <keycap/Escape/ exits the program.
</Para>

</Sect2>

<Sect2><Title>Colours and multiple data files</Title>

<Para>Caverot can read in multiple data files and display them in separate
colours.
</Para>

<Para>The syntax is given above. E.g. <command/caverot -c2,6 cave.3d
surface.3d/ would display <filename/cave.3d/ in colour 2 and
<filename/surface.3d/ in colour 6. You do not have to give colours, in which
case it will just use some random ones and probably look horrible.</Para>

<Para>Colour values range between 0 (black) and 255 (probably white). You
will have to experiment to find which ones are which. There is a limit of
about 15 colour values at present - more are silently ignored, and whatever
value happens to be in memory off the end of the array is used for the
colour if you give more than 15 <filename/.3d/ files.
</Para>

<Para>Note that there is no perspective in the view. This means that
it is impossible to tell which way round a cave is rotating, or
whether you are viewing something from behind, or in front. So
if you think the direction of rotation in wrong, or changes as
you watch, this is just your brain being confused, not a bug!
</Para>

</Sect2>

<Sect2><Title>Mouse control</Title>

<Para>The best way to move the cave is with the mouse. If you hold
down the right button then the cave is dragged when you move the
mouse. If you hold down the left button, then the cave is rotated if
you move left or right, and zoomed if you move up and down. By default
the mouse moves the cave, but if you press <keycap/Ctrl-R/, then the
mouse will move the viewpoint instead (i.e. everything will go in the
opposite direction. Some people prefer it this way round). If your
mouse has a middle button (and it is recognised by your mouse driver)
then you can use it to tilt the cave.
</Para>

<Para>Changing from plan to elevation is now animated (if your machine is
fast enough) to help you see where you are and how things relate.
</Para>

</Sect2>

<Sect2><Title>Keyboard Control</Title>

<Para><keycap/P/ and <keycap/L/ select Plan and eLevation
respectively. Comma <keycap/,/, and Slash <keycap>/</keycap> tilt up
and down respectively. Tilt goes 180 degrees from plan to upside
down. Enter starts the cave spinning, and <keycap/Space/ stops it. The
speed of rotation for this, and tilt, is controlled by <keycap/Z/ and
<keycap/X/.
</Para>

<Para>Crosses and/or labels can be displayed at survey stations.
<keycap/Ctrl-X/ toggles crosses and <keycap/Ctrl-N/ station names.
<keycap/Ctrl-L/ toggles the display of survey legs.
</Para>

<para>By default, labels and indicators are not redrawn during
movement, to improve responsiveness.  With a small cave, or a fast
computer, you can enable redraw of everything during movement with
<keycap/Ctrl-A/.  <keycap/Ctrl-O/ toggles whether all names are
displayed, or only non-overlapping ones.
</para>

<para><keycap/Delete/ is useful if you get lost - it resets the scale,
position, and rotation speed, so that the cave returns to the centre
of the screen. There are also keyboard controls to use instead of the
mouse - <keycap/Shift/ helps here as it accelerates all movements:
</para>

<screen>
<keycap/Z/, <keycap/X/ : Faster Slower Rotation
<keycap/R/: Reverse direction of rotation
<keycap/Enter/, <keycap/Space/: Start and stop rotation
<keycap/C/, <keycap/V/: Rotate cave one step clockwise/anti-clockwise
<keycap/'/ , <keycap>/</keycap>: Higher/Lower Viewpoint
<keycap/]/ , <keycap/[/: Zoom in/Out
<keycap/U/, <keycap/D/: View Up/Down
<keycap/N/, <keycap/S/, <keycap/E/, <keycap/W/: View North, South, East, West
<keycap/Delete/: Reset to default scale, rotation rate etc
<keycap/P/, <keycap/L/: Plan, Elevation
<keycap/Cursor Left/, <keycap/Cursor Right/: Cave Left/Right (on screen)
<keycap/Cursor Up/, <keycap/Cursor Down/: Cave Up/Down (on screen)
<keycap/Ctrl-N/: Toggle display of station Names
<keycap/Ctrl-X/: Toggle display of crosses (Xs) at stations
<keycap/Ctrl-L/: Toggle display of survey Legs
<keycap/Ctrl-A/: Toggle display of All/skeleton when moving
<keycap/O/: Toggle display of non-overlapping/all names
<keycap/Ctrl-R/: reverse sense of controls
<keycap/Escape/: quit program
<keycap/Shift/: accelerates all movement keys
<keycap/H/:  help screen giving these controls
</screen>

<Para>A little experimentation should give a better understanding of how
this works.
</Para>

<Para>There is an auto-resizing scale bar on the left side of the screen.
This varies in length as you zoom in or out.  The current length is given
just below the bearing. In the top left corner the current direction of view
(for elevations), or direction of the top of the screen (for plans) is
displayed. In the top right is a compass pointer, and in the bottom right is
an angle of tilt pointer.
</Para>

<Para>Note that Extended Elevations (which are always totally flat
east-west) are noticed by caverot, and it will prevent their being
rotated, as this is meaningless.
</Para>

</Sect2>

</Sect1>

<Sect1><Title>Printer Drivers</Title>
<?dbhtml filename="printer.htm">

<Para>These read <filename/.3d/ files and print out the results on
various sorts of printer/plotter.</Para>

<Sect2><Title>Commands</Title>

<Para>PRINTDM for 8, 9, and 24 pin Epson-compatible dot-matrix
printers.  You need to edit the <filename/print.ini/ file to specify
which you are using. The 9 pin dump is about 10% faster than the 8
pin, but some old printers will not support it.  PRINTDM should also
work with IBM ProPrinters.
</Para>

<Para>PRINTPCL for printers that use Hewlett Packard's <Acronym/PCL/
(Printer Control Language), which means Deskjets, Laserjets (i.e. most
Inkjets and Laser printers). </Para>

<Para>PRINTPS for Postscript printers and plotters.
</Para>

<Para>PRNTHPGL for HPGL plotters.
</Para>

<Para>These all use the configuration file <filename/print.ini/, which
sets various features for each printer. See 'Printer Settings'
below. Even if your printer is not standard you should be able get it
to work by editing these files.
</Para>

<!-- FIXME: allow scaling for all drivers? add - - test-page option? -->

<Para>To get plots that are properly to scale from PRINTDM you
<emphasis/must/ measure the output from <emphasis/your/ printer, and
update <filename/print.ini/ with your numbers.
</Para>

</Sect2>

<Sect2><Title>IMPORTANT NOTE FOR &msdos; USERS</Title>

<caution>
<Para>printdm, printpcl and prnthpgl all produce binary files.  If
output from these is sent to a file, the file
<emphasis>must</emphasis> then be sent to the printer with
<command>COPY /B OUTPUT PRN</command> where OUTPUT is the filename and
PRN the device name.  Do <emphasis>not</emphasis> use COPY without the
/B.  If you do, the output may be corrupted. Sorry, this is a problem
with &msdos;, and there is nothing we can do about it.</Para>
</caution>

<Para>If you send output straight to the printer, by putting <filename/PRN/
or <filename/LPT1/ in the configuration file, then this problem should not
occur.</Para>

<Para>printps produces text files as output, and so should be unaffected by
this.
</Para>

</Sect2>

<Sect2><Title>Syntax</Title>

<Para>The syntax of the commands is the same in each case. The command line
options are:
</Para>

<variablelist>
<varlistentry><term>-e, --elevation</term>
<listitem><para>select elevation</para></listitem></varlistentry>

<varlistentry><term>-p, --plan</term>
<listitem><para>select plan view</para></listitem></varlistentry>

<varlistentry><term>-b, --bearing=BEARING</term>
<listitem><para>set bearing</para></listitem></varlistentry>

<varlistentry><term>-t, --tilt=TILT</term>
<listitem><para>set tilt</para></listitem></varlistentry>

<varlistentry><term>-s, --scale=SCALE</term>
<listitem><para>set scale</para></listitem></varlistentry>

<varlistentry><term>-n, --station-names</term>
<listitem><para>display station names</para></listitem></varlistentry>

<varlistentry><term>-c, --crosses</term>
<listitem><para>display crosses at stations</para></listitem></varlistentry>

<varlistentry><term>-B, --no-border</term>
<listitem><para>turn off page border.
Without this option dotted borders will be drawn on the
sides where pages join. This is to facilitate accurate cutting with
scissors.
</para></listitem></varlistentry>

<varlistentry><term>-l, --no-legs</term>
<listitem><para>turn off display of survey legs</para></listitem></varlistentry>

<varlistentry><term>-k, --skip-blanks</term>
<listitem><para>don't output blank pages
(only works for printdm and printpcl at present). <!-- FIXME: really? -->
With this option pages which are blank (apart from the alignment marks)
will not be printed.
</para></listitem></varlistentry>

</variablelist>

<!-- FIXME why is this here? - hmm perhaps there should be a switch to
 overide where the output goes? -->

<Para>Under &unix; output may be piped into another command like so:</Para>

<programlisting>
output=| lpr -Poak
; send output to printer 'oak'</programlisting>

</Sect2>

<Sect2><Title>Using the Drivers</Title>

<Para>When you run the printer driver you will be asked if you want a
plan or elevation (enter <keycap/P/, or <keycap/E/) - the default is
plan. Then enter values for the desired plot view. These values
correspond to those displayed in the top left hand corner when using
caverot. You would usually use CAVEROT to pick the best view and then
note the angles before running the Printer Driver. This will
eventually be integrated.
</Para>

<Para>For a plan enter bearing up the page, in degrees, 0 indicating North
at the top of the page (the default). For an elevation enter the angle of
view (i.e. the compass bearing from which the scene is viewed), and angle of
tilt, where 0 is horizontal, + is looking from above, and - is looking from
below, so +90 is the same as plan view.
</Para>

<Para>Then you have to fill in the required scale. You are told how many
pages this will take (and the arrangement of those pages (e.g. 6 pages
(2x3)) and have the opportunity to print, quit or change the scale. Repeat
this process until you have a number of pages or scale you are happy with.
</Para>

<Para>You can then print all the pages, a range of pages, or any arbitrary
list of pages and ranges (handy for when your printer mangles a page).
</Para>

</Sect2>

<Sect2><Title>Printer Settings</Title>

<Para>The format of the <filename/print.ini/ file is similar to
Windows <filename/.ini/ files.  There is a section name in square
brackets, e.g.:
</Para>

<programlisting>[generic_PCL]</programlisting>

<Para>and there are some options and settings below that of the form
</Para>

<Para>&lt;option&gt;=&lt;setting&gt;
</Para>

<Para>e.g.:</Para>

<programlisting>pixels_across_page=960</programlisting>

<Para>below each of this options is usually a comment (indicated by a
semicolon ';') saying what the option above is for. The codes needed by dot
matrix printers are given as they are usually shown in manuals. The
backslash '\' indicating that the following character is to be interpreted
as a control code so \[ means send the value 27 decimal which is 1B hex,
also called 'ESC' for Escape. If the backslash is followed by a small x and
two hex digits - e.g \x0c, then that means send the code 0C hex, which is 12
decimal, also called LF for LineFeed. We realise this is a bit cryptic, but
then printer codes are intrinsically pretty cryptic, so there is not much we
can do about it. The provided set-ups will work with nearly all dot matrix
printers, so you should not have to fiddle with these runes.
</Para>

<Para>The only thing most users will have to specify is the output
device (and Calibration for Dot Matrix Printers, see 'Printer
Calibration'). This is the setting given in the [base] section of the
form output=&lt;device&gt;, where device can be a device name
(e.g. PRN, LPT1, LPT2 under &msdos;, <filename/Printer:/ under
&riscos;) or a filename. Any name given which is not recognised as a
device will generate a file of that name, containing the exact data
that would be sent to the printer. This can then be send to a printer
later (See the note above from &msdos; users).
</Para>

<Para>Each type of printer has its own section. The basic types provides
are:
</Para>

<Para>[DM] (for Dot Matrix, PRINTDM).[HPGL] (for HPGL plotters, PRNTHPGL),
[PCL] (for PCL printers PRINTPCL), and [PS] (for Postscript printers), and
for each of these types at least one specific example is provided, for the
specified printer and paper size.
</Para>

<Para>The examples provided are: [dm_8pin_a4] [dm_8pin_11inch],
[dm_8pin_12inch], [dm_9pin_11inch], [dm_9pin_12inch], [dm_24pin_a4],
[dm_24pin_11inch], [dm_24pin_12inch], [dm_panasonic_24pin],
[dm_epsonlx86_9pin_11inch]
</Para>

<Para>[hpgl_generic_a4landscape], [hpgl_generic_A1landscape],
[hpgl_generic_A0landscape]
</Para>

<Para>[pcl_generic_a4], [pcl_modern_a4]
</Para>

<Para>[ps_generic_a4]
</Para>

<Para>The idea is that your printer can be defined in terms of an existing
one, using the 'like' option. This makes the settings for the specified
printer include the settings specified in the 'like' section, except where
they are overridden by new settings in this section. The syntax is
Like=&lt;definition name&gt;, where definition name must have been
previously defined in the file.
</Para>

<Para>Here is an example of how it works:
</Para>

<programlisting>
[dm_9pin_12inch]
Like=dm_11inch_9pin
Lines_down_page=108</programlisting>

<Para>So this means that the definition 'dm_9pin_12inch', i.e. 9pin dot
matrix printer using 12 inch paper, is just like the 11 inch definition for
the same printer, except for the number of lines down a page.
</Para>

<Para>If you find that your printout does not come out correctly, then the
best way to make changes for your printer is to create a new section called
[my_printer], and start with a like=something where something is the closest
section to your printer. Then add new options to override the ones that are
not correct for your printer. Finally you need to change the section for the
type of printer you are using to point to your new definition. E.g. if you
are using a dot-matrix printer then you need to change the [DM] section to
say like=my_printer .
</Para>

<Para>Note that if you are using a PCL printer the defaults are set
not to use advanced printer features for compatibility. If you want to
try these (equivalent to HP laserjet III or later), then you should
change the [PCL] section to say like=modern_pcl_a4 . This will enable
horizontal and vertical tabbing.
</Para>

<Para>Further information on printer compatibility is in the PRNHELP(.TXT)
file.
</Para>

</Sect2>

<Sect2><Title>Printer Calibration</Title>

<Para>Dot Matrix printers do not print to an accurate size - you need
to do a test plot to calibrate your printer in order to get
correctly-scaled plots. <filename/test.svx/ is supplied for this
purpose. It prints a 10cm cross and border. Measure the border, and
fill the results into the mm_across_page, and mm_down_page options.
</Para>

<Para>Then do the print again, and check that the cross is indeed 10cm in
both axes. This calibration is particularly necessary for older dot-matrix
printers as they vary significantly in scaling - even between two printers
of the same make and model.
</Para>

</Sect2>

</Sect1>

<Sect1><Title>Other Utilities</Title>
<?dbhtml filename="utils.htm">

<Para>There are a number of other utilities available which can help with
specific tasks.</Para>

<Sect2><Title>Extend</Title>

<Para>Syntax: <command/extend &lt;input imagefile&gt; [&lt;output imagefile&gt;]/
</Para>

<Para>This program generates Extended Elevations from <filename/.3d/
files. It does this by first finding the highest endpoint
(i.e. 1-node) and then unfolding all the legs flat in the E-W plane to
the right. This is not a very clever algorithm, and it will soon be
improved so that you have some sort of control over the unfolding.
</Para>

<Para>We believe that this should be an interactive process to get good
results, with the option to project some legs instead of flattening them.
Nevertheless it produces useful results on simple cave sections and it very
useful within its limitations.
</Para>

<Para>If not specified, the output filename defaults to
<filename/extend.3d/.</Para>

</Sect2>

<Sect2><Title>DiffPos</Title>

<Para>Syntax: <command/diffpos &lt;posfile1&gt; &lt;posfile2&gt; [&lt;threshold&gt;]/
</Para>

<Para>This utility compares the contents of the two specified position
<filename/.pos/ files. The output is a list of stations that differ by
more than the threshold in any of the axes X, Y, or Z. The threshold
parameter (given in metres) is optional, and if not specified defaults
to 0.01m.</Para>

</Sect2>

<Sect2><Title>Cad3d</Title>

<Para>
Syntax: <command/cad3d &lt;datafile&gt;/
</Para>

<Para>Cad3d converts a <filename/.3d/ file
into a format which can be read by a CAD or drawing package.
Currently it can produce DXF files or Sketch files.
<!-- FIXME: more info -->
</Para>

</Sect2>

<Sect2><Title>SpeleoGen</Title>

<!-- FIXME: needs syntax? think it's a GUI app actually -->

<Para>This is an alternative to cad3d. It is a Windows
(3.1/95/NT) utility which reads in &survexsuite; <filename/.3d/ data,
LRUD passage wall data (in <filename/.cav/ format) and surface
topography info in <filename/.csv/ format.  The results are combined,
displayed, and saved out as a DXF file for import into CAD or Drawing
packages.
</Para>

</Sect2>

<Sect2><Title>&hto; Converters</Title>

<Para>
SVX2HTO and HTO2SVX are converters between &survexsuite; data files in
.SVX format, and &hto; (Hierarchical Tagged Objects) interchange
format.
</Para>

<Para>
Syntax: <command/svx2hto &lt;datafile&gt;/
</Para>

<Para>
<command/hto2svx &lt;datafile&gt;/
</Para>

<Para>
These were utilities written by Bill Purvis around about &survexsuite;
v0.30. They have not really been kept up to date, and so will
not deal with newer &survexsuite; commands. If anyone needs this functionality
let us know.
</Para>

</Sect2>

</Sect1>

<Sect1><Title>&survexsuite; data files</Title>
<?dbhtml filename="datafile.htm">

<Para>Survey data is entered in the form of text files. You can use any
text editor you like for this, so long as it has the capability of
writing a plain ASCII text file. The data format is very flexible; you
can enter data in any order you like, the ordering of tape, compass,
clino (for example) is specifiable so that you can enter it just as it is
in the survey notes, thus reducing the opportunity for error.  Also all
the important characters are user-definable so the separators can be
spaces and tabs (the default), or commas (e.g.  when exporting from a
spreadsheet). The decimal point can be a slash (for clarity), a comma
(for Europeans), or anything else you care to choose. This flexibility
means that it should be possible to read in data from almost any sort of
data file.
</Para>

<Para>&survexsuite; places no restrictions on you in terms of the ordering
of data. You can enter or process data in any order and &survexsuite; will
read it all in before determining how it is connected. You can also use the
hierarchical naming so that you do not need to worry about using the same
station name twice.
</Para>

<Para>The usual form is to have one file which lists all the others
that are included (e.g., <filename/161.svx/ in the example data). Then
<command/cavern 161/ will process all your data. To just process a
section use the filename for that section, e.g. <command/cavern dtime/
will process the dreamtime file/section of Kaninchenh&ouml;hle.  To
help you out, if a survey is connected but has no fixed points, cavern
will 'invent' a fixed point and print a warning message to this
effect.
</Para>

<Para>It is up to you what data you put in which files but it obviously
makes sense to put related survey data in the same file.  You
can have one file per trip, or per area of the cave, or just one
file for the whole cave if you like.
</Para>
<!-- FIXME: wook sez:

 Point out in documentation that file structure and survey structure don't
 have to be the same.  And in particular that folder/directory names can be
 different.

Which is partly covered above, though the last bit isn't... 
-->

<Sect2><Title>Readings</Title>

<Para>Blank lines (i.e. lines consisting solely of &lt;BLANK&gt; characters)
are ignored. The last line in the file need not be terminated by
an end of line character. All fields on a line must be separated
by at least one &lt;BLANK&gt; character. An &lt;OMIT&gt; character
(default '-') indicates that a field is unused. If the field is
not optional, then an error is given.
</Para>

</Sect2>

<Sect2><Title>Survey Station Names</Title>

<Para>Station names may contain any alphanumeric characters and
additionally any characters in &lt;NAMES&gt; (default `_' and `-'). Alphabetic
characters may be forced to upper or lower case by using the *case
command. Station names may be any length - if you want to only treat
the first few characters as significant you can get cavern to truncate
the names using the *truncate command.
</Para>

</Sect2>

<Sect2><Title>Numeric fields</Title>

<Para>[&lt;MINUS&gt;|&lt;PLUS&gt;] &lt;integer part&gt; [ &lt;DECIMAL&gt;
[ &lt;decimal fraction&gt; ] ]
</Para>

<Para>
or [&lt;MINUS&gt;|&lt;PLUS&gt;] &lt;DECIMAL&gt; &lt;dec fraction&gt;
</Para>

<Para>
i.e. optional &lt;PLUS&gt; or &lt;MINUS&gt; sign in front, with
optional &lt;DECIMAL&gt; character (default '.'), which may be
embedded, leading or trailing. No spaces are allowed between the
various elements.
</Para>

<Para>
All of these, for example, are valid: +47, 23, -22, +4.5, 1.3, -0.7, +.15, .4,
-.05
</Para>

</Sect2>

<Sect2><Title>Accuracy</Title>

<Para>Accuracy assessments may be provided or defaulted for any survey
leg. These determine the distribution of loop closure errors over the
legs in the loop. See *SD for more information.
</Para>

</Sect2>

<!--
<Sect2><Title>Survey Coordinate Range</Title>

<Para>
If we store distances to nearest 10um (0.01mm) in 4 bytes, this
gives a range of ~20 km. This method is currently not used, but
has several advantages (data storage space [double uses 8 bytes
- with my C compiler], speed (unless your FP chip works in parallel
with your CPU [e.g. the new Acorn FPU for the ARM], and numerical
accuracy [compared to using floats at least]) and so may be adopted
in future). Nearest 0.1mm gives -200 km, which is enough for most
people, but may mean rounding errors become significant. 
</Para>

<Para>
I will have to do some sums...
</Para>

</Sect2>

-->

<Sect2><Title>cavern Commands</Title>

<Para>Commands in <filename/.svx/ files are introduced by an asterisk
(by default - this can be changed using the <command/set/ command).
</Para>

<!--
<Para>BEGIN, CALIBRATE, DATA, DEFAULT, END, EQUATE, FIX, GRADE,
INCLUDE, PREFIX, SD, SET, SOLVE, UNITS</Para>
*copyright
*date
*entrance
(could be inferred from surface/ug join, but better to specify because
of caves with no surf svy and also situations in which multiple
surveys leave an entrance)

*export - better example
*instrument
*team
INFER
-->

<Para>The commands are documented in a common format:
</Para>

<itemizedlist>
<listitem><para>Command Name</para></listitem>
<listitem><para>Syntax</para></listitem>
<listitem><para>Example</para></listitem>
<listitem><para>Description</para></listitem>
<listitem><para>Caveats</para></listitem>
<listitem><para>See Also</para></listitem>
</itemizedlist>

<Sect3><Title>BEGIN</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*begin [&lt;tag&gt;]</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<programlisting>
*begin littlebit
1 2 10.23 106 -02
2 3  1.56 092 +10
*end littlebit</programlisting>

<programlisting>
; length of leg across shaft estimated
*begin
*sd tape 2 metres
9 10 6.   031 -07
*end</programlisting>

</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>*begin stores the current values of the current settings such as
instrument calibration, prefix, and so on.  The corresponding *end
later restores these stored values.  If a prefix is given, the prefix
is set to this inside this *begin/*end block, and the prefix on the
*end should match.  *begin/*end blocks may be nested to indefinite
depth.</Para></listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<VarListEntry><Term>See Also</Term>

<listitem><Para>*end, *prefix</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>CALIBRATE &lt;quantity list&gt; &lt;ZeroError&gt; [&lt;Scale&gt;]</Title>

<!-- FIXME: or `*calibrate default' -->

<Para>
- Calibrates instruments:
</Para>

<Para>
&lt;quantity&gt; is one of TAPE|COMPASS|CLINO|COUNTER|DEPTH|DECLINATION|X|Y|Z
</Para>

<Para>
Several quantities can be given in &lt;quantity list&gt;
</Para>

<Para>
Value = ( Reading - ZeroError ) * Scale    (Scale defaults to 1.0)
</Para>

<Para>
You need to be careful about the sign of the ZeroError. It is
the amount needed to correct the reading you got to Zero. This
means that if your tape measure has the end missing, and you are
using the 30cm mark to take all measurements from, then you can
correct it with:
</Para>

<programlisting>*CALIBRATE tape +0.3</programlisting>

<Para>If you tape was too long, starting at -20cm (it does happen!)
then you can correct it with:
</Para>

<programlisting>*CALIBRATE tape -0.2</programlisting>

<Para>NB ZeroError is irrelevant for Topofil counters, but the command
set is neater this way!
</Para>

<Para>
The magnetic deviation varies from year to year and it is often
desirable to keep the compass zero error and the magnetic deviation
separate. cavern calculates the true bearing as follows:
</Para>

<Para>
(magnetic bearing) = ((reading)-(compass zero err)) * (compass
scale factor)
</Para>

<Para>
(true bearing) = ((bearing)-(declination zero err))
</Para>

<Para>
The scale factor for DECLINATION must be 1.0, otherwise an error
is given.
</Para>

<Para>
The default is all quantities calibrated to scale factor 1.0,
zero error 0.0
</Para>

</Sect3>

<Sect3><Title>CASE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><para>*case preserve|toupper|tolower</para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<programlisting>
*begin bobsbit
; Bob insists on using case sensitive station names
*case preserve
1 2   10.23 106 -02
2 2a   1.56 092 +10
2 2A   3.12 034 +02
2 3    8.64 239 -01
*end bobsbit</programlisting>

</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>*case determines how the case of letters in survey names is
handled.  By default all names are forced to lower case (which gives a case
insensitive match, but you can tell cavern to force to upper case, or leave
the case as is (in which case '2a' and '2A' will be regarded as different).
</Para></listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<!-- <VarListEntry><Term>See Also</Term>

<listitem><Para>*end, *prefix</Para></listitem>

</VarListEntry>
-->

</VariableList>

<!-- FIXME - work this text in here or elsewhere

What I mean (though failed to express very well) is that a dataset without
this information isn't the same dataset (in general anyway).  For example:

A1 a2 10.32 140 -05
a2 a3  4.91 041 -01
a1 a3  7.01 206  02

is either a traverse of 3 legs or a (probably badly misclosed) loop.  If
these names are on the original survey notes, the surveyors ought to say
whether "A1" is the same as "a1" (although the usual case for using this
feature is probably for importing data from elsewhere).  Similarly for
truncation.  Whether a clino of +/-90 degrees (or +/-100 grad, etc) is
interpreted as a plumb is something that should have been noted in the cave
(unless it's implicit because it's standard practice for a survey project).

It's a similar issue to calibration data in many ways.  You can argue it's
not part of "the survey", but without it the survey won't be the same shape,
and it's not useful to process the same survey with different settings for
compass calibration or name case sensitivity.

>Clearly that is unhelpfully strict, but it is
>important to be semantically clear about what is 'data' and what is 'commands
>or meta-data' which describe what to do with/how to interpret that data.

Think of the lines starting with a "*" as "command or meta-data".

>The most-correct solution to this is (I beleive) Martin Heller's idea about
>including 'rules' in the datastream, but that's too big a subject for right
>now.
>
>The reason '-C' was made into a command-line option, was that it made very
>little sense to change it part way though a dataset. What exactly happens if
>you suddenly tell cavern to become case-sensitive halfway through a run?

-C has always had 3 settings - "leave case alone", "force to lower", and
"force to upper".  It doesn't really mean "case sensitivity" but rather
something like "case processing".  So you can usefully change it during a
run.  So if my dataset treats "NoTableChamber" (so named because it was
lacking in furniture) as different from "NotableChamber" (which was notable
for other reasons) I can process it with a dataset from someone else which
needs to be treated as case insensitive like so:

*begin my_cave
*include my_dataset
*end my_cave

*equate my_cave.NoTableChamber.14 your_cave.linkpassage.13

*begin your_cave
*case tolower
*include your_dataset
*end your_cave

You may be thinking of -U<n>, which used to mean "only compare the first n
characters of station names", but that doesn't allow arbitrary datasets to
be processed together.

So we changed it to mean "truncate station names to n characters", and
allowed it to be changed at any point, rather than being set once for the
whole run.

-->

</Sect3>

<Sect3><Title>COPYRIGHT</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*copyright &lt;date&gt; &lt;text&gt;</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<programlisting>
*begin littlebit
*copyright 1983 CUCC
1 2 10.23 106 -02
2 3  1.56 092 +10
*end littlebit</programlisting>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>*copyright allow the copyright information to be
stored in a way that can be automatically collated.
</Para></listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<VarListEntry><Term>See Also</Term>

<listitem><Para>*end, *prefix</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>DATA &lt;type&gt; &lt;ordering&gt;</Title>

<Para>
e.g. *DATA Normal from to compass tape clino
</Para>

<!-- FIXME: CYLPOLAR, LRUD not yet implemented -->

<Para>
&lt;type&gt; = DEFAULT|NORMAL|DIVING|CARTESIAN|TOPOFIL|NOSURVEY
</Para>

<Para>
&lt;ordering&gt; = A selection from one the following:
</Para>

<Para>
DEFAULT
</Para>

<Para>
NORMAL FROM TO LENGTH [BACK]BEARING [BACK]GRADIENT
</Para>

<Para>
DIVING FROM TO LENGTH [BACK]BEARING FROMDEPTH TODEPTH
</Para>

<Para>
CARTESIAN FROM TO NORTHING EASTING ALTITUDE
</Para>

<Para>
TOPOFIL FROM TO FROMCOUNT TOCOUNT [BACK]BEARING [BACK]GRADIENT
</Para>

<Para>
NOSURVEY FROM TO
</Para>

<!--
<Para>
CYLPOLAR FROM TO VERTICAL HORIZONTAL [BACK]BEARING
</Para>

<Para>
(LRUD STATION [LEFT] [RIGHT] [UP] [DOWN])
</Para>
-->

<Para>
Also, IGNORE skips a field (it may be used any number of times),
and IGNOREALL may be used last to ignore the rest of the line.
</Para>

<Para>
Note that the user is forced to specify the ordering every time
the style is changed to ensure that the order is set correctly.
</Para>

<Para>
The "DEPTH" for diving data increases upwards by default
(so it is actually altitude).  You can use *CALIBRATE with a negative
scale factor of -1.0 to alter this if you wish.
</Para>

<Para>
The default is *DATA Normal From To Tape Compass Clino
</Para>

</Sect3>

<Sect3><Title>DEFAULT &lt;settings list&gt;|ALL</Title>

<Para>
- Restores defaults for given settings.  This command is deprecated -
you should instead use: *calibrate default, *data default, *units default.
</Para>

<Para>
Where the valid settings are CALIBRATE, DATA, UNITS. The defaults
are given under each keyword description.
</Para>

</Sect3>

<Sect3><Title>END [&lt;prefix&gt;]</Title>

<Para>
 - see BEGIN.</Para>
 
</Sect3>

<Sect3><Title>EQUATE &lt;station id list&gt;</Title>

<Para>
e.g: *Equate chosspot.1 triassic.27
</Para>

<Para>
- All the station names in the list refer to the same physical
survey station. An error is given if there is only one station
id in the list. I think this is preferable to using:
</Para>

<programlisting> a b 0.00   0   0</programlisting>

<Para>
as EQUATE does not add in an extra position error. It is also clearer than
substituting in the original name wherever passages are linked. If you
disagree, you can always use one of the other methods!
</Para>

</Sect3>

<Sect3><Title>EXPORT &lt;station id list&gt;</Title>

<Para>
e.g: *EXPORT 1 6 17
</Para>

<Para>
- All the station names in the list are marked as referable to in the
prefix level above.  To use a station name several levels above it must
be exported from each level.  *export must follow *begin (or another
*export).
</Para>

</Sect3>

<Sect3><Title>FIX &lt;Station&gt; [REFERENCE]
 [ &lt;x&gt; &lt;y&gt; &lt;z&gt;
   [ &lt;x std err&gt; &lt;y std err&gt; &lt;z std err&gt;
     [ &lt;cov(x,y)&gt; &lt;cov(y,z)&gt; &lt;cov(z,x)&gt; ] ] ]</Title>

<Para>
e.g. *fix entrance.0 32768 86723 1760
</Para>

<Para>
e.g. *fix KT114_96 reference 36670.37 83317.43 1903.97
</Para>

<Para>
(x=Easting y=Northing z=Altitude)
</Para>

<Para>
FIX fixes the position of &lt;Station&gt; at the given coordinates.
If the position is omitted it defaults to (0,0,0). The standard
errors default to zero (fix station exactly). cavern will complain
if you attempt to fix the same survey station twice.
</Para>

<Para>
You can also specify just one standard error (in which case it is assumed
equal in X, Y, and Z) or two (in which case the first is taken as the
standard error in X and Y, and the second as the standard error in Z).
</Para>

<Para>
If you have covariances for the fix, you can also specify these - the
order is cov(x,y),  cov(y,z),  cov(z,x). 
</Para>

<Para>
By default cavern will warn about stations which have been FIX-ed but
not used otherwise.  This is unhelpful if you want to include a
standard file of benchmarks, some of which won't be used.
In this sort of situation, specify "REFERENCE" after the station name
in the FIX command to suppress this warning for a particular station.
</Para>

</Sect3>

<Sect3><Title>FLAGS &lt;flags&gt;</Title>

<Para>
e.g *flags duplicate not surface
</Para>

<Para>- The current flag settings are updated according with those
given.  Flags not mentioned retain their previous state.  Valid flags
are DUPLICATE, SPLAY, and SURFACE, and a flag may be preceded with NOT to
turn it off.
</Para>

<Para>
Survey legs marked SURFACE are hidden from plots by default, and not
included in cave survey length calculations.  Survey legs marked as
DUPLICATE or SPLAY are also not included in cave survey length
calculations; legs marked SPLAY are ignored by the extend program.
DUPLICATE is intended for the case when if you have two different
surveys along the same section of passage (for example to tie two
surveys into a permanent survey station); SPLAY is intended for 
cases such as radial legs in a large chamber.
</Para>

</Sect3>

<Sect3><Title>INCLUDE &lt;filename&gt;</Title>

<Para>
e.g *include chosspot
</Para>

<ItemizedList>
<ListItem><Para>Processes &lt;filename&gt; as if it were inserted at this
place in the current file. (i.e. The current settings are carried
into &lt;filename&gt;, and any alterations to settings in &lt;filename&gt;
will be carried back again). (Nesting allowed up to at least 4
deep with ANSI C - I think). If &lt;filename&gt; contains spaces,
it must be enclosed in quotes.
</Para></ListItem>

<ListItem><Para>An included file which does not have a complete path
is resolved relative to the directory which the parent file is in
(just as relative HTML links do).  Cavern will try adding a ".svx"
extension if no extension is present, and will also try translating
"\" to "/" (or other appropriate tricks on RISC OS).  And as a last
resort, it will try a lower case version of the filename (so if you
use Unix and someone sends you a DOS/Windows dataset with mismatched
case, unzip it with "unzip -L" and unix cavern will process it).
</Para></ListItem>

</ItemizedList>

</Sect3>

<Sect3><Title>INFER</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem>
<Para>*infer plumbs on|off</Para>

<Para>*infer equates on|off</Para>
</listitem>

</VarListEntry>

<!--
<VarListEntry><Term>Example</Term>

<listitem>
<programlisting>
</programlisting>

</listitem>

</VarListEntry>
-->

<VarListEntry><Term>Description</Term>

<listitem>
<Para>"*infer plumbs on" tells cavern to interpret gradients of +/- 90
degrees as UP/DOWN (so it
will not apply the clino correction to them). This is useful when
the data has not been converted to have UP and DOWN in it.
</Para>

<Para>"*infer equates on" tells cavern to interpret a leg with
a tape reading of zero as a *equate.  This prevents tape corrections
being applied to them.
</Para>
</listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<!--
<VarListEntry><Term>See Also</Term>

<listitem><Para>*end, *prefix</Para></listitem>

</VarListEntry>
-->

</VariableList>

</Sect3>

<Sect3><Title>PREFIX &lt;prefix&gt;</Title>

<Para>
- Sets the currents prefix. Now deprecated. Use *BEGIN and *END
instead. See section on hierarchical prefixes.
</Para>

</Sect3>

<Sect3><Title>REQUIRE &lt;version&gt;</Title>

<Para>
- Check that the version of cavern in use is at least &lt;version&gt; and
issues an error if not.  So if your dataset requires a feature
introduced in a particular version, you can add a *require command and
users will know what version they need to upgrade to, rather than
getting an error message and having to guess what the real problem is.
</Para>

</Sect3>

<Sect3><Title>SD &lt;quantity list&gt; &lt;standard deviation&gt;</Title>

<Para>
e.g. *SD tape 0.15 metres
</Para>

<Para>
- Set standard deviation of measurements.
</Para>

<Para>
&lt;quantity&gt; is one of TAPE|COMPASS|CLINO|COUNTER|DEPTH|DECLINATION|X|Y|Z
</Para>

<Para>
&lt;standard deviation&gt; must include units and thus is typically
'0.05 metres', or 0.02 degrees. See 'UNITS' below for full list
of permitted options.
</Para>

<Para>
To utilise this command fully you need to understand what 'Standard
deviation' means. It gives a value to the 'spread' of the errors
in a measurement. Assuming that these are normally distributed
we can say that 95% of the actual lengths will fall within three
standard deviations of the measured length. i.e. a tape SD of
0.167 metres means that the actual length of a tape measurement
is within + or - 0.5 metres of the recorded value 95% of the time.
So if the measurement is 7.34m then the actual length is very
likely (95%) to be between 6.84m and 7.84m. This example corresponds
to BCRA grade 3. Note that this is just one interpretation of
the BCRA standard, taking the permitted error values as 3SD 95%
confidence limits. If you want to take the readings as being some
other limit (e.g. 1SD) then you will need to change the BCRA3
and BCRA5 files accordingly. This issue is explored in more
detail in various surveying articles.
</Para>

</Sect3>

<Sect3><Title>SET &lt;item&gt; &lt;character list&gt;</Title>

<Para>
e.g. *SET Decimal ,
</Para>

<Para>
*Set Decimal Comma
</Para>

<Para>
- sets the specified &lt;item&gt; to the character or characters
given in &lt;character list&gt;. The example sets the decimal
separator to be Comma
</Para>

<Para>
The complete list of  items that can be set, the defaults (in
brackets), and the meaning of the item, is:
</Para>

<Para>
BLANK (SpaceTabComma) Separates fields
#ifdef XXX
#endif /* XXX */

COMMENT (;) Introduces comments
</Para>

<Para>
DECIMAL (.) Decimal point character 
</Para>

<Para>
EOL (CrLf) End of line character
</Para>

<Para>
KEYWORD (*) Introduces keywords
</Para>

<Para>
MINUS (-) Indicates negative number
</Para>

<Para>
NAMES (_-) Non-alphanumeric chars permitted in station
names (letters and numbers are always permitted).
</Para>

<Para>
OMIT (-) Contents of field omitted (e.g. in plumbed legs)
</Para>

<Para>
PLUS (+) Indicates positive number 
</Para>

<Para>
ROOT (\) Prefix in force at start of current file (use of ROOT is deprecated)
</Para>

<Para>
SEPARATOR (.) Level separator in prefix hierarchy
</Para>

<Para>
The special characters may not be alphanumeric.
</Para>

<!-- FIXME this isn't implemented
<Para>
The following characters may be written as words:
</Para>

<Para>
Null (&amp;00) Tab (&amp;09) Lf (&amp;0A) Cr (&amp;0D) Space (&amp;20)
Star (&amp;2A) Comma (&amp;2C)
</Para>

<Para>
Dash (&amp;2D) Dot (&amp;2E) Underscore (&amp;5F)
</Para>

<Para>
Also, HexXX means the character with hex value XX. Eg Hex20 is
a space.
</Para>
-->

</Sect3>

<Sect3><Title>SOLVE</Title>

<Para>
Distributes misclosures around any loops in the survey and fixes
the positions of all existing stations.  This is done automatically
after all the survey data has been read in.  This command is intended
to be useful for adding extensions to an already drawn survey.
 You can read in the old data, use *SOLVE to fix it, and then
read in the new data. This can be done repeatedly if you want to,
allowing you to solve loops sequentially, pinning down ones you
are sure about first.
</Para>

</Sect3>

<Sect3><Title>TITLE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*title "&lt;title&gt;"</Para></listitem>

</VarListEntry>

<!--
<VarListEntry><Term>Example</Term>

<listitem>
<programlisting>
</programlisting>

</listitem>

</VarListEntry>
-->

<VarListEntry><Term>Description</Term>

<listitem><Para>*title allows you to set the title used in the
<filename/.3d/ file. If
the title contains spaces, you need to enclose it in quotes
(""). Multiple titles are strung together, separated by
commas. If there are no *title commands, the title defaults to
a list of the leafnames of the .svx files specified on the command line
(with any paths and extensions removed).</Para>
<!--
<Para>e.g.: cavern entrance.svx \data\2ndpart.svx
</Para>

<Para>would give a surveytitle of 'entrance 2ndpart'.
</Para>
-->
</listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<!--
<VarListEntry><Term>See Also</Term>

<listitem><Para>*end, *prefix</Para></listitem>

</VarListEntry>
-->

</VariableList>

</Sect3>

<Sect3><Title>TRUNCATE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*truncate &lt;length&gt;|off</Para></listitem>

</VarListEntry>

<!--
<VarListEntry><Term>Example</Term>

<listitem>
<programlisting>
</programlisting>

</listitem>

</VarListEntry>
-->

<VarListEntry><Term>Description</Term>

<listitem><Para>Station names may be of any length in &survexsuite;, but some
other (mostly older) cave surveying software only regard the first few
characters of a name as significant (e.g. "entran" and "entrance"
might be treated as the same).  To facilitate using data imported from
such a package &survexsuite; allows you to truncate names to whatever
length you want (but by default truncation if off).
</Para>

<Para>Figures for the number of characters which are significant is various
software packages: Surveyor87/8 used 8, Andy Waddington's SU-BBC used 6,
while !SU, the Archimedes version, used 8, &survexsuite; used 8 per prefix
level up to version 0.41, and 12 per prefix level up to 0.73 (more recent
versions removed this rather archaic restriction).
</Para>
</listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<!--
<VarListEntry><Term>See Also</Term>

<listitem><Para>*end, *prefix</Para></listitem>

</VarListEntry>
-->

</VariableList>

</Sect3>

<Sect3><Title>UNITS &lt;quantity list&gt; [&lt;factor&gt;] &lt;unit&gt;</Title>

<!-- FIXME: or `*units default' -->

<Para>e.g. *Units tape metres
</Para>

<Para>*units X Y Z 1000 metres ; data given as kilometres
</Para>

<Para>&lt;quantity&gt; is one of
TAPE|LENGTH|COMPASS|BEARING|CLINO|GRADIENT|COUNTER|DEPTH|DECLINATION|X|Y|Z
</Para>

<Para>Changes current units of all the quantities listed to [&lt;factor&gt;]
&lt;unit&gt;. Note that quantities can be expressed either as
the instrument or the measurement.
</Para>

<Para>If &lt;factor&gt; is omitted it defaults to 1.00
</Para>

<Para>Valid units for listed quantities are:
</Para>

<!-- FIXME: are these correct?
  and dx,dy,dz -> easting/northing/altitude in preference -->
<Para>TAPE, LENGTH, COUNTER, COUNT, DEPTH, dX, dY, dZ, X,Y,Z,
LENGTHOUTPUT in YARDS|FEET|METRIC|METRES|METERS
</Para>

<Para>CLINO, GRADIENT in DEG|DEGREES|GRADS|MILS|PERCENT|PERCENTAGE
</Para>

<Para>COMPASS, DECLINATION, BEARING, ANGLEOUTPUT in
DEG|DEGREES|GRADS|MILS|MINUTES
</Para>

<Para>(360 degrees = 400 grads (also known as Mils))
</Para>

<Para>Defaults are: Metres, Degrees, Degrees respectively.
</Para>

<Para>[Percentage gradient not yet implemented]
</Para>

<Para>[LENGTHOUTPUT and ANGLEOUTPUT not yet implemented]
</Para>

<Para>LENGTHOUTPUT determines the units in which cavern displays
lengths and positions. Similarly, ANGLEOUTPUT determines the units of
any angles output.
</Para>

<Para>The units used are those last set. (The units of any output are
displayed with it).
</Para>

</Sect3>

</Sect2>

<Sect2><Title>Station naming</Title>

<Para>&survexsuite; has a powerful system for naming stations.  It
uses a hierarchy of names, in a similar way to the directory structure
on your discs.  So point 6 in the entrance survey of Kaninchenhohle
(cave number 161) is referred to as: 161.entrance.6
</Para>

<Para>This seems a natural way to refer to station names.  It also
means that it is very easy to include more levels, for example if you
want to plot all the caves in the area you just list them all in
another file, specifying a new prefix.  So to group our example cave
and its neighbours on the Loser Plateau you would use a file like
this:
</Para>

<programlisting>
*begin Loser
*include 161
*include 2YrGest
*include 145
*end Loser</programlisting>

<Para>
The entrance series point mentioned above would now be referred
to as: Loser.161.entrance.6
</Para>

<Para>This may seem a tad complex but is really very natural once you
get the hang of it.
</Para>

<Para>You do not have to use this system at all, and can just give all
stations unique identifiers if you like:
</Para>

<Para>1, 2, 3, 4, 5, ... 1381, 1382
</Para>

<Para>or
</Para>

<Para>AA06, AA07, P34, ZZ6, etc.
</Para>

<Para>A minimal use of the prefix system is just to split the survey
into cave and surface sections.  We plan to enhance CAVEROT so
that sections can be hidden or coloured by prefix.
</Para>

<Para>The other really important commands apart from *BEGIN, *END, and
*INCLUDE are *EQUATE and *FIX.
</Para>

<Para>*EQUATE is used to join surveys together, where the station
numbering sequence has not simply been continued. e.g.
</Para>

<programlisting>*equate entrance.6 adrian.1</programlisting>

<Para>
indicates that the 6th point of the entrance survey was used as
the 1st point of the Adrian's Route survey.
</Para>

<Para>The idea is that you do not have to change the names of points
when entering the data to make things join up.  Just EQUATE the
points where surveys join.
</Para>

<Para>*FIX is for fixing points in space. E.g.
</Para>

<programlisting>
*fix 161.entrance.1    0  0  1780</programlisting>

<Para>fixes the 1st point of the 'entrance' survey at the coordinates
0 (east-west), 0 (north-south), 1780 (altitude).
</Para>

<Para>Other implemented commands are:
</Para>

<itemizedlist>
<listitem><Para>*UNITS     - sets units for length and angular measurements</Para></listitem>
<listitem><Para>*CALIBRATE - takes account of instrument and magnetic error/variation</Para></listitem>
<listitem><Para>*SD - specify expected Standard Deviations for measurements</Para></listitem>
<!-- FIXME and more -->
</itemizedlist>

<Para>
Full descriptions of all these commands are given in the Command
specification appendix
</Para>

</Sect2>

</Sect1>

<Sect1><Title>Contents of .svx files: How do I?</Title>
<?dbhtml filename="svxhowto.htm">

<Para>
Here is some example &survexsuite; data (a very small cave numbered 1623/163):
</Para>

<programlisting>
2 1 26.60 222  17.5
2 3 10.85 014   7
2 4  7.89 254 -11
4 5  2.98  - DOWN
5 6  9.29 271 -28.5</programlisting>

<Para>
You can vary the data ordering.  The default is:
</Para>

<Para>
from-station to-station tape compass clino
</Para>

<Para>
This data demonstrates a number of useful features of &survexsuite;:
</Para>

<Para>
Legs can be measured either way round, which allows the use of
techniques like "leap-frogging", meaning that the legs
alternate forwards and backwards.
</Para>

<Para>
Also notice that there is a spur in the survey (2 to 3).  You
do not need to specify this specially.
</Para>

<Para>
&survexsuite; places few restrictions on station naming (see "Survey
Station Names" in the previous section), so you can number the stations
as they were in the original survey notes.  Although not apparent from
this example, there is no requirement for each leg to connect to an
existing station.  &survexsuite; can accept data in any order, and will
check for connectedness once all the data has been read in.
</Para>

<Para>
Each survey is also likely to have other information associated
with it, such as instrument calibrations, etc.  This has been
omitted from this example to keep things simple.
</Para>

<Para>
Most caves will take more than just one survey trip to map.  Commonly
the numbering in each survey will begin at 1, so we need to be
able to tell apart stations with the same number in different
surveys.
</Para>

<Para>
To accomplish this, &survexsuite; has a very flexible system of hierarchical
prefixes.  All you need do is give each survey a unique name or
number, and enter the data like so:
</Para>

<programlisting>
*begin 163
2 1 26.60 222  17.5
2 3 10.85 014   7
2 4  7.89 254 -11
4 5  2.98  - DOWN
5 6  9.29 271 -28.5
*end 163</programlisting>

<Para>&survexsuite; will name the stations by attaching the current prefix.
In this case, the stations will be named 163.1, 163.2, etc.
</Para>

<Para>We have a convention with the CUCC Austria data that the entrance survey
station of a cave is named P&lt;cave number&gt;, P163 in this case. We
can accomplish this like so:
</Para>

<programlisting>
*equate P163 163.1
*begin 163
2 1 26.60 222  17.5
2 3 10.85 014   7
2 4  7.89 254 -11
4 5  2.98  - DOWN
5 6  9.29 271 -28.5
*end 163</programlisting>

<Sect2><Title>Specify the ordering and type of data</Title>

<Sect3><Title>Ordering</Title>

<Para>The *DATA command is used to specify the ordering</Para>

</Sect3>

<Sect3><Title>Type</Title>

<Para>Stylename Data items required
</Para>

<Para>
Normal/SphPolar &lt;FromStn&gt; &lt;ToStn&gt; &lt;Length&gt; &lt;Bearing&gt;
&lt;Gradient&gt;
</Para>

<Para>
Diving &lt;FromStn&gt; &lt;ToStn&gt; &lt;Length&gt; &lt;Bearing&gt;
&lt;FromDepth&gt; &lt;ToDepth&gt;
</Para>

<Para>
[These styles are not yet implemented]
</Para>

<Para>
Cartesian &lt;FromStn&gt; &lt;ToStn&gt; &lt;dx&gt; &lt;dy&gt;
&lt;dz&gt;
</Para>

<Para>
Topofil &lt;FromStn&gt; &lt;ToStn&gt; &lt;FromCount&gt; &lt;ToCount&gt;
&lt;Bearing&gt; &lt;Gradient&gt;
</Para>

<Para>
CylPolar &lt;FromStn&gt; &lt;ToStn&gt; &lt;VerticalLength&gt;
&lt;PlanLength&gt; &lt;Bearing&gt;
</Para>

<Para>
The units of each quantity may be set with the UNITS command.
</Para>

<Sect4><Title>Notes:</Title>

<Para>
1. [This feature is not implemented, although the style is.] In
DIVING data, either &lt;FromDepth&gt; or &lt;ToDepth&gt; may be
replaced by an &lt;OMIT&gt; (default '-') if the respective survey
station is mentioned in the previous line (assuming there is no
change of depth gauge/water level). If the survey station does not
appear in the previous line (or this is the first line of diving
data), then an error is given.
<!-- FIXME: plumbed diving legs -->
</Para>

<Para>
2. [Not implemented, although the style is] Similarly, for TOPOFIL data &lt;FromCount&gt;
may be replaced by an &lt;OMIT&gt; (default '-') if the reading
is the same as the previous &lt;ToCount&gt;. If this is the first
line of Topofil data, then an error is given. (It is best if both
readings are input, rather than just the difference between them,
to aid tracking down incorrect legs. If you do not agree, use NORMAL
data style).
</Para>

<Para>
3. CARTESIAN data are relative to TRUE North
not MAGNETIC North (i.e. they are unaffected by the calibration
of DECLINATION). Also x is Easting, y is Northing, and z is height.
This convention has been chosen because it gives right-handed
axes, such that plotting x and y on a graph gives North up the
page.
</Para>

<Para>
4 [Not implemented] CYLPOLAR (Cylindrical Polar) style data is
included for completeness, since someone may have a use for it.
Perhaps a Grade 3 survey, or when surveying with a level and stick
(?). Let me know if you find a use so I can put a better justification
for it in here!
</Para>

</Sect4>

</Sect3>

</Sect2>

<Sect2><Title>Deal with Plumbs or Horizontals</Title>

<Para>
PLUMBED LEGS should be given as 'UP' or 'DOWN'. They can be given
as +90, or -90, but as they are not usually measured with the
clino, but with a plumb of some sort, then it is useful to distinguish
them in this way so that any clino adjustment is not applied to
these values.
</Para>

<Para>
Note that a similar effect can be achieved by using the "*infer plumbs" command
to stop clino corrections being applied to -90 and +90 clino readings.
</Para>

<Para>
Up and Down are used like this, in place of the Clino reading.
A dash (or a different specified 'OMIT' character) is given for
the compass reading in the usual way
</Para>

<programlisting>
1 2 21.54 - UP
3 2 7.36 017 +17
3 4 1.62 091 +08
5 4 10.38 - DOWN</programlisting>

<Para>
(U,D may be used instead of UP,DOWN (not case sensitive), or +V
and -V).
</Para>

<Para>
Legs surveyed across the surface of a static body of water where no
clino reading is taken (since the surface of the water can be assumed
to be flat) can be indicated by using LEVEL in place of a clino reading.
This prevents the clino correction being applied.
</Para>

<programlisting>
1 2 11.37 190 -12
3 2  7.36 017 LEVEL
3 4  1.62 091 LEVEL</programlisting>

</Sect2>

<Sect2><Title>Specify a BCRA grade</Title>

<Para>The *SD command can be used to specify the standard deviations of the
various measurements (tape, compass, clino, etc).  Examples files are
supplied which define BCRA Grade 3 and BCRA Grade 5 using a number of *sd
commands. You can use these by simply including them at the relevant point..
</Para>

<Para>You can use them as follows:
</Para>

<programlisting>
*begin somewhere
; This survey is only grade 3
*include grade3
2 1 26.60 222  17.5
2 3 10.85 014   7
; etc
*end somewhere</programlisting>

<Para>The default values for the standard deviations are those for
BCRA grade 5. Note that it is good practice to keep the *include
Grade3 within *Begin and *End commands otherwise it will apply
to following survey data, which may not be what you intended.
</Para>

</Sect2>

<Sect2><Title>Specify different accuracy for a leg</Title>

<Para>For example, suppose the tape on the plumbed leg in this survey
is suspected of being inaccurate for some reason, but that the other
measurements and legs are believed to be okay:
</Para>

<programlisting>
*equate P163 163.1
*begin 163
2 1 26.60 222  17.5
2 3 10.85 014   7
2 4  7.89 254 -11
*begin
; the tape for this leg is somewhat suspect
*sd tape 0.5 metres
4 5  2.98  - DOWN
*end
5 6  9.29 271 -28.5
*end 163</programlisting>

</Sect2>

<Sect2><Title>Enter Radiolocation Data</Title>

<Para>This is done by using the *SD command to specify the appropriate
errors for the radiolocation `survey leg' so that the loop closure
algorithm knows how to distribute errors if it forms part of a loop.
</Para>

<Para>The best approach for a radiolocation where the underground station
is vertically below the surface station is to represent it as a
plumbed leg, giving suitable SDs for the length and plumb angle. The
horizontal positioning of this is generally quite accurate, but the
vertical positioning may be much less well known. E.g: we have a
radiolocation of about 50m depth +/- 20m and horizontal accuracy of
+/- 8m. Over 50m the +/-8m is equivalent to an angle of 9 degrees, so
that is the expected plumb error. 20m is the expected error in the
length. To get the equivalent SD we assume that 95% of readings will
be within 3 standard deviations of the error value. Thus we divide the
expected errors by 3 to get the SD we should specify:
</Para>

<programlisting>
*begin
*sd length 6.67
*sd plumb 3 degrees
surface underground 50 - down
*end
</programlisting>

<Para>
The reason we wrap the radiolocation leg in a *begin/*end block to make
sure that the special *sd settings only apply to this one leg.
</Para>

<Para>For more information on the expected errors from radiolocations
see Compass Points Issue 10.
</Para>

</Sect2>

<Sect2><Title>Enter Diving Data</Title>

<Para>Diving Data is now accepted. You use the *Data command to specify
that the following data is of this type.
</Para>

</Sect2>

<Sect2><Title>Enter Theodolite data</Title>

<!-- FIXME: we do now have a data style more suited to theodolite,
  though we don't do turned angles -->
<Para>Theodolite data is not yet explicitly catered to. You will need
to convert it into equivalent compass and tape legs, or some
other accepted format to process it. Note that if there is no
vertical info in your theodolite data then you should use the
SD commands to specify very low accuracy (High SD) in the vertical,
but very high accuracy (low SD) in the horizontal and length info,
so that the points will move in the vertical plane as required,
but not in the horizontal, if the end points are fixed, or the
survey is part of a loop.
</Para>

</Sect2>

</Sect1>

<Sect1><Title>General: How do I?</Title>
<?dbhtml filename="genhowto.htm">

<Sect2><Title>Create a new survey</Title>

<Para>You simply create a text file containing the relevant survey data,
using a text editor, and save it with a suitable name. It is generally
a good idea to give it a .SVX extension under &msdos;/Windows. The
easiest way is to look at some of the example data and use that
as a template. Nearly all surveys will need a bit of basic info
as well as the survey data itself: e.g. comments about date, where,
what cave, a name for the survey (using *begin and *end), instrument
error corrections etc. Here is a typical survey file:
</Para>

<Para>All the lines starting with ';' are comments, which are ignored
by &survexsuite;. You can also see the use of 'DOWN' for plumbs, and
*calibrate tape for dealing with a tape length error. (This tape
was unusual in being too long!).</Para>

<programlisting>
;Survey Name: Chaos - "Bottomless Pit of Eternal Chaos" to
;         "Redemption" pitch
;People - Inst: Nick Procter
;         Notes: Anthony Day
;   Pictures: Anthony Day
;         Tape: Both
;Date: 11 July 1996
;Instrument Set: 2
;Calibration: Cairn-Rock 071 072 071,  -22 -22 -22
;       Rock-Cairn 252 251 252,  +21 +21 +21
;Calibration at 161d entrance from cairn nr entrance to
;prominent rock edge lower down. This is different from
;calibration used for thighs survey of 5 July 1996
;
;
;From  to  Tape Compass Clino
*equate chaos.1 triassic.pt3.8
*equate chaos.2 triassic.pt3.9
*begin chaos
;Tape is 20cm too short
*calibrate tape +0.2
1 2 9.48 208 +08
2 3 9.30 179 -23
3 4 2.17 057 +09
5 4 10.13 263 +78
5 6 2.10 171 -73
7 6 7.93 291 +75
*calibrate tape 0
8 7 35.64 262 +86 ;true length measured for this leg
*calibrate tape +0.2
8 9 24.90 - DOWN
10 9 8.61 031 -43
10 11 2.53 008 -34
11 12 2.70 286 -20
13 12 5.36 135 +23
14 13 1.52 119 -12
15 14 2.00 036 +13
16 15 2.10 103 +12
17 16 1.40 068 -07
17 18 1.53 285 -42
19 18 5.20 057 -36
19 20 2.41 161 -67
20 21 27.47 - DOWN
21 22 9.30 192 -29
*end chaos</programlisting>

</Sect2>

<Sect2><Title>Join surveys together</Title>

<Para>Once you have more than one survey you need to specify how they
link together. You can do this in two basic ways. Either just
use the name of the joining station at one end of the joining
leg, or, more usually, use a *equate command to specify that one
station has two names (one name for each survey at the joining
point).
</Para>

</Sect2>

<Sect2><Title>Organise my surveys</Title>

<Para>This is actually a large subject. There are many ways you can
organise your data using &survexsuite;. Take a look at the example dataset
for some ideas of ways to go about it.
</Para>

<Sect3><Title>Fixed Points (Control Points)</Title>

<Para>The command:
</Para>

<programlisting>
*fix 1.entrance.1    0  0  1780</programlisting>

<Para>fixes station 1 of the entrance survey at the co-ordinates 0
(east-west),0 (north-south), 1780 (altitude).
</Para>

<Para>If there are no fixed points specified, &survexsuite; will fix the
first station mentioned at (0,0,0).  This allows sub-sections of a large
survey to be processed separately, without the need to keep putting in and
removing fixed points.
</Para>

<Para>To fix more than one station at known co-ordinates, simply use a *fix
command for each.  &survexsuite; will check that all stations are connected
to at least one fixed point (so their co-ordinates can be calculated).
"Hanging" legs and stations are reported and discarded.  This
means that unconnected sections of data can be fed in and the connections
added later.
</Para>

</Sect3>

<Sect3><Title>More than one survey per trip</Title>

<Para>Suppose you have two separate bits of surveying which were done on the
same trip.  So the calibration details, etc. are the same for both.  But you
want to give a different prefix to the two sections.  This is easily
achieved like so:
</Para>

<programlisting>
*begin
*calibrate compass 1.0
*calibrate clino 0.5
*begin altroute
; first survey
*end altroute
*begin faraway
; second survey
*end faraway
*end</programlisting>

</Sect3>

</Sect2>

<Sect2><Title>Add surface topology</Title>

<Para>This process is not yet automated. It is possible to generate
a mesh or contours overlaying your area by various means. Some
details of several methods are given in the BCRA Cave Surveying
Group magazine Compass Points issue 11. This article is also available
on-line. SpeleoGen can also help with this process if you want
final output in DXF form. We expect to include mesh generation
from a grid of height data within &survexsuite; soon. Note that if you
create your own set of &survexsuite; data for a surface mesh that the
stations should have different names on the E-W line from the
N-S lines, otherwise your mesh will have a huge number of loops
which &survexsuite; will try to solve unnecessarily, using up a great
deal of memory.
</Para>

</Sect2>

<Sect2><Title>Overlay a grid</Title>

<Para>This is another aspect awaiting automation. For now you need to
examine the plot produced by caverot to determine the area you
need your grid to cover and create a suitable &survexsuite; file yourself.
If you already have a mesh then a section of this can be used
for the grid, so that it gives surface shape if viewed from the
side.
</Para>

</Sect2>

<Sect2><Title>Import data from other programs</Title>

<Para>&survexsuite; supports a number of features to help with importing
existing data. You can specify the ordering of items on a line using *Data
(see &survexsuite; Keywords above), and you can specify the characters used
to mean different things using *Set (see &survexsuite; Keywords above).
</Para>

<Para>The Ignore and Ignoreall options to the *Data command are often
particularly useful, e.g. if you have a dataset with LRUD info or comments
on the ends of lines.
</Para>

<Sect3><Title>Changing Meanings of characters</Title>

<Para>e.g. if you have some data with station names containing the '?'
character (which is not permitted in a name by default), then the command:
</Para>

<programlisting>
*SET NAMES ?\</programlisting>

<Para>
specifies that question marks and backslashes are permitted in station names.
A-Z, a-z, and 0-9 are always permitted. '_' is also permitted by default,
but isn't in this example.
</Para>

<Para>If your data uses a comma ',' instead of a decimal point, then
you use
</Para>

<programlisting>
*SET DECIMAL ,</programlisting>

<Para>to specify that ',' is now the decimal separator instead of '.'.
</Para>

<Para>Note that there are plenty of ways you can use this facility to
completely confuse the software, as it may not be able to work out what is
going on, or it may simply be ambiguous. It can cope with some ambiguity (e.g.
the '-' character is used both for 'MINUS' and for 'OMIT'), but there are
limits. If you have a dataset that you can not make &survexsuite;
understand, then send it to us, and we will see what can be done.
</Para>

</Sect3>

<Sect3><Title>Other Converters</Title>

<Para>We have an Excel 5 macro for converting The Lotus 123 spreadsheets
used by the German survey software Cad F&uuml;r H&ouml;hlen into
&survexsuite; data files. Other converters may also come to be available.
These will normally be available via the
<ulink url="&survexwebsite;">&survexsuite; Web pages</ulink>.
</Para>

</Sect3>

</Sect2>

<Sect2><Title>Export data from &survexsuite;</Title>

<Para>The SVX2HTO and HTO2SVX programs are provided for import
and export functions. These convert &survexsuite; data files from/to
&hto; (Hierarchical tagged objects) data files. See the command
description for more details. Details of the spec are available
on-line via the CSG web pages.You can also just use the text format
files and make the changes needed for another piece of software
to understand the data, either by hand or other text-processing
tools. We are working on other export tools (Slowly!), so if you
have a particular need then contact us to see if we have anything
relevant.
</Para>

</Sect2>

<Sect2><Title>See errors and warnings that have gone off the screen</Title>

<Para>When you run &survexsuite; it will process the specified survey data
files in order, giving status information and errors, as well as
percentage-done info as it goes along, finishing off with its usual set of
statistics. You do not have to have very many files or errors before
information that you might want to see gets pushed off the top of the
screen. The number of errors and warnings given at the end of the run will
allow you to determine whether you missed any error messages.
</Para>

<Para>The best way to see all the text is to redirect &survexsuite;'s
output to a file, which you can do like so (which works for &msdos;,
&unix;, and &riscos;):
</Para>

<para><command/cavern cavename &gt; tmpfile/
</para>

<para>where 'tmpfile' is the name of the file you want the output to go
into. You can then look at the contents of the output file to see what
errors were generated. The last filename mentioned before an error is the
name of the file in which the error was encountered.
</para>

</Sect2>

<Sect2><Title>Create an Extended Elevation</Title>

<Para>Use the Extend program. This takes <filename/.3d/ files and
'flattens' them.  See 'Extend' for details.
</Para>

</Sect2>

</Sect1>

<Sect1><Title>Appendices</Title>
<?dbhtml filename="appendix.htm">

<Para>Files provided
</Para>

<Para>Command specification
</Para>

</Sect1>

<Sect1><Title>Mailing List</Title>
<?dbhtml filename="maillist.htm">

<!-- FIXME: rewrite this -->

<Para>We have both email and paper mailing lists for &survexsuite;, to
keep users informed of new versions and so forth.  This is available free
by e-mail, or by post for a small charge (to cover photocopying, disks,
and postage).  See the file MAILLIST.TXT for more details. If you do not
register, you will not receive automatic updates and information.
</Para>

</Sect1>

<Sect1><Title>Error Messages</Title>
<?dbhtml filename="errormsg.htm">

<Para>There are a number of error messages that you may get when processing
data.  Most of these are self explanatory, and will be caused by typing
mistakes, or by your survey data not being attached to fixed points. After
the error message telling you what has gone wrong, the offending line will
be printed, or the filename of a file that could not be found etc.  If the
error is in a line, &survexsuite; will highlight part of the line if it
thinks this makes sense.</Para>

<Para>When surveys are not all connected to fixed points, &survexsuite; will
list all the stations that are not connected.</Para>

<Para>The error messages (and other messages) are all contained in the file
messages(.txt) so the messages can be translated into other languages
without recompiling the program.</Para>

</Sect1>

<Sect1><Title>Future Developments</Title>
<?dbhtml filename="future.htm">

<Para>
We plan to bring &survexsuite; to version 1.0, and then start to develop
version 2.0.  Work on 1.0 will continue, but only bug-fixing and minor new
features.  More information on these plans is on the
<ulink url="&survexwebsite;">web site</ulink>.
</Para>

</Sect1>

<Sect1><title>Contacting the authors</title>
<?dbhtml filename="contact.htm">

<Para>We'd be delighted to hear how you get on with &survexsuite; and
welcome comments and suggestions for improvements.</Para>

<Para>If you want the latest version and don't have net access, please
enclose a suitably formatted floppy and an SAE.  These days, we'd probably
struggle to cope with anything other than 3.5" floppies.  &msdos; format is
easiest for us, but we should be able to manage &riscos;, ATARI or MAC
format.</Para>

<Address>
Wookey
<Street/734 Newmarket Rd/
<City/Cambridge/
<PostCode/CB5 8RS/
<Country/UK/
<Phone/Tel: 01223 504881 (home)/
<Phone/Tel: 01223 811679 (work)/
<Email/&wookeyemail;/
</Address>

<Para>or</Para>

<Address>
Olly Betts
<Street/6 Ashcroft Court/
<City/Cambridge/
<PostCode/CB4 2SN/
<Country/UK/
<Phone/Tel: 01223 513644 (home)/
<Email/&ollyemail;/
</Address>

<Para>Or if neither of these get any response try:</Para>

<Address>
Cambridge University Caving Club,
c/o James Hickson,
<Street>Pembroke College</Street>
<City>Cambridge</City>
<Country>UK</Country>
</Address>

<Sect2><title>Donations</title>

<Para>Monetary donations are welcome, but if you want a more personal way to
say thankyou we'd love a copy of a survey you've produced using
&survexsuite;.  Two copies would be best to save us arguing over who gets
it.</Para>

<Para>Or alternatively <emphasis>"Say it with code"</emphasis>.  If you're a
programmer and want to help out there's plenty to do, so feel free to join
in.</Para>
</Sect2>

</Sect1>

</Article>
