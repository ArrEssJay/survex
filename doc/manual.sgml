<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.1//EN" [
<!ENTITY ollyemail "olly@survex.com">
<!ENTITY wookeyemail "wookey@survex.com">
<!ENTITY survexwebsite "http://www.survex.com/">
<!ENTITY djgppwebsite "http://www.delorie.com/djgpp/">
<!ENTITY unix "UNIX">
<!ENTITY chasm "Chasm">
<!ENTITY linux "Linux">
<!ENTITY msdos "DOS">
<!ENTITY riscos "RISC OS">
<!ENTITY survexsuite "<Application>Survex</Application>">
<!ENTITY spud "<Application>Spud</Application>">
<!ENTITY wxwindows "<Application>wxWindows</Application>">
<!ENTITY cucc "<Acronym/CUCC/">
<!ENTITY arge "<Acronym/ARGE/">
<!ENTITY dpmi "<Acronym/DPMI/">
<!ENTITY svx "<filename>.svx</filename>">
<!ENTITY x3d "<filename>.3d</filename>">
<!ENTITY err "<filename>.err</filename>">
<!ENTITY pos "<filename>.pos</filename>">
]>
<!--
Add note that this is produced from an sgml master and that large
patches are better done on that...


interleaved data styles...


3dfile title:
defaults to a list of the leafnames of the &svx; files specified on the
command line (with any paths and extensions removed).

e.g.: cavern entrance.svx \data\2ndpart.svx

would give a surveytitle of 'entrance 2ndpart'.


FIXME todo:
mark-up of Windows Windows NT etc?
section on "design philosophy"

updated surface mesh info to suggest *fix-ing points

level sump fudge:

*begin
*data cartesian from to dx dy dz
*sd dx dy 100 metres
*sd dz 0.001 metres
; upstream - downstream
nuiping.gowiththeflow.129 dachao.upstream.105 0 0 0 ; last number is drop in height across the sump
*end

``Quick start'' section - lead people through entering and processing
a sample survey.  Take examples from surveying books and real surveys.


3dtopos...

there's a new
utility - 3dtopos - which takes a .3d file and produces a .pos file

<Para>This file contains a list of all the station positions (ordered x,y,z
[East, North, Up]) with complete names.

the stations are sorted such that numbers occur in the correct order
(so ``2'' before ``10'').  3dtopos even sorts numbers with a prefix
and/or suffix, so you'd get:

040.sv8
040.sv8a
040.sv8b
040.sv8c
040.sv9
040.sv10
040.sv11
40_entrance_tag
40b_entrance_tag

The intention is to give the order you'd expect, so if you find examples
where this isn't the case, let me know.



<Para>The other really important commands apart from *BEGIN, *END, and
*INCLUDE are *EQUATE and *FIX.
</Para>

<Para>*EQUATE is used to join surveys together, e.g.
</Para>

<programlisting>*equate entrance.6 adrian.1</programlisting>

<Para>
indicates that station 6 of the entrance survey was used as
the station 1 of the Adrian's Route survey.
</Para>

<Para>*FIX is for fixing points in space. E.g.
</Para>

<programlisting>
*fix 161.entrance.1    0  0  1780</programlisting>

<Para>fixes the 1st point of the 'entrance' survey at the coordinates
0 (east-west), 0 (north-south), 1780 (altitude).
</Para>

-->

<Article Status="draft" id=index>
 <ArticleInfo>
  <Title>&survexsuite; 0.99 Manual</Title>
  <AuthorGroup>
   <Author>
    <FirstName/Olly/
    <SurName/Betts/
    <AuthorBlurb><Para>
      Olly Betts wrote most of &survexsuite;.
    </Para></AuthorBlurb>
    <Affiliation>
     <Address><Email>&ollyemail;</Email></Address>
    </Affiliation>
   </Author>
   <Author>
    <SurName/Wookey/
    <AuthorBlurb><Para>
      Wookey is a small furry creature.
    </Para></AuthorBlurb>
    <Affiliation>
     <Address><Email>&wookeyemail;</Email></Address>
    </Affiliation>
   </Author>
  </AuthorGroup>
  <copyright>
   <year>1998-2001</year>
   <holder role="mailto:&ollyemail;">Olly Betts</holder>
  </copyright>
  <pubdate role="rcs">$Date: 2001-09-21 23:32:26 $</pubdate>
  <ReleaseInfo>$Id: manual.sgml,v 1.59 2001-09-21 23:32:26 olly Exp $</ReleaseInfo>
  <Abstract>
   <Para>
    This is the manual for &survexsuite; - an open-source software package for
    cave surveyors.
   </Para>
  </Abstract>
 </ArticleInfo>

<!--
This document also available for download in <a
href="http://www.survex.com/docs.html">various formats</a>.
-->

<Sect1><Title>Introduction</Title>
<?dbhtml filename="intro.htm">

<Para>&survexsuite; is a multi-platform open-source cave surveying
package.  It currently runs on &unix;, Microsoft Windows 95/98/NT/2000/ME,
&msdos;, and Acorn &riscos; machines.  MS Windows 3.1 users can use the
&msdos; version, or may be able to run the MS Windows version with
Win32s installed (though we've not tried this).</Para>

<!--
<Para>Porting to other platforms should be fairly easy.  The graphics
code in caverot would be the most work - the rest only requires an ANSI C
compiler plus a few details about the format of filenames and the like.
If you are interested in support for any other machine contact us and we
will try to help.</Para>
-->

<!-- with the windows installer, windows printer driver, and aven we
     do now have a GUI of sorts, so this next paragraph could be kinder
     on ourselves...
     FIXME
<Para>&survexsuite; has been designed to be a powerful and useful
survey-production tool. This focus on facilities and structure means that
less attention has so far been given to the user interface, so it does not
yet have nice menus, on-line help etc. - you will have to read the
instructions first! Version 2.0 will have windows and menus.</Para>
 -->

<Para>We are well aware that not everyone has access to super hardware
- often surveying projects are run on little or no budget and any
computers used are donated.  We aim to ensure that &survexsuite; is
feasible to use on low-spec machines, although you may not be able to
process vast cave systems, and some facilities may be
restricted. Please help us to achieve this by giving us some feedback
if you use &survexsuite; on a slow machine.</Para>

<Para>&survexsuite; is capable of processing extremely complex caves very
quickly and has a very effective, real-time cave viewer which allows
you to rotate, zoom, and pan the cave using mouse or keyboard. We have
tested it extensively using &cucc; and &arge;'s surveys of the caves
under the Loser Plateau in Austria (over 11,500 survey legs, and over
66km of underground survey data). This can all be processed in a few
seconds on a low-end <hardware>Pentium</hardware> machine.
Survex is also used by many other survey projects around the world,
including the 
<ulink url="http://milos2.zoo.ox.ac.uk/~oucc/draenen/draenenmain.htm"
>Ogof Draenen</ulink> survey, the 
<ulink url="http://www.easegill.org.uk/">Easegill</ulink> resurvey project,
the <Acronym/OFD/ survey, the 
<ulink url="http://milos2.zoo.ox.ac.uk/~oucc/reports/surveys/surveys.htm"
><Acronym/OUCC/ Picos expeditions</ulink>, and the 
<ulink url="http://www.survex.com/~erin/">Hong Mei Gui China
expedition</ulink>. <!-- FIXME more? --></Para>

<Para>&survexsuite; is still actively being worked on.  Version 1.0 will be
complete in some sense, but development will continue - initially in reshaping
Survex into a more integrated GUI package.</Para>

<Para>We encourage feedback from users on important features or problems,
which will help to direct future development. Contact addresses are near the
bottom of this document.</Para>

<!--
<Para>Because &survexsuite; is still being actively developed, this document
has an unfortunate tendency to lag slightly behind the capabilities of the
software. The latest version is now available on the web at <ulink
url="&survexwebsite;">&survexwebsite;</ulink> - check there for latest info.
</Para>
-->

<Sect2><Title>Other Documentation</Title>

<variablelist>
<varlistentry>
<term>NEWS or NEWS.txt</term>
<listitem><Para>a list of changes of interest to
&survexsuite; users, broken down by version number.  Consult this file
when upgrading to find out what has changed since the version you were
using previously.
</Para></listitem>
</varlistentry>

<varlistentry>
<term>ChangeLog or CHANGES.txt</term>
<listitem><Para>a much more detailed list of changes, aimed at developers
rather than end users.
</Para></listitem>
</varlistentry>

<varlistentry>
<term>BUGS or BUGS.txt</term>
<listitem><Para>a list of known bugs.
</Para></listitem>
</varlistentry>

<varlistentry>
<term>TODO or TODO.txt</term>
<listitem><Para>planned changes and enhancements.
</Para></listitem>
</varlistentry>

<varlistentry>
<term>INSTALL or INSTALL.txt</term>
<listitem><Para>instructions for installing &survexsuite;.  The
Microsoft Windows version comes packaged up with an installation wizard,
so this file doesn't exist there (you just run the package and follow
the on-screen instructions).
</Para></listitem>
</varlistentry>
</variablelist>

<!-- FIXME: other text files:
 AUTHORS COPYING HACKING OLDNEWS ZOMBIES
-->
 
</Sect2>

<Sect2><Title>Terminology</Title>

<Para>Throughout this document we use British terminology for
surveying.</Para>

<variablelist>
<varlistentry>
<term>station</term>
<listitem><para>a point in the cave that you survey from and/or to
</para></listitem></varlistentry>

<varlistentry>
<term>leg</term>
<listitem><para>a line joining two stations
</para></listitem></varlistentry>

<varlistentry>
<term>survey</term>
<listitem><para>a group of legs surveyed on the same trip
</para></listitem></varlistentry>

<varlistentry>
<term>node</term>
<listitem><para>when talking about the survey network, we talk about an
<emphasis>n</emphasis>-node to describe the number of connections to
a station.  So a 1-node is a station with only 1 leg to or from it
- i.e. The end of a passage or survey. A
2-node is a typical station along a passage with a survey leg coming
into it, and one going out.  A 3-node is a station with three legs
joining it, e.g. at a T-junction. And so on.
</para></listitem></varlistentry>

</variablelist>

</Sect2>

</Sect1>

<Sect1><Title>Getting Started</Title>
<?dbhtml filename="getstart.htm">

<Para>This section covers how to obtain the software, and how to unpack and
install it.</Para>

<Sect2><Title>Obtaining &survexsuite;</Title>

<Para>The latest version is available from the &survexsuite; website:
<ulink url="&survexwebsite;">&survexwebsite;</ulink>. If you do not
have internet access or would prefer to get a copy by post, we are
also happy to send out up-to-date copies on receipt of a formatted
floppy disk and a stamped, self-addressed envelope. See the end of this
document for addresses.</Para>

<Para>The details of installation depend greatly on what platform you
are using, so there is a separate section below for each platform.</Para>

<Sect3><Title>&linux;</Title>

<Para>
We supply pre-compiled versions for x86 &linux; machines in RPM format
(suitable for Redhat, Mandrake, and some other distributions)
and dpkg format (suitable for Debian and Debian-derived distributions).
</Para>

<Para>
You'll need root access to install these prebuilt packages.
If you don't have root access you will need to build from source
(see the next section).
</Para>

<Sect3><Title>Other versions of &unix;</Title>

<Para>For other &unix; versions you'll need to get the source code
and compile it on your system.  &survexsuite; uses GNU automake
and autoconf to streamline the compile process, so all you need to do
is unpack the sources, then simply type <userinput>./configure</userinput>
followed by <userinput>make</userinput> to build the programs and then
<userinput>make install</userinput> to install them.</Para>

<Note>
<Para>
If you're building to install in your home directory (for example
if you don't have root access on the machine you wish to install
&survexsuite; on) configure and build with
<userinput>./configure --prefix=/home/olly/survex</userinput> then
<userinput>make</userinput> to build and
<userinput>make install</userinput> to install.
</Para>
</Note>

<Para>
There's a GUI cave viewer called aven, which needs &wxwindows; to build,
which in turn needs either Motif or Gtk+.  If installing the required
libraries is a problem,
there's a more basic cave viewer called xcaverot which only needs the
standard X libraries.
</Para>

<!-- FIXME: recommend printps on &UNIX; (or just &linux;)??? -->

</Sect3>

<!-- FIXME: rather a long list now... -->
<Sect3><Title>Microsoft Windows 95/98/NT/2000/ME</Title>

<Para>
Unless you are using MS Windows 3.11 or earlier
we advise you use the native Win32
version which comes packaged with an installation wizard.  Just
run the downloaded package and let it lead you through the
installation process.
</Para>

<Para>
This version includes a GUI caverot replacement called aven, and a
Survex printer driver (printwin) which uses the Windows printer
system.
</Para>

<Para><!-- FIXME check up to date -->
The installer creates a Survex group in the start menu containing:
</Para>

<ItemizedList>

<ListItem><Para>Aven</Para></ListItem>

<ListItem><Para>Survex Help</Para></ListItem>

<ListItem><Para>Uninstall Survex</Para></ListItem>

</ItemizedList>

<Para>
Icons are installed for &svx;, &x3d;, &err;, and &pos; files.
Double-clicking on a &svx; file processes it to produce a &x3d; file.
Double-clicking the &x3d; file views it in aven.
You can also right click on the files to bring up a menu of other possible
actions.
</Para>

<!--
right click on svx:

open->notepad {default}
process->cavern

right click on 3d:

open->aven {default}
extend->extend
print->printwin
-->

</Sect3>

<Sect3><Title>Windows 3.1 and &msdos; (Intel 80386 or newer CPU)</Title>

<Para>For Windows 3.1 we suggest using the &msdos; version.
This version is compiled with the free DJGPP C compiler
(<ulink url="&djgppwebsite;">&djgppwebsite;</ulink>) which uses &dpmi;
to access memory above &msdos;'s 640k. Windows has &dpmi; services built in,
as do QEMM and Novell DOS 7.
For those situations where &dpmi; services aren't available, we
inlcude the free <filename>cwsdpmi.exe</filename>, which will be used
automatically if it's needed.</Para>

</Sect3>

<Sect3><Title>&msdos; (Intel 80286 or earlier CPU)</Title>

<Para>We also supply a version suitable for use on pre-386 machines. You
might wonder why - the reason is that many surveying projects have little
or no budget and can acquire such machines for free. This version is
suitable for caves up to medium size - a few thousand stations - which
typically equates to a few kilometres of survey.  A very loopy cave may
need more memory.
</Para>

<Para>This version is built with <Application/Borland C/.
One consequence is that the best way to force a program to
terminate is with <keycap/Ctrl-Break/. <keycap/Ctrl-C/ sometimes works,
but is less reliable.</Para>

</Sect3>

<Sect3><Title>&riscos;</Title>

<Para>
&survexsuite; for &riscos; comes in a zip archive.  Installation is
just a matter of opening the archive with
<application>!SparkPlug</application>,
<application>!SparkFS</application>, or
similar and dragging the contents to where you want them installed.
This version works with RISC OS 3.1 or newer.  We are unable to test
compatibilty with earlier operating system versions.
</Para>

</Sect3>

</Sect2>

</Sect1>

<Sect1><Title>Using &survexsuite;</Title>
<?dbhtml filename="using.htm">

<!-- FIXME: .log... -->

<!--
<Para>A complete specification of the &survexsuite; program commands is in
the commands appendix. This will tell you exactly what &survexsuite; can and
cannot do, however it is not easy to get an overall view of how to use the
program from that so below are general comments on the basic concepts of
&survexsuite; and typical ways of using the program.</Para>
-->

<Para>On Microsoft Windows and &riscos; &survexsuite; installs with
suitable file associations so that you can drive it from the GUI.
On &unix; and &msdos; you need to drive &survexsuite; from a command-line
prompt (or set some a filemanager or graphics shell).
</Para>

<Para>
There are three main programs:
</Para>

<ItemizedList>

<ListItem><Para>cavern: is the central data processing part of the
suite.  It turns survey data into coordinates (in a &x3d; file)
and writes out information about loop closures (in a &err; file).
</Para></ListItem>

<ListItem><Para>aven: cave viewer for visualising &x3d; files (on
&msdos; and &riscos; you get caverot instead).
</Para></ListItem>

<ListItem><Para>
printdm, printpcl, printps, prnthpgl, printwin: print processed data
to scale.  printwin is only available on Microsoft Windows and uses
the Windows printer driver systems - this is the recommended way to
print on Windows.
</Para></ListItem>

</ItemizedList>

<Para>Also supplied are several other useful utilities:</Para>

<ItemizedList>

<ListItem><Para>diffpos: compares the positions of stations in two
&x3d; files.
</Para></ListItem>

<ListItem><Para>extend: simplistic Extended Elevation processor.
</Para></ListItem>

</ItemizedList>

</Sect1>

<!-- FIXME: Installation -->

<!-- FIXME: Configuration -->

<Sect1><Title>Configuration</Title>
<?dbhtml filename="config.htm">

<Sect2><Title>Selecting a Language</Title>

<Para>Survex has extensive internationalisation capabilities.  The
language used for messages from Survex and most of the library calls it uses
can be changed.  By default this is picked up from the language the operating
system is set to use (from the MS Windows setting, or from
the <systemitem>LANG</systemitem> environment variable on Unix).
If no setting is found, International English is used.</Para>

<Para>
However you may want to override the language manually
(for example if Survex isn't available in your native language
you'll want to choose the supported language you speak best).
You'll also need to use this technique to set a language
on &msdos; (which has no standard way to set the language) and
&riscos; (where the numeric language codes used appear to be undocumented).
</Para>

<Para>
To do this, you set the
<systemitem>SURVEXLANG</systemitem> environment variable.  Here's a list
of the currently supported codes:</Para>

<informaltable frame="all">
<tgroup cols="2">
<thead>
<row><entry/Code/<entry/Language/</row>
</thead>
<tbody>
<row><entry/en/<entry/International English/</row>
<row><entry/en_US/<entry/US English/</row>
<row><entry/ca/<entry/Catalan/</row>
<row><entry/de/<entry/German/</row>
<row><entry/de_CH/<entry/Swiss German/</row>
<row><entry/de_DE/<entry/German German/</row>
<row><entry/es/<entry/Spanish/</row>
<row><entry/fr/<entry/French/</row>
<row><entry/it/<entry/Italian/</row>
<row><entry/pt/<entry/Portuguese/</row>
<row><entry/pt_BR/<entry/Brazillian Portuguese/</row>
</tbody>
</tgroup>
</informaltable>

<Para>Here are examples of how to set this environment variable to give
messages in French (language code fr):</Para>

<VariableList>
 <VarListEntry><Term>&msdos;</Term>
   <ListItem><Para>Put <SystemItem>SET SURVEXLANG=fr</SystemItem> in your
<filename>AUTOEXEC.BAT</filename> script.</Para></ListItem>
 </VarListEntry>
 <!-- FIXME: windows? -->
 <VarListEntry><Term>&unix; - csh/tcsh</Term>
   <ListItem><Para><userinput>setenv SURVEXLANG fr</userinput></Para></ListItem>
 </VarListEntry>
 <VarListEntry><Term>&unix; - sh/bash</Term>
   <ListItem><Para><userinput>SURVEXLANG=fr ; export SURVEXLANG</userinput></Para></ListItem>
 </VarListEntry>
 <VarListEntry><Term>&riscos;</Term>
   <ListItem><Para>Edit the <SystemItem>Set SURVEXLANG ...</SystemItem>
line in <filename>!Survex.!Run</filename> and 
change the value to the code for the language you want.</Para></ListItem>
 </VarListEntry>
</VariableList>

<Para>If &survexsuite; isn't available in your language, you could
help out by providing a translation.  The initial translation is
likely to be about a day's work; after that translations for
new or changed messages are occasionally required.  Contact us for details
if you're interested.</Para>

</Sect2>

</Sect1>

<Sect1><Title>Survex Command Line Conventions</Title>
<?dbhtml filename="cmdline.htm">

<!-- FIXME: bad style -->

<Sect2><Title>Command Line Options</Title>

<Para>All &survexsuite; programs respond to the following command line options:
</Para>

<VariableList>

<VarListEntry><Term>--help</Term><listitem><Para>
display this help and exit
</Para></listitem></VarListEntry>

<VarListEntry><Term>--version</Term><listitem><Para>
output version information and exit
</Para></listitem></VarListEntry>

</VariableList>

<Para>
Options have two forms: short (a dash followed by a single letter e.g.
<command/cavern -p/) and long (two dashes followed by one or more words e.g.
<command/cavern --percentage/).  The long form is generally easier to
remember, while the short form is quicker to type.  Options are often
available in both forms.
</Para>

<Note><Para>Command line options are case sensitive, so "-B" and "-b"
are different (this didn't used to be the case before Survex 0.90).  Case
sensitivity doubles the number of available short options (and is also the
norm on &unix;).
</Para></Note>

<Para>A file specified on the command line of any of the &survexsuite; suite
of programs will be looked for as specified.  If it is not found, then the
file is looked for with the appropriate extension appended.  So
<userinput>cavern survey</userinput> will look first for
<filename>survey</filename>, then for <filename>survey.svx</filename>.
</Para>

<Para>Filenames with spaces can be processed (provided your operating system
supports them - &unix; does, and so do recent versions of Microsoft
Windows).  You need to enclose the filename in quotes like so:
<userinput>cavern "Spider Cave"</userinput>
</Para>

</Sect1>

<Sect1><Title>Cavern</Title>
<?dbhtml filename="cavern.htm">

<Para>Cavern is the data processing engine of the suite.
</Para>

<Para>Syntax for simple use: <command/cavern &lt;survey data file&gt;/
</Para>

<Sect2><Title>Cavern Output</Title>

<Para>Cavern reads in text files containing the survey data
&svx;) and outputs two files, with the extensions
&x3d; and &err;.
By default these files are put in the current directory, 
with the same base filename as the first &svx; file read,
but a different extension.
You can change the directory and/or base filename using the --output
command line option.
<!-- FIXME: link --> 
</Para>

<Para>E.g. if you process the data file <filename>entrance.svx</filename>
with the command <userinput>cavern entrance</userinput> then the files
<filename>entrance.3d</filename> and <filename>entrance.err</filename>
will be created.
</Para>

<!-- mention .log FIXME -->

<Para>
Cavern also gives a range of statistics at the end of a successful run:
</Para>

<itemizedlist>
<listitem><para>The highest and lowest stations and the height difference
between them
</para></listitem>

<listitem><para>The total length of the survey (before and after
adjustment).  This total excludes survey legs flagged as SURFACE,
DUPLICATE, or SPLAY.
</para></listitem>

<listitem><para>The number of stations and legs.  Note that a *EQUATE
is counted as a leg in this statistic.
</para></listitem>

<!-- FIXME loops, components, anything else -->

<listitem><para>The East-West and North-South ranges, and the Northmost,
Southmost, Eastmost, and Westmost stations.
</para></listitem>

<listitem><para>The number of each size of node in the network (where size
is number of connections to a station) i.e. a one node is the end of a
dead-end traverse, a two-node is a typical station in the middle of a
traverse, a three-node is a T-junction etc.
</para></listitem>

<listitem><para>How long the processing took and how much CPU time was
used.
</para></listitem>
</itemizedlist>

<Sect3><Title>&x3d; - data describing the loop-closed centre line</Title>

<Para>This file contains details of the stations and legs, and any
flags associated with them.
</Para>

</Sect3>

<Sect3><Title>&err; - loop closure statistics (%age errors, etc)</Title>

<Para>This file contains statistics about each traverse in the survey
including the percentage error in each leg when it is part of a loop. You
should study this information to determine if any parts of the survey are of
lower quality or contain gross errors.

<!-- FIXME explain the various statistics -->
</Para>

</Sect3>

</Sect2>

<Sect2><Title>Cavern Command line Syntax</Title>

<cmdsynopsis>
    <command>cavern</command>
    <arg rep="repeat">options</arg>
    <arg rep="repeat">survex data file</arg>
</cmdsynopsis>

<!-- FIXME: brackets implied around each file -->

<!--
<Para>The command line is processed from left to right.
</Para>

<Sect3><Title>Brackets ( ... )</Title>

<Para>These allow the user to control the passing of settings from one
survey file to another. A '(' stores the current settings, which are then
restored by the corresponding ')'. This means that surrounding a filename by
brackets stops any settings (*SD values, *DATA styles, Calibration settings
etc.) changed from 'leaking' out. This also allows you to use your own
default settings file, like so:
</Para>

<Para>cavern Defaults ( SomeCave ) ( NewBit )
</Para>

<Para>A warning is given if you do not close as many brackets as you
open, or if you attempt to close brackets that you have not opened.
</Para>

-->

<Sect3><Title>Cavern Options</Title>

<VariableList>
<VarListEntry>
<Term>-p, --percentage</Term>
<ListItem>
<Para>You can get cavern to display the percentage progress through the
current file.  As of &survexsuite; 0.90 this is disabled by default, but you
can enable it if you want.  Because the value given is for the
<emphasis/current/ file, the values jump around for a multi-file survey
project. Also note that displaying this information slows down processing
a little.
<!-- FIXME: on a slow machine you'd probably rather it ran faster, and on a
fast machine you can't follow the change percentages.-->
</Para>
</ListItem>
</VarListEntry>

<VarListEntry>
<Term>-o, --output=OUTPUT</Term>
<ListItem>
<Para>Sets location for output files.
<!--FIXME elaborate this and other option descriptions.-->
</Para>
</ListItem>
</VarListEntry>

<VarListEntry>
<Term>-q, --quiet</Term>
<ListItem>
<Para>Only show a brief summary (--quiet --quiet or -qq will display
errors only).
</Para>
</ListItem>
</VarListEntry>

<VarListEntry>
<Term>-s, --no-auxiliary-files</Term>
<ListItem>
<Para>do not create .err file.
</Para>
</ListItem>
</VarListEntry>

<VarListEntry>
<Term>-w, --warnings-are-errors</Term>
<ListItem>
<Para>turn warnings into errors.
</Para>
</ListItem>
</VarListEntry>

<VarListEntry>
<Term>--log</Term>
<ListItem>
<Para>Send screen output to a .log file.
</Para>
</ListItem>
</VarListEntry>

<VarListEntry>
<Term>-x, --chasm-format</Term>
<ListItem>
<Para>Output data in chasm's 3dx format for use with Phil Underwood's
Chasm application.
</Para>
</ListItem>
</VarListEntry>

</VariableList>

</Sect3>

</Sect2>

</Sect1>

<!-- FIXME: gcc format error messages -->

<Sect1><Title>Caverot</Title>
<?dbhtml filename="caverot.htm">

<Para>Caverot reads the &x3d; files and displays the
results on screen, letting you control the view to understand the
cave.  Aven is a GUI caverot replacement which supports most of
caverot's mouse and keyboard controls but offers many additional
features.</Para>

<Sect2><Title>Syntax</Title>

<Para>Basic syntax is:
</Para>

<!-- FIXME: change to use GNU getopt -->

<cmdsynopsis>
    <command>caverot</command>
    <arg rep="repeat">.3d file</arg>
</cmdsynopsis>

<!-- FIXME: reword -->
<Para>More exactly, when specifying colours for the files read in it is:
</Para>

<cmdsynopsis>
    <command>caverot</command>
    <arg>-c&lt;col1&gt;,&lt;col2&gt;,...,&lt;coln&gt;</arg>
    <arg>&lt;file1&gt;.3d &lt;file2&gt;.3d ... &lt;filen&gt;.3d</arg>
</cmdsynopsis>

<Para>
The &msdos; version of caverot for 286 and earlier machines works with
a wide range of graphics cards, and typically provides resolutions up
to 640x480.  Usually two copies of the screen are used, and one is
drawn on while the other is displayed, to give smoother animation.
Where the hardware does not allow this you may notice a flickering or
flashing during movement which since you can see the screen being
redrawn.
</Para>

<Para>
The standard &msdos; version can work with higher resolution screen
modes, and always draws into a buffer which is then copied to the
screen.  It tries to pick a suitable screen mode, but if this fails
you can bring up a dialog to choose a screen mode from by using the
--mode-picker command line option.
<!-- FIXME fettle this in:
This version doesn't run well under NT.  NT limits access to the
graphics hardware, and emulates VGA, so the best resolution is
320x200.  There are also other niggles (e.g. on an NT 4 server,
the mouse works in the mode-picker, but not in caverot itself).
[If you're running NT use the MS Windows version which comes with a
more sophisticated cave viewer called aven.
-->
</Para>

<Para>
The &riscos; version will pick the highest resolution screen mode that
it can use two copies of the screen in, and that will work on the
monitor in use. It will also use three bank animation for an even more
flicker-free display if there is enough RAM.
</Para>

<Para>
CAVEROT reads in the data and then displays a help screen listing the
control keys/mouse buttons.  Hitting a key gives the default view.
This is a plan scaled to fit on the screen, with no labels or station
crosses. The view can be panned, rotated, zoomed, tilted, or set
spinning.  This should be fast enough to be almost instant with all
but the largest surveys on the slowest of hardware. Pressing
<keycap/H/ at any point will give you the help again.  <keycap/Escape/
exits the program.
</Para>

</Sect2>

<Sect2><Title>Colours and multiple data files</Title>
<!-- FIXME: move up? -->
<Para>Caverot can read in multiple data files and display them in separate
colours.
</Para>

<Para>The syntax is given above. E.g. <command/caverot -c2,6 cave.3d
surface.3d/ would display <filename/cave.3d/ in colour 2 and
<filename/surface.3d/ in colour 6. If you do not specify colours, a
predefined set is used.</Para>

<Para>Colour values range between 0 (black) and 255 (white) - experiment
to find which colours you like.
</Para>

<Para>Note that there is no perspective in the view. This means that
it is impossible to tell which way round a cave is rotating, or
whether you are viewing something from behind, or in front. So
if you think the direction of rotation in wrong, or changes as
you watch, this is just your brain being confused, not a bug!
</Para>

</Sect2>

<Sect2><Title>Mouse control</Title>

<Para>
The best way to move the cave is with the mouse. If you hold down the
right button then the cave is dragged when you move the mouse. If you
hold down the left button, then the cave is rotated if you move left
or right, and zoomed if you move up and down.
</Para>

<Para>
By default the mouse moves the cave, but if you press <keycap/Ctrl-R/,
then the mouse will move the viewpoint instead (i.e. everything will
go in the opposite direction. This seems more natural to some people.
If your mouse has a middle button (and it is recognised by your mouse
driver) then you can use it to tilt the cave.
</Para>

</Sect2>

<Sect2><Title>Keyboard Control</Title>

<Para><keycap/P/ and <keycap/L/ select Plan and eLevation
respectively.  Changing between plan to elevation is animated to help
you see where you are and how things relate. This animation is
automatically disabled on slow machines to avoid user frustration.
</Para>

<Para>
Comma <keycap/,/, and Slash <keycap>/</keycap> tilt up
and down respectively. Tilt goes 180 degrees from plan view to a view
from directly below (upside down plan).
</Para>

<Para>
Enter starts the cave spinning, and <keycap/Space/ stops it. The
speed of rotation for this, and tilt, is controlled by <keycap/Z/ and
<keycap/X/.
</Para>

<Para>Crosses and/or labels can be displayed at survey stations.
<keycap/Ctrl-X/ toggles crosses and <keycap/Ctrl-N/ station names.
<keycap/Ctrl-L/ toggles the display of survey legs.
</Para>

<para>By default, labels and crosses are not redrawn during
movement, to improve responsiveness.  With a small cave, or a fast
computer, you can enable redraw of everything during movement with
<keycap/Ctrl-A/.  <keycap/Ctrl-O/ toggles whether all names are
displayed, or only non-overlapping ones.
</para>

<para><keycap/Delete/ is useful if you get lost - it resets the scale,
position, and rotation speed, so that the cave returns to the centre
of the screen. There are also keyboard controls to use instead of the
mouse - <keycap/Shift/ helps here as it accelerates all movements:
</para>

<screen>
<keycap/Z/, <keycap/X/ : Faster/Slower Rotation
<keycap/R/: Reverse direction of rotation
<keycap/Enter/, <keycap/Space/: Start and stop auto-rotation
<keycap/C/, <keycap/V/: Rotate cave one step clockwise/anti-clockwise
<keycap/'/ , <keycap>/</keycap>: Higher/Lower Viewpoint
<keycap/]/ , <keycap/[/: Zoom in/Out
<keycap/U/, <keycap/D/: Set view to Up/Down
<keycap/N/, <keycap/S/, <keycap/E/, <keycap/W/: Set view to North, South, East, West
<keycap/Delete/: Reset to default scale, rotation rate, etc
<keycap/P/, <keycap/L/: Plan, Elevation
<keycap/Cursor Left/, <keycap/Cursor Right/: Pan survey Left/Right (on screen)
<keycap/Cursor Up/, <keycap/Cursor Down/: Pan survey Up/Down (on screen)
<keycap/Ctrl-N/: Toggle display of station names
<keycap/Ctrl-X/: Toggle display of crosses at stations
<keycap/Ctrl-L/: Toggle display of survey legs
<keycap/Ctrl-F/: Toggle display of surface legs
<keycap/Ctrl-A/: Toggle display of All/skeleton when moving
<keycap/O/: Toggle display of non-overlapping/all names
<keycap/Ctrl-R/: reverse sense of controls
<keycap/Escape/: quit program
<keycap/Shift/: accelerates all movement keys
<keycap/H/:  help screen giving these controls
</screen>

<Para>A little experimentation should give a better understanding of how
this works.
</Para>

<Para>There is an auto-resizing scale bar on the left side of the screen.
This varies in length as you zoom in or out.  The current length is given
just below the bearing. In the top left corner the current direction of view
(for elevations), or direction up the screen (for plans) is
displayed. In the top right is a compass pointer showing which way
is North, and in the bottom right is a clino pointer showing the angle
of tilt.
</Para>

<!-- FIXME:
<Para>Note that Extended Elevations (which are always totally flat
east-west) are noticed by caverot, and it will prevent their being
rotated, as this is meaningless.
</Para>
-->

</Sect2>

</Sect1>

<Sect1><Title>Printer Drivers</Title>
<?dbhtml filename="printer.htm">

<Para>These read &x3d; files and print out the results on
various sorts of printer/plotter.</Para>

<!-- some duplication with above -->

<Sect2><Title>Commands</Title>

<Para>PRINTDM for 8, 9, and 24 pin Epson-compatible dot-matrix
printers.  You need to edit the <filename/print.ini/ file to specify
which you are using. The 9 pin dump is about 10% faster than the 8
pin, but some old printers will not support it.  PRINTDM should also
work with IBM ProPrinters.
</Para>

<Para>PRINTPCL for printers that use Hewlett Packard's <Acronym/PCL/
(Printer Control Language), which means Deskjets, Laserjets (i.e. most
Inkjets and Laser printers). </Para>

<Para>PRINTPS for Postscript printers and plotters.
</Para>

<Para>PRNTHPGL for HPGL plotters.
</Para>

<Para>PRINTWIN for printing using the Microsoft Windows printer system.
</Para>

<Para>Except for PRINTWIN, these all use the configuration file <filename/print.ini/, which
sets various features for each printer. See 'Printer Settings'
below. Even if your printer is not standard you should be able get it
to work by editing these files.
</Para>

<Para>To get plots that are properly to scale from PRINTDM you
<emphasis/must/ measure the output from <emphasis/your/ printer - 
see `Printer Calibration' below.
</Para>

</Sect2>

<Sect2><Title>IMPORTANT NOTE FOR &msdos; USERS</Title>

<caution>
<Para>printdm, printpcl and prnthpgl all produce binary files.  If
output from these is sent to a file, the file
<emphasis>must</emphasis> then be sent to the printer with
<userinput>COPY /B OUTPUT PRN</userinput> where OUTPUT is the filename and
PRN the device name.  Do <emphasis>not</emphasis> use COPY without the
/B.  If you do, the output may be corrupted. Sorry, this is a problem
with &msdos;, and there is nothing we can do about it.</Para>
</caution>

<Para>If you send output straight to the printer, by putting <filename/PRN/
or <filename/LPT1/ in the configuration file, then this problem should not
occur.</Para>

<Para>printps produces text files as output, and so should be unaffected by
this.
</Para>

</Sect2>

<Sect2><Title>Syntax</Title>

<Para>The syntax of the commands is the same in each case. The command line
options are:
</Para>

<variablelist>
<varlistentry><term>--survey=SURVEY</term>
<listitem><para>Only load the sub-survey SURVEY</para></listitem></varlistentry>

<varlistentry><term>-e, --elevation</term>
<listitem><para>select elevation</para></listitem></varlistentry>

<varlistentry><term>-p, --plan</term>
<listitem><para>select plan view</para></listitem></varlistentry>

<varlistentry><term>-b, --bearing=BEARING</term>
<listitem><para>set bearing</para></listitem></varlistentry>

<varlistentry><term>-t, --tilt=TILT</term>
<listitem><para>set tilt</para></listitem></varlistentry>

<varlistentry><term>-s, --scale=SCALE</term>
<listitem><para>set scale</para></listitem></varlistentry>

<varlistentry><term>-n, --station-names</term>
<listitem><para>display station names</para></listitem></varlistentry>

<varlistentry><term>-c, --crosses</term>
<listitem><para>display crosses at stations</para></listitem></varlistentry>

<varlistentry><term>-B, --no-border</term>
<listitem><para>turn off page border.
Without this option dotted borders will be drawn on the
sides where pages join. This is to facilitate accurate cutting with
scissors.
</para></listitem></varlistentry>

<varlistentry><term>-l, --no-legs</term>
<listitem><para>turn off display of survey legs</para></listitem></varlistentry>

<varlistentry><term>-S, --surface</term>
<listitem><para>turn on display of surface survey legs. By default only
underground survey legs are shown.</para></listitem></varlistentry>

<varlistentry><term>-k, --skip-blanks</term>
<listitem><para>don't output blank pages
(only works for printdm and printpcl at present).
With this option pages which are blank (apart from the alignment marks)
will not be printed.  This option implies --no-border.
</para></listitem></varlistentry>

<varlistentry><term>-o, --output=OUTPUT<term>
<listitem><para>set output file (ignored by printwin).
</para></listitem></varlistentry>

</variablelist>

</Sect2>

<Sect2><Title>Using the Drivers</Title>

<Para>
When you run the printer driver you will be asked if you want a
plan or elevation (enter <keycap/P/, or <keycap/E/) - the default is
plan. Then enter values for the desired plot view. These values
correspond to those displayed in the top left hand corner when using
caverot. You would usually use CAVEROT to pick the best view and then
note the angles before running the Printer Driver. This will
eventually be integrated.
</Para>

<Para>
For a plan enter bearing up the page, in degrees, 0 indicating North
at the top of the page (the default).
</Para>

<Para>
For an elevation enter the angle of view (i.e. the compass bearing
from which the scene is viewed), and angle of tilt, where 0 is
horizontal, - is looking down from above, and + is looking up from
below, so -90 is the same as plan view.
</Para>

<Para>
For an extended elevation, no viewing angles are needed.
</Para>

<Para>You'll be told the scale needed to fit the plot on one page, and
be asked what scale you want to use. The you're told how many
pages this will take (and the arrangement of those pages (e.g. 6 pages
(2x3)) and have the opportunity to print, quit, or change the scale (so
you can repeat this process until you have a scale and number of pages
you are happy with).
</Para>

<Para>You can then print all the pages, a range of pages, or any arbitrary
list of pages and ranges (handy for when your printer mangles a page).
</Para>

</Sect2>

<Sect2><Title>Printer Settings</Title>

<Para>The format of the
<filename>print.ini</filename>/<filename>myprint.ini</filename>
file is similar to Windows <filename/.ini/ files.
There is a section name in square
brackets, e.g.:
</Para>

<programlisting>[generic_PCL]</programlisting>

<Para>and there are some options and settings below that of the form
</Para>

<Para>&lt;option&gt;=&lt;setting&gt;
</Para>

<Para>e.g.:</Para>

<programlisting>pixels_across_page=960</programlisting>

<Para>below each of this options is usually a comment (indicated by a
semicolon ';') saying what the option above is for. The codes needed by dot
matrix printers are given as they are usually shown in manuals. The
backslash '\' indicating that the following character is to be interpreted
as a control code so \[ means send the value 27 decimal which is 1B hex,
also called 'ESC' for Escape. If the backslash is followed by a small x and
two hex digits - e.g \x0c, then that means send the code 0C hex, which is 12
decimal, also called LF for LineFeed. This is all inherently rather
cryptic, but the provided set-ups will work with nearly all dot matrix
printers, so you are unlikely to need to fiddle with these runes.
</Para>

<Para>
The only thing most users will have to specify is the output device
(and Calibration for Dot Matrix Printers, see 'Printer Calibration').
This is the setting given in the [base] section of the form
output_&lt;platform&gt=&lt;device&gt;, where device can be a device name
(e.g. PRN, LPT1, LPT2 under &msdos;, <filename/Printer:/ under &riscos;) or a
filename. Under &unix; output may be piped into another command like
so:
</Para>

<programlisting>
[base]
output_unix=|lpr -Poak
; send output to printer 'oak'</programlisting>

<Para>
Any name given which is not recognised as a device will generate a
file of that name, containing the exact data that would be sent to the
printer. This can then be send to a printer later (See the note above
from &msdos; users). You can override the output setting using the
--output command line option.
</Para>

<Para>Each type of printer has its own section. The basic types provides
are:
</Para>

<Para>[DM] (for Dot Matrix, PRINTDM).[HPGL] (for HPGL plotters, PRNTHPGL),
[PCL] (for PCL printers PRINTPCL), and [PS] (for Postscript printers), and
for each of these types at least one specific example is provided, for the
specified printer and paper size.
</Para>

<!-- FIXME: check this -->

<Para>The examples provided are: [dm_8pin_a4] [dm_8pin_11inch],
[dm_8pin_12inch], [dm_9pin_11inch], [dm_9pin_12inch], [dm_24pin_a4],
[dm_24pin_11inch], [dm_24pin_12inch], [dm_panasonic_24pin],
[dm_epsonlx86_9pin_11inch]
</Para>

<Para>[hpgl_generic_a4landscape], [hpgl_generic_A1landscape],
[hpgl_generic_A0landscape]
</Para>

<Para>[pcl_generic_a4], [pcl_modern_a4]
</Para>

<Para>[ps_generic_a4]
</Para>

<Para>The idea is that your printer can be defined in terms of an existing
one, using the 'like' option. This makes the settings for the specified
printer include the settings specified in the 'like' section, except where
they are overridden by new settings in this section. The syntax is
Like=&lt;definition name&gt;, where definition name must have been
previously defined in the file.
</Para>

<Para>Here is an example of how it works:
</Para>

<programlisting>
[dm_9pin_12inch]
Like=dm_11inch_9pin
Lines_down_page=108</programlisting>

<Para>So this means that the definition 'dm_9pin_12inch', i.e. 9pin dot
matrix printer using 12 inch paper, is just like the 11 inch definition for
the same printer, except for the number of lines down a page.
</Para>

<!-- FIXME: fettle this -->
<Para>If you find that your printout does not come out correctly, then the
best way to make changes for your printer is to create a new section called
[my_printer], and start with a like=something where something is the closest
section to your printer. Then add new options to override the ones that are
not correct for your printer. Finally you need to change the section for the
type of printer you are using to point to your new definition. E.g. if you
are using a dot-matrix printer then you need to change the [DM] section to
say like=my_printer .
</Para>

<Para>Note that if you are using a PCL printer the defaults are set
not to use advanced printer features for compatibility. If you want to
try these (equivalent to HP laserjet III or later), then you should
change the [PCL] section to say like=modern_pcl_a4 . This will enable
horizontal and vertical tabbing.
</Para>

</Sect2>

<Sect2><Title>Printer Calibration</Title>

<!-- FIXME: allow scaling for all drivers? add - - test-page option? -->

<Para>
Dot Matrix printers do not print to an accurate size - you need to do
to calibrate your printer in order to get correctly-scaled
plots.  Print out a calibration plot using
<command>printdm --calibrate</command> and measure the width and height
of the page border.
</Para>

<Para>
Then create an entry in <filename>/etc/print.ini</filename> or
<filename>.survex/print.ini</filename> in your home directory (Unix)
or <filename>myprint.ini</filename>
in the installation directory (other platforms) with 
entries mm_across_page and mm_down_page containing your values.
The entry should look something like this:
</Para>

<programlisting>
[dm]
like=dm_8pin_a4
mm_across_page=204.5
mm_down_page=278</programlisting>

<Para>
Then run <command>printdm --calibrate</command> again, and check that
the square is now 10cm wide and high.  This calibration is
particularly necessary for older dot-matrix printers as they vary
significantly in scaling - even between two printers of the same make
and model.
</Para>

</Sect2>

</Sect1>

<Sect1><Title>Other Utilities</Title>
<?dbhtml filename="utils.htm">

<Para>There are a number of other utilities available which can help with
specific tasks.</Para>

<Sect2><Title>Extend</Title>

<Para>Syntax: <command/extend &lt;input imagefile&gt; [&lt;output imagefile&gt;]/
</Para>

<Para>extend takes a &x3d; file and generates an extend elevation from
it.  It starts with the highest station marked as an entrance which
has at least one underground survey leg attached to it.  If there are
no such stations, the highest deadend station in the survey (or the
highest station if there are no deadends) is used.  Extend puts the#
first station on the left, then folds each leg out individually to the right,
breaking loops arbitrarily (usually at junctions).</Para>

<Para>
This approach suffices for simple caves or sections of cave.
for more complicated situations human intervention is required -
try &chasm;'s extended elevation editor (which we plan to integrate
into Survex in the future).</Para>

<Para>If the output filename is not specified, extend writes its
output to <filename/extend.3d/.</Para>

</Sect2>

<Sect2><Title>DiffPos</Title>

<Para>Syntax: <command/diffpos &lt;posfile1&gt; &lt;posfile2&gt; [&lt;threshold&gt;]/
</Para>

<Para>diffpos compares the contents of the two specified
&x3d; files. It will tell you about stations which
are in one file but not the other, and also stations which have moved
by more than a specified threshold distance in X, Y, or Z.  The
threshold distance is given in metres and defaults to 0.01m if not
specified.
</Para>

<Para>
For backward compatibility diffpos will also read the
&pos; files produced by earlier versions of cavern, or by 3dtopos.
</Para>

</Sect2>

<Sect2><Title>Cad3d</Title>

<Para>
Syntax: <command/cad3d &lt;datafile&gt;/
</Para>

<Para>Cad3d converts a &x3d; file
into a format which can be read by a CAD or drawing package.
Currently it can produce DXF files or Sketch files.
<!-- FIXME: more info -->
</Para>

<Para>An alternative to cad3d is SpeleoGen, which can be found in the
"Related Tools" section of the Survex web site. <!--FIXME: url-->
SpeleoGen is a Windows (3.1/95/NT) utility which reads in
&survexsuite; &x3d; files, LRUD passage wall data (in <filename/.cav/ format)
and surface topography info in <filename/.csv/ format.  The results are
combined, displayed, and saved out as a DXF file for import into
CAD or drawing packages.
</Para>

</Sect2>

</Sect1>

<Sect1><Title>&survexsuite; data files</Title>
<?dbhtml filename="datafile.htm">

<Para>Survey data is entered in the form of text files. You can use any
text editor you like for this, so long as it has the capability of
writing a plain ASCII text file. The data format is very flexible;
survey legs don't need to be listed in any special order, and the ordering 
of instrument readings on each line is specifiable.  So you can enter
your data much as it appears on the survey notes, which is important
in reducing the opportunities for error.
</Para>

<Para><!--FIXME rewrite this para-->
Also all the important characters are user-definable so the separators can be
spaces and tabs, or commas (e.g.  when exporting from a
spreadsheet). The decimal point can be a slash (for clarity), a comma
(as used in continental Europe), or anything else you care to choose.
This flexibility
means that it should be possible to read in data from almost any sort of
survey data file.
</Para>

<Para>&survexsuite; places no restrictions on you in terms of the ordering
of survey legs. You can enter or process data in any order and &survexsuite; will
read it all in before determining how it is connected. You can also use the
hierarchical naming so that you do not need to worry about using the same
station name twice.
</Para>

<!-- FIXME don't encourage separate processing -->
<Para>The usual arrangemnt is to have one file which lists all the others
that are included (e.g., <filename/161.svx/). Then
<command/cavern 161/ will process all your data. To just process a
section use the filename for that section, e.g. <command/cavern dtime/
will process the dreamtime file/section of Kaninchenh&ouml;hle.  To
help you out, if all legs in a survey are connected to one another
but the survey has no fixed points, cavern
will 'invent' a fixed point and print a warning message to this
effect.
</Para>

<Para>It is up to you what data you put in which files but it obviously
makes sense to put related survey data in the same file.  You
can have one file per trip, or per area of the cave, or just one
file for the whole cave if you like.
</Para>
<!-- FIXME: wook sez:

 Point out in documentation that file structure and survey structure don't
 have to be the same.  And in particular that folder/directory names can be
 different.

Which is partly covered above, though the last bit isn't... 
-->

<Sect2><Title>Readings</Title>

<Para>Blank lines (i.e. lines consisting solely of &lt;BLANK&gt; characters)
are ignored. The last line in the file need not be terminated by
an end of line character. All fields on a line must be separated
by at least one &lt;BLANK&gt; character. An &lt;OMIT&gt; character
(default '-') indicates that a field is unused. If the field is
not optional, then an error is given.
</Para>

</Sect2>

<Sect2><Title>Survey Station Names</Title>

<Para>Station names may contain any alphanumeric characters and
additionally any characters in &lt;NAMES&gt; (default `_' and `-'). Alphabetic
characters may be forced to upper or lower case by using the *case
command. Station names may be any length - if you want to only treat
the first few characters as significant you can get cavern to truncate
the names using the *truncate command.
</Para>

</Sect2>

<Sect2><Title>Numeric fields</Title>

<Para>[&lt;MINUS&gt;|&lt;PLUS&gt;] &lt;integer part&gt; [ &lt;DECIMAL&gt;
[ &lt;decimal fraction&gt; ] ]
</Para>

<Para>
or [&lt;MINUS&gt;|&lt;PLUS&gt;] &lt;DECIMAL&gt; &lt;dec fraction&gt;
</Para>

<Para>
i.e. optional &lt;PLUS&gt; or &lt;MINUS&gt; sign in front, with
optional &lt;DECIMAL&gt; character (default '.'), which may be
embedded, leading or trailing. No spaces are allowed between the
various elements.
</Para>

<Para>
All of these are valid examples: +47, 23, -22, +4.5, 1.3, -0.7, +.15, .4,
-.05
</Para>

</Sect2>

<Sect2><Title>Accuracy</Title>

<Para>Accuracy assessments may be provided or defaulted for any survey
leg. These determine the distribution of loop closure errors over the
legs in the loop. See *SD for more information.
</Para>

</Sect2>

<!--
<Sect2><Title>Survey Coordinate Range</Title>

<Para>
If we store distances to nearest 10um (0.01mm) in 4 bytes, this
gives a range of ~20 km. This method is currently not used, but
has several advantages (data storage space [double uses 8 bytes
- with my C compiler], speed (unless your FP chip works in parallel
with your CPU [e.g. the new Acorn FPU for the ARM], and numerical
accuracy [compared to using floats at least]) and so may be adopted
in future). Nearest 0.1mm gives -200 km, which is enough for most
people, but may mean rounding errors become significant. 
</Para>

<Para>
I will have to do some sums...
</Para>

</Sect2>

-->

<Sect2><Title>cavern Commands</Title>

<Para>Commands in &svx; files are introduced by an asterisk
(by default - this can be changed using the <command/set/ command).
</Para>

<Para>The commands are documented in a common format:
</Para>

<itemizedlist>
<listitem><para>Command Name</para></listitem>
<listitem><para>Syntax</para></listitem>
<listitem><para>Example</para></listitem>
<listitem><para>Validity</para></listitem>
<!-- FIXME
anywhere, in a block, at start of a block, after a begin (for *end)
-->
<listitem><para>Description</para></listitem>
<listitem><para>Caveats</para></listitem>
<listitem><para>See Also</para></listitem>
<!-- FIXME
"Usefulness" - or status maybe?
deprecated, esoteric (*set), useful, vital
-->
</itemizedlist>

<Sect3><Title>BEGIN</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*begin [&lt;survey&gt;]</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*begin littlebit
1 2 10.23 106 -02
2 3  1.56 092 +10
*end littlebit</programlisting>

<programlisting>
; length of leg across shaft estimated
*begin
*sd tape 2 metres
9 10 6.   031 -07
*end</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>*begin stores the current values of the current settings
such as instrument calibration, data format, and so on.
These stored values are restored after the corresponding *end.
If a survey name is given, this is used inside the *begin/*end block,
and the corresponding *end should have the same survey name.
*begin/*end blocks may be nested to indefinite depth.
</Para></listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<VarListEntry><Term>See Also</Term>

<listitem><Para>*end, *prefix</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>CALIBRATE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem>
<Para>*calibrate &lt;quantity list&gt; &lt;ZeroError&gt; [&lt;Scale&gt;]
</Para>
<Para>*calibrate default
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*calibrate tape +0.3
</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem>

<Para>
*calibrate is used to specify instrument calibrations.
</Para>

<Para>
&lt;quantity&gt; is one of TAPE|COMPASS|CLINO|COUNTER|DEPTH|DECLINATION|X|Y|Z
</Para>

<Para>
Several quantities can be given in &lt;quantity list&gt;
</Para>

<Para>
Value = ( Reading - ZeroError ) * Scale    (Scale defaults to 1.0)
</Para>

<Para>
You need to be careful about the sign of the ZeroError. It is
the amount needed to correct the reading you got to Zero. This
means that if your tape measure has the end missing, and you are
using the 30cm mark to take all measurements from, then you can
correct it with:
</Para>

<programlisting>*CALIBRATE tape +0.3</programlisting>

<Para>If you tape was too long, starting at -20cm (it does happen!)
then you can correct it with:
</Para>

<programlisting>*CALIBRATE tape -0.2</programlisting>

<Para>Note: ZeroError is irrelevant for Topofil counters and depth
gauges since pairs of readings are subtracted.
</Para>

<Para>
The magnetic deviation varies from year to year and it is often
desirable to keep the compass zero error and the magnetic deviation
separate. cavern calculates the true bearing as follows:
</Para>

<Para>
(magnetic bearing) = ((reading)-(compass zero err)) * (compass
scale factor)
</Para>

<Para>
(true bearing) = ((bearing)-(declination zero err))
</Para>

<Para>
The scale factor for DECLINATION must be 1.0, otherwise an error
is given.
</Para>

<Para>
The default is all quantities calibrated to scale factor 1.0,
zero error 0.0
</Para>

</listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<VarListEntry><Term>See Also</Term>

<listitem><Para>*units</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>CASE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><para>*case preserve|toupper|tolower</para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*begin bobsbit
; Bob insists on using case sensitive station names
*case preserve
1 2   10.23 106 -02
2 2a   1.56 092 +10
2 2A   3.12 034 +02
2 3    8.64 239 -01
*end bobsbit</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>*case determines how the case of letters in survey names is
handled.  By default all names are forced to lower case (which gives a case
insensitive match, but you can tell cavern to force to upper case, or leave
the case as is (in which case '2a' and '2A' will be regarded as different).
</Para></listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<!-- <VarListEntry><Term>See Also</Term>

<listitem><Para>*end, *prefix</Para></listitem>

</VarListEntry>
-->

</VariableList>

<!-- FIXME - work this text in here or elsewhere

What I mean (though failed to express very well) is that a dataset without
this information isn't the same dataset (in general anyway).  For example:

A1 a2 10.32 140 -05
a2 a3  4.91 041 -01
a1 a3  7.01 206  02

is either a traverse of 3 legs or a (probably badly misclosed) loop.  If
these names are on the original survey notes, the surveyors ought to say
whether "A1" is the same as "a1" (although the usual case for using this
feature is probably for importing data from elsewhere).  Similarly for
truncation.  Whether a clino of +/-90 degrees (or +/-100 grad, etc) is
interpreted as a plumb is something that should have been noted in the cave
(unless it's implicit because it's standard practice for a survey project).

It's a similar issue to calibration data in many ways.  You can argue it's
not part of "the survey", but without it the survey won't be the same shape,
and it's not useful to process the same survey with different settings for
compass calibration or name case sensitivity.

>Clearly that is unhelpfully strict, but it is
>important to be semantically clear about what is 'data' and what is 'commands
>or meta-data' which describe what to do with/how to interpret that data.

Think of the lines starting with a "*" as "command or meta-data".

>The most-correct solution to this is (I beleive) Martin Heller's idea about
>including 'rules' in the datastream, but that's too big a subject for right
>now.
>
>The reason '-C' was made into a command-line option, was that it made very
>little sense to change it part way though a dataset. What exactly happens if
>you suddenly tell cavern to become case-sensitive halfway through a run?

-C has always had 3 settings - "leave case alone", "force to lower", and
"force to upper".  It doesn't really mean "case sensitivity" but rather
something like "case processing".  So you can usefully change it during a
run.  So if my dataset treats "NoTableChamber" (so named because it was
lacking in furniture) as different from "NotableChamber" (which was notable
for other reasons) I can process it with a dataset from someone else which
needs to be treated as case insensitive like so:

*begin my_cave
*include my_dataset
*end my_cave

*equate my_cave.NoTableChamber.14 your_cave.linkpassage.13

*begin your_cave
*case tolower
*include your_dataset
*end your_cave

You may be thinking of -U<n>, which used to mean "only compare the first n
characters of station names", but that doesn't allow arbitrary datasets to
be processed together.

So we changed it to mean "truncate station names to n characters", and
allowed it to be changed at any point, rather than being set once for the
whole run.

-->

</Sect3>

<Sect3><Title>COPYRIGHT</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*copyright &lt;date&gt; &lt;text&gt;</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*begin littlebit
*copyright 1983 CUCC
1 2 10.23 106 -02
2 3  1.56 092 +10
*end littlebit</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Validity</Term>

<listitem><Para>valid at the start of a *begin/*end block.
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>*copyright allow the copyright information to be
stored in a way that can be automatically collated.
</Para></listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<VarListEntry><Term>See Also</Term>

<listitem><Para>*begin</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>DATA</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*data &lt;type&gt; &lt;ordering&gt;</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*data normal from to compass tape clino</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
&lt;type&gt; = DEFAULT|NORMAL|DIVING|CARTESIAN|TOPOFIL|CYLPOLAR|NOSURVEY
</Para>

<Para>
&lt;ordering&gt; = A selection from one the following:
</Para>

<Para>
DEFAULT
</Para>

<Para>
NORMAL FROM TO LENGTH <!--[BACK]-->BEARING <!--[BACK]-->GRADIENT
</Para>

<Para>
DIVING FROM TO LENGTH <!--[BACK]-->BEARING FROMDEPTH TODEPTH
</Para>

<Para>
CARTESIAN FROM TO NORTHING EASTING ALTITUDE
<!--FIXME: dx dy dz-->
</Para>

<Note><Para>
Cartesian data are relative to <emphasis>true</emphasis> North not
<emphasis>magnetic</emphasis> North (i.e. they are unaffected by
<command>*calibrate declination</command>).
</Para></Note>

<Para>
TOPOFIL FROM TO FROMCOUNT TOCOUNT <!--[BACK]-->BEARING <!--[BACK]-->GRADIENT
</Para>

<Para>
CYLPOLAR FROM TO TAPE <!--[BACK]-->BEARING FROMDEPTH TODEPTH
</Para>

<Para>
NOSURVEY FROM TO
</Para>

<!-- FIXME: LRUD not yet implemented
<Para>
(LRUD STATION [LEFT] [RIGHT] [UP] [DOWN])
</Para>
-->

<Para>
Also, IGNORE skips a field (it may be used any number of times),
and IGNOREALL may be used last to ignore the rest of the line.
</Para>

<Para>
DEPTH for diving data and cylpolar data increases upwards by default
(so it is actually altitude).  You can use *CALIBRATE with a negative
scale factor of -1.0 to alter this if you wish.
</Para>

<Para>
The default is *DATA Normal From To Tape Compass Clino
</Para>

<Para>
The units of each quantity may be set with the UNITS command.
</Para>

<!-- FIXME:
Originally proposed feature - interleaved style makes this less useful:
In DIVING data, either &lt;FromDepth&gt; or &lt;ToDepth&gt; may be
replaced by an &lt;OMIT&gt; (default '-') if the respective survey
station is mentioned in the previous line (assuming there is no
change of depth gauge/water level). If the survey station does not
appear in the previous line (or this is the first line of diving
data), then an error is given.
-->

<!-- FIXME: plumbed diving legs -->

<!--
Originally proposed feature - interleaved style makes this less useful:
Similarly, for TOPOFIL data &lt;FromCount&gt;
may be replaced by an &lt;OMIT&gt; (default '-') if the reading
is the same as the previous &lt;ToCount&gt;. If this is the first
line of Topofil data, then an error is given. (It is best if both
readings are input, rather than just the difference between them,
to aid tracking down incorrect legs. If you do not agree, use NORMAL
data style).
-->

<!--FIXME:
<Para>
4 CYLPOLAR (Cylindrical Polar) style data is
included for completeness, since someone may have a use for it.
Perhaps a Grade 3 survey, or when surveying with a level and stick
(?). Let me know if you find a use so I can put a better justification
for it in here!
</Para>
-->

</listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>DATE</Title>
<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*date &lt;year&gt;[.&lt;month&gt;[.&lt;day&gt;]][-&lt;year&gt;[.&lt;month&gt;[.&lt;day&gt;]]]</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*date 2001</programlisting>

<programlisting>
*date 2000.10</programlisting>

<programlisting>
*date 1987.07.27</programlisting>

<programlisting>
*date 1985.08.12-1985.08.13</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Validity</Term>

<listitem><Para>valid at the start of a *begin/*end block.
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*date specifies the date that the survey was done.  A range of dates
can be specified (useful for overnight or multi-day surveying trips).
</Para></listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<VarListEntry><Term>See Also</Term>

<listitem><Para>*begin, *instrument, *team</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>DEFAULT</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*default &lt;settings list&gt;|all</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
The valid settings are CALIBRATE, DATA, and UNITS.
</Para>

<Para>
*default restores defaults for given settings.  This command is deprecated -
you should instead use: *calibrate default, *data default, *units default.
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>See Also</Term>

<listitem><Para>*calibrate, *data, *units</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>END</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*end [&lt;survey&gt;]</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Validity</Term>

<listitem><Para>valid for closing a block started by *begin in the same file.
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
Closes a block started by *begin.
</Para></listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<VarListEntry><Term>See Also</Term>

<listitem><Para>*begin</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>ENTRANCE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*entrance &lt;station&gt;</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*entrance P163</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*entrance sets the <emphasis>entrance</emphasis> flag for a station.
This information is used by aven to allow entrances to be highlighted.
</Para>

<!-- FIXME:
(could be inferred from surface/ug join, but better to specify because
of caves with no surf svy (or no underground survey) 
and also situations in which multiple surveys leave through an entrance)
-->
</listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<!-- <VarListEntry><Term>See Also</Term>

<listitem><Para></Para></listitem>

</VarListEntry>
-->

</VariableList>

</Sect3>

<Sect3><Title>EQUATE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*equate &lt;station&gt; &lt;station&gt;...</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*equate chosspot.1 triassic.27</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*equate specifies that the station names in the list refer to the
same physical survey station. An error is given if there is only one station
listed.
</Para>

<!-- FIXME:
<Para>
I think this is preferable to using:
</Para>

<programlisting> a b 0.00   0   0</programlisting>

<Para>
as EQUATE does not add in an extra position error. It is also clearer than
substituting in the original name wherever passages are linked. If you
disagree, you can always use one of the other methods!
</Para>
-->
</listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<!-- <VarListEntry><Term>See Also</Term>

<listitem><Para></Para></listitem>

</VarListEntry>
-->

</VariableList>

</Sect3>

<Sect3><Title>EXPORT</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*export &lt;station&gt;...</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<!-- FIXME better example -->
<listitem>
<Para>
<programlisting>
*export 1 6 17</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Validity</Term>

<listitem><Para>valid at the start of a *begin/*end block.
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*export marks the stations named as referable to from the enclosing
survey.  To be able to refer to a station from a survey several levels
above, it must be exported from enclosing survey.
</Para>

<!-- FIXME:
<Para>
I think this is preferable to using:
</Para>

<programlisting> a b 0.00   0   0</programlisting>

<Para>
as EQUATE does not add in an extra position error. It is also clearer than
substituting in the original name wherever passages are linked. If you
disagree, you can always use one of the other methods!
</Para>
-->
</listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<VarListEntry><Term>See Also</Term>

<listitem><Para>*begin</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>FIX</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*fix &lt;station&gt; [reference]
 [ &lt;x&gt; &lt;y&gt; &lt;z&gt;
   [ &lt;x std err&gt; &lt;y std err&gt; &lt;z std err&gt;
     [ &lt;cov(x,y)&gt; &lt;cov(y,z)&gt; &lt;cov(z,x)&gt; ] ] ]
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*fix entrance.0 32768 86723 1760</programlisting>

<programlisting>
*fix KT114_96 reference 36670.37 83317.43 1903.97</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem>
<Para>
*fix fixes the position of &lt;Station&gt; at the given coordinates.
If the position is omitted it defaults to (0,0,0). The standard
errors default to zero (fix station exactly). cavern will complain
if you attempt to fix the same survey station twice.
</Para>

<Para>
You can also specify just one standard error (in which case it is assumed
equal in X, Y, and Z) or two (in which case the first is taken as the
standard error in X and Y, and the second as the standard error in Z).
</Para>

<Para>
If you have covariances for the fix, you can also specify these - the
order is cov(x,y),  cov(y,z),  cov(z,x). 
</Para>

<Para>
By default cavern will warn about stations which have been FIX-ed but
not used otherwise.  This is unhelpful if you want to include a
standard file of benchmarks, some of which won't be used.
In this sort of situation, specify "REFERENCE" after the station name
in the FIX command to suppress this warning for a particular station.
</Para>

<Note><Para>
X is Easting, Y is Northing, and Z is altitude.
This convention has been chosen because it gives right-handed
axes, such that plotting x and y on a graph gives North up the
page.
</Para></Note>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<!-- <VarListEntry><Term>See Also</Term>

<listitem><Para></Para></listitem>

</VarListEntry>
-->

</VariableList>

</Sect3>

<!--
<Sect3><Title></Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Caveats </Term> </VarListEntry>

<VarListEntry><Term>See Also</Term>

<listitem><Para></Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>
-->

<Sect3><Title>FLAGS</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*flags &lt;flags&gt;</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*flags duplicate not surface</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*flags updates the current flag settings.
Flags not mentioned retain their previous state.  Valid flags
are DUPLICATE, SPLAY, and SURFACE, and a flag may be preceded with NOT to
turn it off.
</Para>

<Para>
Survey legs marked SURFACE are hidden from plots by default, and not
included in cave survey length calculations.  Survey legs marked as
DUPLICATE or SPLAY are also not included in cave survey length
calculations; legs marked SPLAY are ignored by the extend program.
DUPLICATE is intended for the case when if you have two different
surveys along the same section of passage (for example to tie two
surveys into a permanent survey station); SPLAY is intended for 
cases such as radial legs in a large chamber.
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>See Also</Term>

<listitem><Para>*begin</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>INCLUDE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*include &lt;filename&gt;</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*include mission</programlisting>

<programlisting>
*include "the pits"</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*include processes &lt;filename&gt; as if it were inserted at this
place in the current file. (i.e. The current settings are carried
into &lt;filename&gt;, and any alterations to settings in &lt;filename&gt;
will be carried back again). <!--FIXME--> (Nesting allowed up to at least 4
deep with ANSI C - I think). If &lt;filename&gt; contains spaces,
it must be enclosed in quotes.
</Para>

<Para>An included file which does not have a complete path
is resolved relative to the directory which the parent file is in
(just as relative HTML links do).  Cavern will try adding a &svx;
extension, and will also try translating "\" to "/"
(or other appropriate tricks on RISC OS).  And as a last
resort, it will try a lower case version of the filename (so if you
use Unix and someone sends you a DOS/Windows dataset with mismatched
case, unzip it with "unzip -L" and unix cavern will process it).
</Para>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>INFER</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem>
<Para>*infer plumbs on|off</Para>

<Para>*infer equates on|off</Para>
</listitem>

</VarListEntry>

<!--
<VarListEntry><Term>Example</Term>

<listitem>
<programlisting>
</programlisting>

</listitem>

</VarListEntry>
-->

<VarListEntry><Term>Description</Term>

<listitem>
<Para>"*infer plumbs on" tells cavern to interpret gradients of +/- 90
degrees as UP/DOWN (so it
will not apply the clino correction to them). This is useful when
the data has not been converted to have UP and DOWN in it.
</Para>

<Para>"*infer equates on" tells cavern to interpret a leg with
a tape reading of zero as a *equate.  This prevents tape corrections
being applied to them.
</Para>
</listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<!--
<VarListEntry><Term>See Also</Term>

<listitem><Para>*end, *prefix</Para></listitem>

</VarListEntry>
-->

</VariableList>

</Sect3>

<Sect3><Title>INSTRUMENT</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*instrument &lt;instrument&gt; &lt;identifier&gt;</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*instrument compass "CUCC 2"
*instrument clino "CUCC 2"
*instrument tape "CUCC Fisco Ranger open reel"</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Validity</Term>

<listitem><Para>valid at the start of a *begin/*end block.
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*instrument specifies the particular instruments used to perform a
survey.
</Para></listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<VarListEntry><Term>See Also</Term>

<listitem><Para>*begin, *date, *team</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>PREFIX</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*prefix &lt;survey&gt;</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*prefix flapjack</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*prefix sets the current survey.
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Caveats </Term>

<listitem><Para>*prefix is deprecated - you should use *begin and *end
instead.</Para></listitem>

</VarListEntry>

<VarListEntry><Term>See Also</Term>

<listitem><Para>*begin, *end</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>REQUIRE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*require &lt;version&gt;</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*require 0.98</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*require checks that the version of cavern in use is at least
&lt;version&gt; and stops with an error if not.
So if your dataset requires a feature
introduced in a particular version, you can add a *require command and
users will know what version they need to upgrade to, rather than
getting an error message and having to guess what the real problem is.
</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>SD</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*sd &lt;quantity list&gt; &lt;standard deviation&gt;
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*sd tape 0.15 metres</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*sd sets the standard deviation of a measurement.
</Para>

<Para>
&lt;quantity&gt; is one of
TAPE|COMPASS|CLINO|COUNTER|DEPTH|DECLINATION|DX|DY|DZ <!-- FIXME:
check this list -->
</Para>

<Para>
&lt;standard deviation&gt; must include units and thus is typically
'0.05 metres', or 0.02 degrees. See *units below for full list
of valid units.
</Para>

<!-- FIXME mention central limit theorem -->
<Para>
To utilise this command fully you need to understand what a
<emphasis>standard deviation</emphasis> is.
It gives a value to the 'spread' of the errors
in a measurement. Assuming that these are normally distributed
we can say that 99.74% of the actual lengths will fall within three
standard deviations of the measured length. i.e. a tape SD of
0.167 metres means that the actual length of a tape measurement
is within + or - 0.5 metres of the recorded value 99.74% of the time.
So if the measurement is 7.34m then the actual length is very
likely to be between 6.84m and 7.84m. This example corresponds
to BCRA grade 3. Note that this is just one interpretation of
the BCRA standard, taking the permitted error values as 3SD 99.74%
confidence limits. If you want to take the readings as being some
other limit (e.g. 1SD = 68.26%) then you will need to change the BCRA3
and BCRA5 files accordingly. This issue is explored in more
detail in various surveying articles.
<!--
2.565 sd 99%
2.5   sd 98.76%
2     sd 95.44%
1     sd 68.26%
.97   sd 66.67%
1.15  sd 75%
-->
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>See Also</Term>

<listitem><Para>*units</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>SET</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*set &lt;item&gt; &lt;character list&gt;</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*set decimal ,</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*set sets the specified &lt;item&gt; to the character or characters
given in &lt;character list&gt;. The example sets the decimal
separator to be a comma.
</Para>

<Para>
xAB means the character with hex value AB. Eg x20 is a space.
</Para>

<Para>
The complete list of items that can be set, the defaults (in
brackets), and the meaning of the item, is:
</Para>

<ItemizedList>

<ListItem><Para>
BLANK (x09x20,) Separates fields
</Para></ListItem>

<ListItem><Para>
COMMENT (;) Introduces comments
</Para></ListItem>

<ListItem><Para>
DECIMAL (.) Decimal point character 
</Para></ListItem>

<ListItem><Para>
EOL (x0Ax0D) End of line character
</Para></ListItem>

<ListItem><Para>
KEYWORD (*) Introduces keywords
</Para></ListItem>

<ListItem><Para>
MINUS (-) Indicates negative number
</Para></ListItem>

<ListItem><Para>
NAMES (_-) Non-alphanumeric chars permitted in station
names (letters and numbers are always permitted).
</Para></ListItem>

<ListItem><Para>
OMIT (-) Contents of field omitted (e.g. in plumbed legs)
</Para></ListItem>

<ListItem><Para>
PLUS (+) Indicates positive number 
</Para></ListItem>

<ListItem><Para>
ROOT (\) Prefix in force at start of current file (use of ROOT is deprecated)
</Para></ListItem>

<ListItem><Para>
SEPARATOR (.) Level separator in prefix hierarchy
</Para></ListItem>

</ItemizedList>

<Para>
The special characters may not be alphanumeric.
</Para>

</listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>SOLVE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*solve</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*include 1997data
*solve
*include 1998data
</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
Distributes misclosures around any loops in the survey and fixes
the positions of all existing stations.  This command is intended
for situations where you have some new surveys adding extensions
to an already drawn-up survey which you wish to avoid completely
redrawing. You can read in the old data, use *SOLVE to fix it, and then
read in the new data.  Then old stations will be in the same
positions as there are in existing drawn up survey, even if new loops
have been formed by the extensions.
</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>TEAM</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*team &lt;person&gt; &lt;role&gt;...</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*team "Nick Proctor" compass clino tape
*team "Anthony Day" notes pictures tape
</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Validity</Term>

<listitem><Para>valid at the start of a *begin/*end block.
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
*team specifies the people involved in a survey and what role they
filled during that trip.
</Para></listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<VarListEntry><Term>See Also</Term>

<listitem><Para>*begin, *date, *instrument</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

<Sect3><Title>TITLE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*title &lt;title&gt;</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<programlisting>
*title Dreamtime</programlisting>

<programlisting>
*title "Mission Impossible"</programlisting>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>*title allows you to set the descriptive title for a survey.
If the title contains spaces, you need to enclose it in quotes ("").
If there is no *title command, the title defaults to the survey name
given in the *begin command.
</Para>
</listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<!--
<VarListEntry><Term>See Also</Term>

<listitem><Para>*end, *prefix</Para></listitem>

</VarListEntry>
-->

</VariableList>

</Sect3>

<Sect3><Title>TRUNCATE</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>*truncate &lt;length&gt;|off</Para></listitem>

</VarListEntry>

<!-- FIXME:
<VarListEntry><Term>Example</Term>

<listitem>
<programlisting>
</programlisting>

</listitem>

</VarListEntry>
-->

<VarListEntry><Term>Description</Term>

<listitem><Para>Station names may be of any length in &survexsuite;, but some
other (mostly older) cave surveying software only regard the first few
characters of a name as significant (e.g. "entran" and "entrance"
might be treated as the same).  To facilitate using data imported from
such a package &survexsuite; allows you to truncate names to whatever
length you want (but by default truncation if off).
</Para>

<Para>Figures for the number of characters which are significant is various
software packages: Surveyor87/8 used 8, Andy Waddington's SU-BBC used 6,
while !SU, the Archimedes version, used 8, &survexsuite; used 8 per prefix
level up to version 0.41, and 12 per prefix level up to 0.73 (more recent
versions removed this rather archaic restriction).
</Para>
</listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<!--
<VarListEntry><Term>See Also</Term>

<listitem><Para>*end, *prefix</Para></listitem>

</VarListEntry>
-->

</VariableList>

</Sect3>

<Sect3><Title>UNITS</Title>

<VariableList>

<VarListEntry><Term>Syntax</Term>

<listitem><Para>
*units &lt;quantity list&gt; [&lt;factor&gt;] &lt;unit&gt;
</Para>
<Para>
*units default
</Para></listitem>

</VarListEntry>

<VarListEntry><Term>Example</Term>

<listitem>
<Para>
<programlisting>
*units tape metres</programlisting>

<programlisting>
*units compass clino grads</programlisting>

<programlisting>
*units dx dy dz 1000 metres ; data given as kilometres</programlisting>
</Para>
</listitem>

</VarListEntry>

<VarListEntry><Term>Description</Term>

<listitem><Para>
&lt;quantity&gt; is one of
TAPE|LENGTH|COMPASS|BEARING|CLINO|GRADIENT|COUNTER|DEPTH|DECLINATION|X|Y|Z
</Para>

<Para>Changes current units of all the quantities listed to [&lt;factor&gt;]
&lt;unit&gt;. Note that quantities can be expressed either as
the instrument or the measurement.
</Para>

<Para>If &lt;factor&gt; is omitted it defaults to 1.00
</Para>

<Para>Valid units for listed quantities are:
</Para>

<!-- FIXME: are these correct?
  and dx,dy,dz -> easting/northing/altitude in preference -->
<Para>TAPE, LENGTH, COUNTER, COUNT, DEPTH, dX, dY, dZ, <!-- FIXME: X,Y,Z,-->
<!--LENGTHOUTPUT--> in YARDS|FEET|METRIC|METRES|METERS
</Para>

<!-- FIXME
<Para>[Percentage gradient not yet implemented]
</Para>

<Para>[LENGTHOUTPUT and ANGLEOUTPUT not yet implemented]
</Para>

<Para>LENGTHOUTPUT determines the units in which cavern displays
lengths and positions. Similarly, ANGLEOUTPUT determines the units of
any angles output.
</Para>

<Para>The units used are those last set. (The units of any output are
displayed with it).
</Para>
-->

<Para>CLINO, GRADIENT in DEG|DEGREES|GRADS|MILS<!--|PERCENT|PERCENTAGE-->
</Para>

<Para>COMPASS, DECLINATION, BEARING, <!--ANGLEOUTPUT--> in
DEG|DEGREES|GRADS|MILS|MINUTES
</Para>

<Para>(360 degrees = 400 grads (also known as Mils))
</Para>

<Para>Defaults are: Metres, Degrees, Degrees respectively.
</Para></listitem>

</VarListEntry>

<!-- <VarListEntry><Term>Caveats </Term> </VarListEntry> -->

<VarListEntry><Term>See Also</Term>

<listitem><Para>*calibrate</Para></listitem>

</VarListEntry>

</VariableList>

</Sect3>

</Sect2>

<Sect2><Title>Station naming</Title>

<Para>&survexsuite; has a powerful system for naming stations.  It
uses a hierarchy of names, in a similar way to the directory structure
on your discs.  So point 6 in the entrance survey of Kaninchenhohle
(cave number 161) is referred to as: 161.entrance.6
</Para>

<Para>This seems a natural way to refer to station names.  It also
means that it is very easy to include more levels, for example if you
want to plot all the caves in the area you just list them all in
another file, specifying a new prefix.  So to group our example cave
and its neighbours on the Loser Plateau you would use a file like
this:
</Para>

<programlisting>
*begin Loser
*include 161
*include 2YrGest
*include 145
*end Loser</programlisting>

<Para>
The entrance series point mentioned above would now be referred
to as: Loser.161.entrance.6
</Para>

<Para>This may seem a tad complex but is really very natural once you
get the hang of it.
</Para>

<Para>You do not have to use this system at all, and can just give all
stations unique identifiers if you like:
</Para>

<Para>1, 2, 3, 4, 5, ... 1381, 1382
</Para>

<Para>or
</Para>

<Para>AA06, AA07, P34, ZZ6, etc.
</Para>

<!-- FIXME:
<Para>However you'll loose the ability to handle subsurveys if you do.
</Para>
-->

</Sect2>

</Sect1>

<Sect1><Title>Contents of &svx; files: How do I?</Title>
<?dbhtml filename="svxhowto.htm">

<Para>
Here is some example &survexsuite; data (a very small cave numbered 1623/163):
</Para>

<programlisting>
2 1 26.60 222  17.5
2 3 10.85 014   7
2 4  7.89 254 -11
4 5  2.98  - DOWN
5 6  9.29 271 -28.5</programlisting>

<Para>
You can vary the data ordering.  The default is:
</Para>

<Para>
from-station to-station tape compass clino
</Para>

<Para>
This data demonstrates a number of useful features of &survexsuite;:
</Para>

<Para>
Legs can be measured either way round, which allows the use of
techniques like "leap-frogging", meaning that the legs
alternate forwards and backwards.
</Para>

<Para>
Also notice that there is a spur in the survey (2 to 3).  You
do not need to specify this specially.
</Para>

<Para>
&survexsuite; places few restrictions on station naming (see "Survey
Station Names" in the previous section), so you can number the stations
as they were in the original survey notes.  Although not apparent from
this example, there is no requirement for each leg to connect to an
existing station.  &survexsuite; can accept data in any order, and will
check for connectedness once all the data has been read in.
</Para>

<Para>
Each survey is also likely to have other information associated
with it, such as instrument calibrations, etc.  This has been
omitted from this example to keep things simple.
</Para>

<Para>
Most caves will take more than just one survey trip to map.  Commonly
the numbering in each survey will begin at 1, so we need to be
able to tell apart stations with the same number in different
surveys.
</Para>

<Para>
To accomplish this, &survexsuite; has a very flexible system of hierarchical
prefixes.  All you need do is give each survey a unique name or
number, and enter the data like so:
</Para>

<programlisting>
*begin 163
*export 1
2 1 26.60 222  17.5
2 3 10.85 014   7
2 4  7.89 254 -11
4 5  2.98  - DOWN
5 6  9.29 271 -28.5
*end 163</programlisting>

<Para>&survexsuite; will name the stations by attaching the current prefix.
In this case, the stations will be named 163.1, 163.2, etc.
</Para>

<Para>We have a convention with the CUCC Austria data that the entrance survey
station of a cave is named P&lt;cave number&gt;, P163 in this case. We
can accomplish this like so:
</Para>

<programlisting>
*equate P163 163.1
*entrance P163
*begin 163
*export 1
2 1 26.60 222  17.5
2 3 10.85 014   7
2 4  7.89 254 -11
4 5  2.98  - DOWN
5 6  9.29 271 -28.5
*end 163</programlisting>

<Sect2><Title>Specify the ordering and type of data</Title>

<Para>The *DATA command is used to specify the data style, and the
order in which the readings are given.</Para>

</Sect2>

<Sect2><Title>Deal with Plumbs or Legs Across Static Water</Title>

<!-- FIXME
<Para>
They can be given
as +90, or -90, but as they are not usually measured with the
clino, but with a plumb of some sort, then it is useful to distinguish
them in this way so that any clino adjustment is not applied to
these values.
</Para>

<Para>
Note that a similar effect can be achieved by using the "*infer plumbs" command
to stop clino corrections being applied to -90 and +90 clino readings.
</Para>
-->

<Para>
PLUMBED LEGS should be given using 'UP' or 'DOWN' in place of the
clino reading and a dash (or a different specified 'OMIT' character)
in place of the compass reading.  This distinguishes
them from legs measured with a compass and clino.  Here's an example:
</Para>

<programlisting>
1 2 21.54 - UP
3 2 7.36 017 +17
3 4 1.62 091 +08
5 4 10.38 - DOWN</programlisting>

<Para>
U/D or +V/-V may be used instead of UP/DOWN, and the check is not case
sensitive.
</Para>

<Para>
Legs surveyed across the surface of a static body of water where no
clino reading is taken (since the surface of the water can be assumed
to be flat) can be indicated by using LEVEL in place of a clino reading.
This prevents the clino correction being applied.  Here's an example:
</Para>

<programlisting>
1 2 11.37 190 -12
3 2  7.36 017 LEVEL
3 4  1.62 091 LEVEL</programlisting>

</Sect2>

<Sect2><Title>Specify a BCRA grade</Title>

<Para>The *SD command can be used to specify the standard deviations of the
various measurements (tape, compass, clino, etc).  Examples files are
supplied which define BCRA Grade 3 and BCRA Grade 5 using a number of *sd
commands. You can use these by simply including them at the relevant point..
</Para>

<Para>You can use them as follows:
</Para>

<programlisting>
*begin somewhere
; This survey is only grade 3
*include grade3
2 1 26.60 222  17.5
2 3 10.85 014   7
; etc
*end somewhere</programlisting>

<Para>The default values for the standard deviations are those for
BCRA grade 5. Note that it is good practice to keep the *include
Grade3 within *Begin and *End commands otherwise it will apply
to following survey data, which may not be what you intended.
</Para>

</Sect2>

<Sect2><Title>Specify different accuracy for a leg</Title>

<Para>For example, suppose the tape on the plumbed leg in this survey
is suspected of being less accurate than the rest of the survey because
the length was obtained by measuring the length of the rope used to rig
the pitch.  We can set a higher sd for this one measurement and use a
*begin/*end block to make sure this setting only applies to the one
leg:
</Para>

<programlisting>
2 1 26.60 222  17.5
2 3 10.85 014   7
2 4  7.89 254 -11
*begin
; tape measurement was taken from the rope length
*sd tape 0.5 metres
4 5  34.50 - DOWN
*end
5 6  9.29 271 -28.5</programlisting>

</Sect2>

<Sect2><Title>Enter Radiolocation Data</Title>

<Para>This is done by using the *SD command to specify the appropriate
errors for the radiolocation `survey leg' so that the loop closure
algorithm knows how to distribute errors if it forms part of a loop.
</Para>

<Para>The best approach for a radiolocation where the underground station
is vertically below the surface station is to represent it as a
plumbed leg, giving suitable SDs for the length and plumb angle. The
horizontal positioning of this is generally quite accurate, but the
vertical positioning may be much less well known. E.g: we have a
radiolocation of about 50m depth +/- 20m and horizontal accuracy of
+/- 8m. Over 50m the +/-8m is equivalent to an angle of 9 degrees, so
that is the expected plumb error. 20m is the expected error in the
length. To get the equivalent SD we assume that 99.74% of readings will
be within 3 standard deviations of the error value. Thus we divide the
expected errors by 3 to get the SD we should specify:
</Para>

<programlisting>
*begin
*sd length 6.67 metres
*sd plumb 3 degrees
surface underground 50 - down
*end</programlisting>

<Para>
We wrap the radiolocation leg in a *begin/*end block to make
sure that the special *sd settings only apply to this one leg.
</Para>

<Para>For more information on the expected errors from radiolocations
see Compass Points Issue 10.
</Para>

</Sect2>

<Sect2><Title>Enter Diving Data</Title>

<Para>Surveys made underwater using a diver's depth gauge can be
processed - use the *Data command to specify that the following data
is of this type.
</Para>

</Sect2>

<Sect2><Title>Enter Theodolite data</Title>

<!-- FIXME: we do now have a data style more suited to theodolite,
  though we don't do turned angles -->
<Para>
Theodolite data with turned angles is not yet explicitly catered
for, so for now you will need to convert it into equivalent legs in
another style - normal or cylpolar are likely to be the best choices.
</Para>

<Para>
If there is no vertical info in your theodolite data then you should
use the cylpolar style and use *sd command to specify very low
accuracy (high SD) in the depth so that the points will move in the
vertical plane as required if the end points are fixed or the survey
is part of a loop.
</Para>

</Sect2>

</Sect1>

<Sect1><Title>General: How do I?</Title>
<?dbhtml filename="genhowto.htm">

<Sect2><Title>Create a new survey</Title>

<Para>You simply create a text file containing the relevant survey data,
using a text editor, and save it with a suitable name with a &svx;
extension. The
easiest way is to look at some of the example data and use that
as a template. Nearly all surveys will need a bit of basic info
as well as the survey data itself: e.g. the date (*date), comments
about where, what cave, a name for the survey (using *begin and *end),
instrument error corrections etc. Here is a typical survey file:
</Para>

<Para>All the lines starting with ';' are comments, which are ignored
by &survexsuite;. You can also see the use of 'DOWN' for plumbs, and
*calibrate tape for dealing with a tape length error. (This tape
was unusual in being too long!).</Para>

<programlisting>
*equate chaos.1 triassic.pt3.8
*equate chaos.2 triassic.pt3.9

*begin chaos
*title "Bottomless Pit of Eternal Chaos to Redemption pitch"
*date 1996.07.11
*team "Nick Proctor" compass clino tape
*team "Anthony Day" notes pictures tape
*instrument compass "CUCC 2"
*instrument clino "CUCC 2"
;Calibration: Cairn-Rock 071 072 071,  -22 -22 -22
;       Rock-Cairn 252 251 252,  +21 +21 +21
;Calibration at 161d entrance from cairn nr entrance to
;prominent rock edge lower down. This is different from
;calibration used for thighs survey of 5 July 1996

*export 1 2

;Tape is 20cm too short
*calibrate tape +0.2

1 2 9.48 208 +08
2 3 9.30 179 -23
3 4 2.17 057 +09
5 4 10.13 263 +78
5 6 2.10 171 -73
7 6 7.93 291 +75
*begin
*calibrate tape 0
8 7 35.64 262 +86 ;true length measured for this leg
*end
8 9 24.90 - DOWN
10 9 8.61 031 -43
10 11 2.53 008 -34
11 12 2.70 286 -20
13 12 5.36 135 +23
14 13 1.52 119 -12
15 14 2.00 036 +13
16 15 2.10 103 +12
17 16 1.40 068 -07
17 18 1.53 285 -42
19 18 5.20 057 -36
19 20 2.41 161 -67
20 21 27.47 - DOWN
21 22 9.30 192 -29
*end chaos</programlisting>

</Sect2>

<Sect2><Title>Join surveys together</Title>

<Para>Once you have more than one survey you need to specify how they
link together. To do this use *export to make the stations to be
joined accessible in the enclosing survey, then *equate in the
enclosing survey to join them together.
<!-- FIXME example -->
</Para>

</Sect2>

<Sect2><Title>Organise my surveys</Title>

<Para>This is actually a large subject. There are many ways you can
organise your data using &survexsuite;. Take a look at the example dataset
for some ideas of ways to go about it.
</Para>

<Sect3><Title>Fixed Points (Control Points)</Title>

<!-- FIXME move most of this to *fix ? -->

<Para>The command:
</Para>

<programlisting>
*fix entrance.1    0  0  1780</programlisting>

<Para>fixes station 1 of the entrance survey at the co-ordinates 0
(east-west),0 (north-south), 1780 (altitude).
</Para>

<Para>If there are no fixed points specified, &survexsuite; will fix the
first station mentioned at (0,0,0).  This allows sub-sections of a large
survey to be processed separately, without the need to keep putting in and
removing fixed points. <!-- FIXME - don't want to encourage people to do
this really -->
</Para>

<Para>To fix more than one station at known co-ordinates, simply use a *fix
command for each.  &survexsuite; will check that all stations are connected to
at least one fixed point (and so all station co-ordinates can be calculated).
</Para>

<!-- FIXME fix with error estimates -->

</Sect3>

<Sect3><Title>More than one survey per trip</Title>

<Para>Suppose you have two separate bits of surveying which were done on the
same trip.  So the calibration details, etc. are the same for both.  But you
want to give a different survey name to the two sections.  This is easily
achieved like so:
</Para>

<programlisting>
*begin
*calibrate compass 1.0
*calibrate clino 0.5
*begin altroute
; first survey
*end altroute
*begin faraway
; second survey
*end faraway
*end</programlisting>

</Sect3>

</Sect2>

<Sect2><Title>Add surface topology</Title>

<!-- FIXME rewrite this - put DEM support in aven -->
<Para>This process is not yet automated. It is possible to generate
a mesh or contours overlaying your area by various means. Some
details of several methods are given in the BCRA Cave Surveying
Group magazine Compass Points issue 11. This article is also available
on-line. SpeleoGen can also help with this process if you want
final output in DXF form. We expect to include mesh generation
from a grid of height data within &survexsuite; soon. Note that if you
create your own set of &survexsuite; data for a surface mesh that the
stations should have different names on the E-W line from the
N-S lines, otherwise your mesh will have a huge number of loops
which &survexsuite; will try to solve unnecessarily, using up a great
deal of memory.
</Para>

</Sect2>

<Sect2><Title>Overlay a grid</Title>

<Para>Aven is able to display a grid, but this functionality isn't
available in caverot, xcaverot, or the printer drivers.
You can achieve a similar effect for now by creating a &svx; file
where the survey legs form a grid.
</Para>

</Sect2>

<Sect2><Title>Import data from other programs</Title>

<Para>&survexsuite; supports a number of features to help with importing
existing data. You can specify the ordering of items on a line using *Data
(see &survexsuite; Keywords above), and you can specify the characters used
to mean different things using *Set (see &survexsuite; Keywords above).
</Para>

<Para>The Ignore and Ignoreall options to the *Data command are often
particularly useful, e.g. if you have a dataset with LRUD info or comments
on the ends of lines.
</Para>

<Sect3><Title>Changing Meanings of Characters</Title>

<Para>e.g. if you have some data with station names containing the 
characters '?' and '+' (which are not permitted in a name by default)
then the command:
</Para>

<programlisting>
*SET NAMES ?+</programlisting>

<Para>
specifies that question marks and plus signs are permitted in station names.
A-Z, a-z, and 0-9 are always permitted. '_' and '-' are also permitted by
default, but aren't in this example.
</Para>

<Para>If your data uses a comma ',' instead of a decimal point, then
you use
</Para>

<programlisting>
*SET DECIMAL ,</programlisting>

<Para>to specify that ',' is now the decimal separator instead of '.'.
</Para>

<!-- FIXME
<Para>Note that there are plenty of ways you can use this facility to
completely confuse the software, as it may not be able to work out what is
going on, or it may simply be ambiguous. It can cope with some ambiguity (e.g.
the '-' character is used both for 'MINUS' and for 'OMIT'), but there are
limits. If you have a dataset that you can not make &survexsuite;
understand, then send it to us, and we will see what can be done.
</Para>
-->

</Sect3>

<Sect3><Title>Other Converters</Title>

<Para>We have an Excel 5 macro for converting The Lotus 123 spreadsheets
used by the German survey software Cad F&uuml;r H&ouml;hlen into
&survexsuite; data files. Other converters may also come to be available.
These will normally be available via the
<ulink url="&survexwebsite;">&survexsuite; Web pages</ulink>.
</Para>

</Sect3>

</Sect2>

<Sect2><Title>Export data from &survexsuite;</Title>

<Para>See Rosetta Stal in the Related Tools section of the Survex web
site.</Para> <!--FIXME: more info-->

</Sect2>

<Sect2><Title>See errors and warnings that have gone off the screen</Title>

<Para>When you run &survexsuite; it will process the specified survey data
files in order, reporting any warnings and errors.  If there are no
errors, the output files are written and various statistics about the
survey are displayed. If there are a lot of warnings or errors, they can
scroll off the screen and it's not always possible to scroll back to
read them.
</Para>

<Para>The easiest way to see all the text is to use <command>cavern
--log</command> to redirect output to a <filename>.log</filename> file,
which you can then inspect with a text editor.
</Para>

<!-- <command/cavern cavename &gt; tmpfile/ -->

</Sect2>

<Sect2><Title>Create an Extended Elevation</Title>

<Para>Use the Extend program. This takes &x3d; files and
'flattens' them.  See 'Extend' for details.
</Para>

</Sect2>

</Sect1>

<!--
<Sect1><Title>Appendices</Title>
<?dbhtml filename="appendix.htm">

<Para>Files provided
</Para>

<Para>Command specification
</Para>

</Sect1>
-->

<Sect1><Title>Mailing List</Title>
<?dbhtml filename="maillist.htm">

<!-- FIXME: URL to list, contact wookey for paper -->

<Para>We have both email and paper mailing lists for &survexsuite;, to
keep users informed of new versions and so forth.  This is available free
by e-mail, or by post for a small charge (to cover photocopying, disks,
and postage). We recommend you register to receive automatic updates
and other information.
</Para>

</Sect1>

<Sect1><Title>Error Messages</Title>
<?dbhtml filename="errormsg.htm">

<Para>There are a number of error messages that you may get when processing
data.  Most of these are self explanatory, and will be caused by typing
mistakes, or by your survey data not being attached to fixed points. After
the error message telling you what has gone wrong, the filename
and line number of the offending line will
be printed, or the filename if a file couldn't be found.
<!-- FIXME: gcc format error msgs -->
<!-- FIXME: stops after N errors -->
</Para>

<Para>When surveys are not all connected to fixed points, &survexsuite; will
list some of the stations that are not connected.</Para>

</Sect1>

<Sect1><Title>Future Developments</Title>
<?dbhtml filename="future.htm">

<Para>
We plan to bring &survexsuite; to version 1.0, and then start to
develop version 2 (codenamed &spud;).  &spud; will evolve out of 
Survex 1.0 - the GUI framework is likely to be based on aven, with
the printer drivers and other utility programs being pulled in
and integrated into the menus.</Para>

<Para>Aven is built on &wxwindows;, which means that can easily support
Unix and Microsoft Windows.  Mac support is also possible if anyone
with Mac expertise is interesting in porting &spud;.  There's no MSDOS
support in &wxwindows; at present, though it may be added.  Support for RISC
OS is unlikely.</Para>

<Para>More information on our plans for &spud; is on the <ulink
url="&survexwebsite;">web site</ulink>.
</Para>

</Sect1>

<Sect1><title>Contacting the authors</title>
<?dbhtml filename="contact.htm">

<Para>We'd be delighted to hear how you get on with &survexsuite; and
welcome comments and suggestions for improvements.</Para>

<Para>If you want the latest version and don't have net access, please
enclose a suitably formatted floppy and an SAE.  These days, we'd probably
struggle to cope with anything other than 3.5" floppies.  &msdos; format is
easiest for us.</Para>

<Address>
Wookey
<Street/734 Newmarket Rd/
<City/Cambridge/
<PostCode/CB5 8RS/
<Country/UK/
<Phone/Tel: 01223 504881 (home)/
<Phone/Tel: 01223 811679 (work)/
<Email/&wookeyemail;/
</Address>

<Para>or</Para>

<Address>
Olly Betts
<Street/6 Ashcroft Court/
<City/Cambridge/
<PostCode/CB4 2SN/
<Country/UK/
<Phone/Tel: 01223 513644 (home)/
<Email/&ollyemail;/
</Address>

<!-- FIXME: Mark too? -->

<Para>Or if neither of these get any response try:</Para>

<Address>
Cambridge University Caving Club,
c/o James Hickson,
<Street>Pembroke College</Street>
<City>Cambridge</City>
<Country>UK</Country>
</Address>

<Sect2><title>Contributing</title>

<!--FIXME rewrite and elaborate -->
<Para>Monetary donations are welcome, but if you want a more personal way to
say thankyou we'd love a copy of a survey you've produced using
&survexsuite;.  Two copies would be best to save us arguing over who gets
it.</Para>

<Para>Or alternatively <emphasis>"Say it with code"</emphasis>.  If you're a
programmer and want to help out there's plenty to do, so feel free to join
in.</Para>
</Sect2>

</Sect1>

</Article>
