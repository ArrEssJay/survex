dnl Process this file with autoconf to produce a configure script.

dnl CFLAGS=-DDEFAULTLANG=fr to build with French as the default language.

dnl Need autoconf 2.13 or later for 3 argument version of AC_DEFINE
AC_PREREQ(2.13)
AC_INIT(src/caverot.c)
AM_INIT_AUTOMAKE(survex, 0.98)
AM_CONFIG_HEADER(config.h)

dnl keep this on two lines like this - miniam.pl relies on this
AC_DEFINE(COPYRIGHT_MSG,
"Copyright (C) 1990-2001 Olly Betts", [Copyright Message])

AC_DEFINE(AVEN_COPYRIGHT_MSG,
"Copyright (C) 1999-2001 Mark R. Shinwell", [Copyright Message for Aven])

dnl set PRETTYPACKAGE to PACKAGE with the first character capitalised
PRETTYPACKAGE=`echo $PACKAGE|cut -b1|tr 'a-z' 'A-Z'``echo $PACKAGE|cut -b2-`
AC_SUBST(PRETTYPACKAGE)

dnl Checks for programs.
AC_PROG_CC

AVEN='aven$(EXEEXT)'
AC_ARG_ENABLE(aven,
[  --disable-aven Don't try to build Aven cave viewer],
[case "${enableval}" in
  yes) ;;
  no) AVEN= ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-aven) ;;
esac])

if test -n "$AVEN" ; then
  AC_PROG_CXX
  dnl aclocal from automake 1.4 doesn't like next line:
  AM_DEPENDENCIES(CXX)
  AC_PROG_CXXCPP
fi

AC_LANG_C

AC_PROG_MAKE_SET

AC_EXEEXT
AC_OBJEXT

if test -n "$MINGW32$CYGWIN" ; then
dnl assume mingw32 or cygwin means littleendian (may not be true for NT
dnl on non-intel platforms but ISTR m$ have scrapped that)
AC_MSG_CHECKING(endian-ness)
AC_MSG_RESULT(mingw/cygwin so assuming little endian)
ac_cv_c_bigendian=no
else
dnl autoconf doesn't look in the right place to find the endian-ness of
dnl a djgpp crosscompiler
dnl See if machine/endian.h defines the BYTE_ORDER macro.
AC_MSG_CHECKING(endian-ness from machine/endian.h)
AC_TRY_COMPILE([#include <machine/endian.h>], [
#if !BYTE_ORDER || !BIG_ENDIAN || !LITTLE_ENDIAN
 bogus endian macros
#endif],
[# It does; now see whether it defined to BIG_ENDIAN or not.
AC_MSG_RESULT(found)
AC_TRY_COMPILE([#include <machine/endian.h>], [
#if BYTE_ORDER != BIG_ENDIAN
 not big endian
#endif], ac_cv_c_bigendian=yes, ac_cv_c_bigendian=no)],
AC_MSG_RESULT(not found)
dnl if that didn't work, try usual autoconf tests
AC_C_BIGENDIAN
)
fi

AC_CHECK_PROGS(STRIP, strip, echo "not stripping ")

AC_CHECK_LIB(m, sqrt)

AC_PATH_XTRA

WXCONFIG=wxgtk-config
if test x$no_x = xyes; then
  WXCONFIG=
fi
PRINTWIN=
if test -n "$MINGW32$CYGWIN" ; then
  PRINTWIN='printwin$(EXEEXT)'
  AC_MSG_RESULT(building printwin)
  WXCONFIG=wxmsw-config
fi

AC_SUBST(PRINTWIN)

AC_ARG_WITH(wxconfig,
[  --with-wxconfig=PROGRAM wxWindows configuration script to use to build Aven],
[WXCONFIG=$with_wxconfig
])

if test x$no_x != xyes; then
  AC_CHECK_LIB(Xext, XdbeQueryExtension, X_EXTRA_LIBS="-lXext $X_EXTRA_LIBS", ,
               $X_LIBS $X_PRE_LIBS -lX11 -lXext $X_EXTRA_LIBS)
  CAVEROT=xcaverot ${CAVEROT}
  AC_MSG_RESULT(building xcaverot)
fi

AM_CONDITIONAL(WIN32, test -n "$MINGW32$CYGWIN")
if test -n "$WXCONFIG" ; then
  if test -n $AVEN; then
    AC_MSG_CHECKING(for wxwindows)
    if ( exec >&5 2>&5 ; $WXCONFIG --version ; exit $? ) then
      WX_LIBS=`$WXCONFIG --libs`
      AC_SUBST(WX_LIBS)
      WX_CFLAGS=`$WXCONFIG --cflags`
      AC_SUBST(WX_CFLAGS)
      AC_MSG_RESULT(found)
      AC_MSG_RESULT(building aven)
    else
      AC_MSG_RESULT(not found)
      AVEN=
    fi
  fi
else
  AVEN=
fi

AC_LANG_C

AC_SUBST(CAVEROT)
AC_SUBST(AVEN)

EXTRA_MANS=`echo $CAVEROT $AVEN | sed 's/\>/.1/g'`
AC_SUBST(EXTRA_MANS)

dnl caverot libraries...
AC_SUBST(CRLIB)
dnl caverot platform specific sources...
AC_SUBST(CROBJX)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(limits.h string.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T
AC_STRUCT_TM
AC_TYPE_SIGNAL

dnl Look for a signed 32 bit integer type
AC_MSG_CHECKING(for 32 bit integer type)
AC_TRY_COMPILE(,[switch (0) { case (sizeof(int)==4): case 0: break; }],
INT32_T=int,
AC_TRY_COMPILE(,[switch (0) { case (sizeof(long)==4): case 0: break; }],
INT32_T=long,
AC_MSG_RESULT(not found)
exit 1
)
)
AC_MSG_RESULT($INT32_T)
AC_DEFINE_UNQUOTED(INT32_T,$INT32_T,[signed 32 bit integer type])

dnl Look for a signed 16 bit integer type
AC_MSG_CHECKING(for 16 bit integer type)
AC_TRY_COMPILE(,[switch (0) { case (sizeof(short)==2): case 0: break; }],
INT16_T=short,
AC_TRY_COMPILE(,[switch (0) { case (sizeof(int)==2): case 0: break; }],
INT16_T=int,
AC_MSG_RESULT(not found)
exit 1
)
)
AC_MSG_RESULT($INT16_T)
AC_DEFINE_UNQUOTED(INT16_T,$INT16_T,[signed 16 bit integer type])

dnl Checks for library functions.
AC_FUNC_STRFTIME
if test x"$ac_cv_func_strftime" != xyes ; then
  LIBOBJS="$LIBOBJS strftime.o"
fi
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(popen setjmp signal getpwuid)

dnl difftime seems to be an ANSI invention
AC_CHECK_FUNCS(difftime)

dnl try to find a case-insensitive compare

AC_MSG_CHECKING(how to compare strings ignoring case)
AC_MSG_RESULT()
strcasecmp=no
# The order of these tests is important.
AC_CHECK_FUNC(strcasecmp, strcasecmp=strcasecmp)
if test "x$strcasecmp" = xno ; then
  AC_CHECK_FUNC(stricmp, strcasecmp=stricmp)
fi
if test "x$strcasecmp" = xno ; then
  AC_CHECK_FUNC(strcmpi, strcasecmp=strcmpi)
fi

case "$strcasecmp" in
no)
  LIBOBJS="$LIBOBJS strcasecmp.o"
  AC_MSG_RESULT(using own implementation of strcasecmp) ;;
strcasecmp) ;;
*)
  AC_DEFINE_UNQUOTED(strcasecmp, "$strcasecmp",
    [strcasecmp define for systems which call it something else]) ;;
esac

AC_SUBST(LIBOBJS)

AC_MSG_CHECKING(for sgmltools v2 or v3)
case `sgmltools --version 2>&5` in
*" version 2"*)
  sgmltools=sgmltools
  AC_MSG_RESULT(yes) ;;
*" version 3"*)
  sgmltools=sgmltools
  AC_MSG_RESULT(yes) ;;
*)
  sgmltools=$MISSING' sgmltools'
  AC_MSG_RESULT(no) ;;
esac
AC_SUBST(sgmltools)

dnl extra flags for building with gcc
if test "$GCC" = yes; then
  if test "$cross_compiling" = yes; then
    CFLAGS="$CFLAGS -Wall -W -Wunused -Wpointer-arith -Wmissing-prototypes \
-Wwrite-strings -Wredundant-decls -Wnested-externs -Wcast-align"
  else
    CFLAGS="$CFLAGS -Wall -W -Wunused -Wshadow -Wpointer-arith -Wmissing-prototypes \
-Wwrite-strings -Wredundant-decls -Wnested-externs -Wcast-align"
  fi
  # too many complaints from headers, etc: -Wconversion
fi

AC_ARG_ENABLE(profiling,
[  --enable-profiling Build binaries to generate profiling information],
[case "${enableval}" in
  yes) CXXFLAGS="$CXXFLAGS -pg"
       CFLAGS="$CCFLAGS -pg";;
  no) ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-profiling) ;;
esac])

AC_DEFINE_DIR(DATADIR, datadir, [Location of platform independent support files])

AC_OUTPUT(Makefile src/Makefile doc/Makefile lib/Makefile hto/Makefile
 tests/Makefile debian/Makefile survex.iss docindex.htm debian/copyright)
