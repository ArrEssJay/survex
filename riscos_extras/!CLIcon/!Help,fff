> <CLIcon$Dir>.!Help

*** !CLIcon Version 3.79e (Beta test) ***

© Olly Betts 1991, 1992, 1993
 e-mail: olly@mantis.co.uk
 indirected snail mail: 24 Morgans Rd, Hertford, HERTS, SG13 8BS, UK

This version is freeware (status of future versions may differ). You may do
what you like with it, so long as you don't make a profit.

Summary for people who only read the first page or so of ReadMe files:

 * The main application is entirely written in ARM code to make it
   especially fast, responsive and compact. As little processing power and
   memory as possible is wasted.

 * The number of CLIcons limited only by available memory. !CLIcon
   maintains a private heap in its application workspace, which is of
   variable size, extra memory being claimed from and released back to the
   Task manager as appropriate.

 * Comprehensive, context-sensitive interactive help provided. A help
   message may be given for each CLIcon which is used in the icon bar
   interactive help message, and also if a disallowed operation is
   attempted.

 * MessageTrans module is used for help and other messages (messages stored
   in '<CLIcon$Dir>.Messages') allowing the messages to be translated into
   a foreign language, or customised by the user.

 * A 'hot-key' may be attached to each CLIcon, so that pressing the key
   is equivalent to clicking SELECT on the CLIcon (provided the current
   owner of the caret doesn't trap the keypress used).

 * CLIcons may be saved in CLIcon files. Double clicking a CLIcon file
   causes it to be loaded. If !CLIcon isn't loaded, it will be loaded first.
   CLIcon files may also be loaded by dragging them onto the CLIcon manager
   icon.

 * Optional, automatic use of hourglass pointer. Note that unlike some
   applications, !CLIcon copes if the Hourglass module is unplugged.

 * Files may be dragged from filer windows or from other applications.

Requirements:

 * RISC OS version 2.00 or later

!CLIcon allows all those little useful iconbar utilities to be implemented,
but uses less memory, and offers more versatility. A library of predefined
CLIcons is provided, and these may be customised or new CLIcons created by
users with a limited grasp of programming. Substitution of arguments is
performed, so a CLIcon can perform actions on a file dragged onto it.

Files in this application:
  (!Sprites and !Boot have public read access, so !CLIcon application and
   CLIcon files appear correctly over Econet, etc.)

!CLIcon.!Run
       .!Boot
       .!RunImage - the program code for !CLIcon
       .!Sprites
       .O!Sprites - alternative version which looks nicer on sticky backdrop
       .Sprites
           - file of sprites used for CLIcons
           - All highlights in <CLIcon$Dir>.Sprites are at top right
           - Manager sprite is 'Manager'
       .Defns     - predefined CLIcons (used by 'Lookup')
       .!Help     - this file
       .Templates - window definitions
       .Messages  - text messages used by !CLIcon (allows customisation)
       .!Setup    - CLIcons to be loaded on startup
       .FS.*      - programs used by predefined CLIcons
       .Modules.CLIconUtil - some useful extra *-commands
       .Modules.MsgTrans   - Acorn's MessageTrans module
       .Modules.ErrTrap    - used by !CLIcon to find out when an error
                             occurs during a Wimp_StartTask call

Each CLIcon has a number of attributes which may be edited as desired by
choosing 'Edit...' from the CLIcon's menu (Shortcut: Click ADJUST on the
CLIcon). The window is fairly self-explanatory. Interactive help can be
got using !Help.

If a sprite of the name given can't be found in the Wimp common sprite pool
(or if the sprite name is blank) the sprites 'default' and 'default2' are
used instead (for the first and second sprites respectively). If 'default2'
is undefined, 'default' is used instead. 

For a neat appearance, sprites should be at most 160x100 OS-units.

When !CLIcon is started up the file "<CLIcon$Dir>.!Setup" is read (if no
CLIcons are inherited). This may either be a CLIcon file (type &10F) or a
Text/Data file (type &FFF or &FFD) containing a list of CLIcons to be
installed on the icon bar. If it is a different type, then it is ignored.

Several commands may be strung together by inserting semi-colons between
them. If any command in the command string generates an error, the error
is reported, and the rest of the command string abandoned.

You may in addition insert characters into the keyboard buffer, simulate
the double-clicking of files (with optional deletion afterwards), pop-up
save boxes, and specify OS_CLI to be used rather than Wimp_StartTask
(allows output redirection to work properly). Also, by utilising short
programs stored in the 'FS' directory, you can write your own code to do
almost anything. CLIconFS$Path is set to point to this directory, so the
pseduo-path CLIconFS: can be used to refer to these programs.

A CLIcon may be "looked-up" in "<CLIcon$Dir>.Defns" by entering its name in
the 'Lookup' dialogue box. (The matching is not case sensitive).

With a pop-up save box, the in-core filename (if present) is extracted from
Basic, Text, Exec and Obey files.

If a CLIcon throws-up a savebox, the default filename for the savebox is
chosen as follows:

  File:
    (a) Incore name (if present) for filetypes BASIC,Obey,Exec,Text
    (b) Module title for filetype Module (if present - should be)
    (c) Leafname unless filename of form "<....>"
    (d) Filetype name with spaces -> '_'
    (e) 'File'

  Directory:
    (a) Leafname unless filename of form "<....>"
    (b) 'Directory'

  Application directory:
    (a) Leafname unless filename of form "<....>"
    (b) '!Appln'

Double-clicking in CLIcon produced save boxes will firstly broadcast a
double-click message. If no task responds to this, !CLIcon will attempt to
*Run the file.

The width of a CLIcon is the maximum of the width(s) of the sprite(s) and
the width of the text string, subject to a minimum of 16 OS-Units (so that
it is still possible to click or drag to very narrow CLIcons).

If sprites are different heights, the main sprite sits on icon bar baseline
for icon with/without text (as appropriate). The tops of the sprites are
aligned.

Dragging a sprite file onto edit window or manager icon does equivalent of
*IconSprites on it.

Files double clicked in filer windows by the user can be grabbed by CLIcons
and acted upon as if the file had been dragged onto the CLIcon. Give a list
of file types (as text or numbers - DIR = Directory, APP = Application, and
UNT = Untyped file), separated by commas. Double-clicks on files with these
types will cause the file to be acted upon as if it had been dragged onto
the icon (assuming no other application acts on them first - eg if !Edit is
loaded, it MAY grab any double-clicked Text files). To prevent any CLIcon
from grabbing a file, hold down the left hand Alt key whilst double-clicking
the file.

Choosing 'Create ‰' from manager icon menu or clicking SELECT on manager
icon creates a new CLIcon called 'CLIcon<N>'.

Modified CLIcons are indicated by ' *' added to the title of the edit
window. The modified flag behaves sensibly (ie saving to disc clears it,
deleting modified CLIcons is queried, etc). Renaming a CLIcon isn't counted
as altering it.

If a CLIcon has no command or initialisation, and the name is displayed
underneath, then the name is 'greyed out'.

If !CLIcon is loaded, and a CLIcon file is *Run (eg as the !Run file of
!CMOS), then we don't get a wimp dataopen message. However, a neat little
program called CLIconFS:RunCLIcon will get around this problem. It sends a
dataopen message for the filename it is called with.

Miscellaneous notes:

 * Dragging a file to the CLIcon manager icon will look to see if any
   CLIcons are installed that grab d-clicks of that type, and if so, allows
   that CLIcon to process the file.

 * Drags of CLIcon command and initialisation dialogue boxes produces Obey
   file of CLIcon command with ';'s converted to linefeeds and ';;'s to
   ';'s.

 * Dragging an Obey file onto the command or initialisation dialogue box
   converts newlines to ';'s and ';'s to ';;'s, and enters it into the box.
   Blank lines are removed, else we'd get ';;' which would be read as a
   semicolon.

 * Clicking ADJUST on the hotkey field of the edit window inverts it. The
   next keypress is trapped and the code for it entered into the hotkey
   field. Moving the ptr out of edit window or clicking on the background
   on the edit window will clear the inverted state.
     Coding is as follows:
        0       |@
        1-26    |<letter> ; 1 as |A ... 26 as |Z
        27      |[ (ESC)
        28      |\
        29      |]
        30      |^
        31      |_
        32      <&20>
        33-126  keyboard char, except:
        "       |"
        |       ||
        <       |<
        127     |? (DELETE)
        128-255 <&xx>  ; xx  is hex value
        256-511 <&xxx> ; xxx is hex value

 * Hotkey field is truncated to 6 chars when read in from file

Likely future enhancements:
===========================

 * Make solid drags work if enabled

 * Add options in the form of tickable and writable menu items. These will
   be supplied to the command as %2 up to %9. 0 or 1 for a tickable item and
   the contents of writable item (or "" if empty). CLIcon menu will become:
      ____________
      | Info   ->|__________
      | CLIcon ->| Edit...  |
      | Option1  | Copy   ->|
      | :        | Rename ->|
      | OptionN  | Save   ->|
      | Remove   +----------+
      +----------+

     CLIcon has an 'Options:' field. Give list of options with '>' at end
     for writable, else tickable, say.
     Validation string?
     Might be useful to notify proggy when an entry is changed. Maybe pass
     OPT code with args ... (maybe only if asked to notify changes)

 * Allow manager to be hidden or placed on backdrop.

 * Allow CLIcons to be on backdrop instead of icon bar. I usually have two
   hard drives and two floppies and a ram disc, and RKL's trashcan, and
   despite redefining smaller disc drive sprites, I still usually have a
   scrolling icon bar. It might be bearable if the icon bar would scroll
   while you're dragging a file (which it now does on RISC OS 3.1 - well
   done Acorn).

 * Copy blank CLIcon details from CLIcon 'Blank' in Defns.

 * Provide window with the predefined CLIcons in and let the user choose
   which one to lookup.

 * Rewrite as a module?

 * Allow "lower priority" grabbing of double-clicked files. ie If no other
   task responds to the double-click, and before *Run-ing the file. Eg. With
   More, a text file will be grabbed by an editor if present, but otherwise
   More will display it. Probably give filetype in brackets: Eg Data,(Text)
   would always try to grab data files, but would only grab text files if
   no-one else did. (Can't implement by catching module service call for
   unknown command as I'd hoped - how about setting Alias$@RunType_XXX to
   perform module *-command, eg. *CLIcon_RunType XXX <fname> ? ) How do we
   deal with this if two CLIcons are claiming the same filetype, especially
   when one is removed?

 * Installer to install with choice of CLIcons in <CLIcon$Dir>.Defns, and
   possibly extra features with RISC OS 3
